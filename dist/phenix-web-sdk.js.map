{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap fb545e32d13257d96dee","webpack:///./~/phenix-web-lodash-light/src/index.js","webpack:///./~/phenix-web-assert/src/index.js","webpack:///external \"phenix-rtc\"","webpack:///./~/phenix-web-observable/src/index.js","webpack:///./~/phenix-web-http/src/index.js","webpack:///./~/phenix-web-logging/src/index.js","webpack:///./~/phenix-web-logging/src/logging.json.js","webpack:///./~/phenix-web-network-connection-monitor/src/index.js","webpack:///./src/sdk/MQProtocol.js","webpack:///./src/sdk/PCastEndPoint.js","webpack:///./src/sdk/logging/pcastLoggerFactory.js","webpack:///./src/sdk/room/member.json.js","webpack:///./src/sdk/room/room.json.js","webpack:///external \"ByteBuffer\"","webpack:///./src/sdk/PCast.js","webpack:///./src/sdk/express/PCastExpress.js","webpack:///./src/sdk/room/RoomService.js","webpack:///./~/phenix-web-observable/src/Observable.js","webpack:///./src/sdk/authentication/AuthenticationService.js","webpack:///./src/sdk/environment.js","webpack:///./src/sdk/room/Member.js","webpack:///./src/sdk/room/Room.js","webpack:///./src/sdk/audio/AudioSpeakerDetector.js","webpack:///./src/sdk/bandwidth/BandwidthMonitor.js","webpack:///./src/sdk/express/RoomExpress.js","webpack:///./~/phenix-web-assert/src/assert.js","webpack:///./~/phenix-web-http/src/http.js","webpack:///./~/phenix-web-lodash-light/src/LodashLight.js","webpack:///./~/phenix-web-logging/src/ConsoleAppender.js","webpack:///./~/phenix-web-logging/src/Logger.js","webpack:///./~/phenix-web-network-connection-monitor/src/NetworkConnectionMonitor.js","webpack:///./~/phenix-web-observable/src/ObservableArray.js","webpack:///./~/phenix-web-observable/src/ObservableMonitor.js","webpack:///./~/phenix-web-reconnecting-websocket/src/ReconnectingWebSocket.js","webpack:///./~/phenix-web-reconnecting-websocket/src/index.js","webpack:///./src/sdk/AdminAPI.js","webpack:///./src/sdk/ClosestEndPointResolver.js","webpack:///./src/sdk/DimensionsChangedMonitor.js","webpack:///./src/sdk/PCastProtocol.js","webpack:///./src/sdk/PeerConnectionMonitor.js","webpack:///./src/sdk/analytix/MetricsTransmitter.js","webpack:///./src/sdk/analytix/StreamAnalytix.js","webpack:///./src/sdk/analytix/metricsTransmitterFactory.js","webpack:///./src/sdk/audio/AudioContext.js","webpack:///./src/sdk/audio/AudioSpeakerDetectionAlgorithm.js","webpack:///./src/sdk/audio/AudioVolumeMeter.js","webpack:///./src/sdk/audio/AudioVolumeMeterFactory.js","webpack:///./src/sdk/bandwidth/PublisherBandwidthAdjuster.js","webpack:///./src/sdk/chat/ChatService.js","webpack:///./src/sdk/chat/RoomChatService.js","webpack:///./src/sdk/logging/AnalytixAppender.js","webpack:///./src/sdk/logging/analytixAppenderFactory.js","webpack:///./src/sdk/protocol/analytixProto.json.js","webpack:///./src/sdk/protocol/chatProto.json.js","webpack:///./src/sdk/protocol/mqProto.json.js","webpack:///./src/sdk/protocol/pcastProto.json.js","webpack:///./src/sdk/room/ImmutableRoom.js","webpack:///./src/sdk/room/Stream.js","webpack:///./src/sdk/room/stream.json.js","webpack:///./src/sdk/room/track.json.js","webpack:///external \"protobuf\"","webpack:///./src/web-sdk.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,qG;;;;;;ACnBD,+C;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,qG;;;;;;AC3BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,CAAC;AAAA,qG;;;;;;AC9BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC/BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,0BAA0B;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA,mCAAmC,0BAA0B;AAC7D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACzHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA,wEAAwE,mBAAmB;AAC3F;AACA;;AAEA;AACA;AACA;;AAEA,sDAAsD,mBAAmB;AACzE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACzGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACjDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC/DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACnED,gD;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,sDAAsD;AACtD,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,6BAA6B;AACxD;;AAEA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,YAAY,gBAAgB;;AAExE;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uEAAuE,gCAAgC;;AAEvG;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA,mEAAmE,gCAAgC;;AAEnG;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C,YAAY,uCAAuC;AAC/F;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,mEAAmE,gCAAgC;;AAEnG;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iEAAiE;AACjE;;AAEA;AACA;;AAEA;AACA,4EAA4E,gBAAgB,uBAAuB;AACnH;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mFAAmF;AACnF;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb,qFAAqF;AACrF;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,4EAA4E,0BAA0B,uBAAuB;AAC7H;AACA;AACA;;AAEA,uCAAuC;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,+BAA+B;;AAE/B;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,8CAA8C,uBAAuB;AACrE;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS,+CAA+C;AACxD;AACA,SAAS,gFAAgF;AACzF;AACA,SAAS,gDAAgD;AACzD;AACA,SAAS,qFAAqF;AAC9F;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,aAAa;AACbiCAAiC;;AAEjC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gFAAgF;;AAEhF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA,6BAA6B;AAC7B,yBAAyB;;AAEzB;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;;AAEzB;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,uCAAuC,yCAAyC;AAChF;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,uCAAuC,yCAAyC;AAChF;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA,uCAAuC,yCAAyC;AAChF;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,+BAA+B,mBAAmB;AAClD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uEAAuE;AACvE;AACA;;AAEA,uFAAuF;AACvF;AACA;;AAEA,qFAAqF;AACrF;AACA;;AAEA,+EAA+E;AAC/E;AACA;;AAEA,iFAAiF;AACjF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC,GAAG;AACrD;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,qCAAqC;AACrC;;AAEA;AACA;;AAEA;AACA,iCAAiC;;AAEjC;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,6HAA6H;AAC7H;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA,iCAAiC;;AAEjC;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA,iCAAiC;AACjC,6BAA6B;;AAE7B;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,6BAA6B;;AAE7B;AACA;AACA,6BAA6B;;AAE7B;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA,iBAAiB;AACjB;;AAEA,oCAAoC;;AAEpC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iCAAiC,GAAG;AACrD;AACA,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iCAAiC;AACjC;;AAEA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA,iBAAiB;AACjB;;AAEA,oCAAoC;;AAEpC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC,8DAA8D;AACpG,2CAA2C,kBAAkB,gBAAgB;AAC7E;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;;AAEA;AACA;AACA,iCAAiC;AACjC,6BAA6B;AAC7B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA,iCAAiC;;AAEjC;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;;AAEA;;AAEA;AACA,qCAAqC;AACrC;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA,6BAA6B;AAC7B;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,8DAA8D;AAC9D;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,+BAA+B,2BAA2B;AAC1D;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,eAAe,8CAA8C;AACvF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,2DAA2D;;AAE3D,+DAA+D;;AAE/D;AACA;;AAEA;AACA;AACA,SAAS;AACT,6DAA6D,sBAAsB,yBAAyB;AAC5G;AACA;;AAEA;AACA;AACA,0CAA0C;;AAE1C,uBAAuB,SAAS;AAChC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,8DAA8D;AAC9D;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,6BAA6B;;AAE7B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA,yBAAyB;;AAEzB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,iCAAiC;AACjC;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA,2EAA2E,SAAS;AACpF;AACA;;AAEA,oDAAoD;AACpD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB,8DAA8D;AAC9D;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA,qBAAqB;;AAErB;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B,mBAAmB;AAC9C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACt2FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,eAAe;AAC1D;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,eAAe;AAC1D;;AAEA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA,mCAAmC,aAAa;AAChD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iDAAiD;AACjD;AACA,oCAAoC,aAAa;AACjD,iBAAiB;AACjB,oCAAoC,kBAAkB;AACtD,iBAAiB;AACjB,SAAS;AACT;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA,uCAAuC,eAAe;AACtD;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,+DAA+D;;AAE/D;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA,yFAAyF,uCAAuC;AAChI;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA,uCAAuC,eAAe;AACtD;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,gEAAgE;;AAEhE;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA,8EAA8E;AAC9E;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC/oBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sCAAsC,sBAAsB;;AAE5D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B;;AAE1B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC3qBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACxLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC/ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACjCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,yFAAyF,eAAe;AACxG;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACxMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,uCAAuC;AACvC,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC/GD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC9DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0CAA0C;;AAE1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,2CAA2C;;AAE3C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,mDAAmD,yBAAyB;AAC5E;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA,iBAAiB;;AAEjB,2GAA2G,kBAAkB;AAC7H,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,0DAA0D;;AAE1D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA,iDAAiD,4BAA4B;AAC7E;;AAEA;;AAEA;AACA,iDAAiD,4BAA4B;AAC7E;;AAEA;;AAEA;AACA,iDAAiD,4BAA4B;AAC7E;;AAEA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,aAAa;;AAEb;AACA,8CAA8C,mBAAmB;AACjE;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb,6CAA6C,SAAS;AACtD;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA,wCAAwC;;AAExC;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,aAAa;AACb,uCAAuC,wBAAwB;AAC/D;;AAEA,+CAA+C;AAC/C;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,mDAAmD;AACnD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACvdD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACjFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,6EAA6E;AAC7E;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,6EAA6E;AAC7E;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AClOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,uBAAuB,iBAAiB;AACxC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,iBAAiB;AACxC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;;AAEA,uBAAuB,+BAA+B;AACtD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC/fD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,KAAK,iBAAiB;;AAEtB;AACA;AACA,KAAK;;AAEL;AACA,CAAC;AAAA,qG;;;;;;AC3DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0CAA0C,2BAA2B;AACrE;;AAEA;AACA,0CAA0C,2BAA2B;AACrE;;AAEA;AACA,0CAA0C,0BAA0B;AACpE;;AAEA;AACA,0CAA0C,0BAA0B;AACpE;;AAEA;AACA,0CAA0C,2BAA2B;AACrE;;AAEA;AACA,0CAA0C,2BAA2B;AACrE;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,gHAAgH,kBAAkB;AAClI;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,YAAY,EAAE;AAC3B,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACjND;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kEAAkE;AAClE;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA,kDAAkD;AAClD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACxFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACvDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACtSD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iDAAiD;;AAEjD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA,qCAAqC;AACrC;;AAEA;;AAEA;AACA,mCAAmC,mBAAmB;AACtD;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACpFD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8FAA8F;AAC9F;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACriBAAiB;AACjB;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC9HD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,4EAA4E,aAAa;;AAEzaAAa;AACb;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,uBAAuB;AAC9C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;;AAEA,+BAA+B;AAC/B;AACA;;AAEA,iCAAiC;AACjC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC5jBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,qDAAqD;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AChcD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sBAAsB;AAC9C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mCAAmC;;AAEnC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uCAAuC,oCAAoC;AAC3E;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AClLD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS,wCAAwC;AACjD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,qCAAqC,oBAAoB;AACzD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,oDAAoD,mDAAmD,GAAG,2DAA2D;;AAErK;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,4CAA4C,sBAAsB;AAClE;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,yCAAyC;;AAEzC;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACzPD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC1DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACxCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACjHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,kBAAkB;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACtID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACvDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA,2GAA2G,kBAAkB;AAC7H;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,yHAAyH,kBAAkB;AAC3I;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC3FD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;AACrC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8BAA8B;;AAE9B;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,0BAA0B;;AAE1B;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B;;AAE1B;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AChaAAa;;AAEb;AACA;AACA;;AAEA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA,uBAAuB,+BAA+B;AACtD;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACnaAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA,+BAA+B;;AAE/B;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,uCAAuC,oCAAoC;AAC3E;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC1DD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACvZD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AC72BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AClID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACjqDD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;AClHD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACpGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrCD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AAAA,qG;;;;;;ACrCD,gD;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,qG","file":"phenix-web-sdk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"phenix-rtc\"), require(\"ByteBuffer\"), require(\"protobuf\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"phenix-rtc\", \"ByteBuffer\", \"protobuf\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"phenix-rtc\"), require(\"ByteBuffer\"), require(\"protobuf\")) : factory(root[\"phenix-rtc\"], root[\"ByteBuffer\"], root[\"protobuf\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_60__) {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 61);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap fb545e32d13257d96dee","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    './LodashLight'\n], function (LodashLight) {\n    'use strict';\n\n    return LodashLight;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-lodash-light/src/index.js\n// module id = 0\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    './assert'\n], function (assert) {\n    return assert;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-assert/src/index.js\n// module id = 1\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_2__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"phenix-rtc\"\n// module id = 2\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    './Observable',\n    './ObservableArray',\n    './ObservableMonitor'\n], function (Observable, ObservableArray, ObservableMonitor) {\n    'use strict';\n\n    return {\n        Observable: Observable,\n        ObservableArray: ObservableArray,\n        ObservableMonitor: ObservableMonitor\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-observable/src/index.js\n// module id = 3\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    './http'\n], function (http) {\n    'use strict';\n\n    return http;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-http/src/index.js\n// module id = 4\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    './Logger',\n    './ConsoleAppender',\n    './logging.json'\n], function (Logger, ConsoleAppender, logging) {\n    'use strict';\n\n    return {\n        createLogger: function() {\n            return new Logger();\n        }, // Base logger with nothing appended\n        Logger: Logger,\n        ConsoleAppender: ConsoleAppender,\n        level: logging.level // Object with log levels\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-logging/src/index.js\n// module id = 5\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var logging = {\n        level: {\n            TRACE: 0,\n            DEBUG: 1,\n            INFO: 2,\n            WARN: 3,\n            ERROR: 4,\n            FATAL: 5\n        }\n    };\n\n    return logging;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-logging/src/logging.json.js\n// module id = 6\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    './NetworkConnectionMonitor'\n], function (NetworkConnectionMonitor) {\n    'use strict';\n\n    return NetworkConnectionMonitor;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-network-connection-monitor/src/index.js\n// module id = 7\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'protobuf',\n    './protocol/mqProto.json',\n    './protocol/pcastProto.json',\n    './protocol/chatProto.json',\n    './protocol/analytixProto.json'\n], function (ProtoBuf, mqProto, pcastProto, chatProto, analytixProto) {\n    'use strict';\n\n    function MQProtocol(logger) {\n        this._logger = logger;\n\n        var builder = ProtoBuf.loadJson(mqProto);\n\n        builder = ProtoBuf.loadJson(pcastProto, builder);\n        builder = ProtoBuf.loadJson(chatProto, builder);\n        builder = ProtoBuf.loadJson(analytixProto, builder);\n\n        this._builders = builder.build();\n        this._apiVersion = 3;\n    }\n\n    MQProtocol.prototype.getApiVersion = function () {\n        return this._apiVersion;\n    };\n\n    MQProtocol.prototype.encode = function (type, data) {\n        if (typeof type !== 'string') {\n            throw new Error(\"'type' must be a string\");\n        }\n\n        if (typeof data !== 'object') {\n            throw new Error(\"'data' must be an object\");\n        }\n\n        var builder = getBuilder.call(this, type);\n\n        return builder.encode(data);\n    };\n\n    MQProtocol.prototype.decode = function (type, value) {\n        if (typeof type !== 'string') {\n            throw new Error(\"'type' must be a string\");\n        }\n\n        var builder = getBuilder.call(this, type);\n\n        return convertTypes(builder.decode(value));\n    };\n\n    function getBuilder(type) {\n        var fragments = type.split('.');\n        var builder = this._builders;\n\n        for (var i = 0; i < fragments.length - 1; i++) {\n            builder = builder[fragments[i]];\n\n            if (!builder) {\n                throw new Error('Unsupported type \"' + type + '\"');\n            }\n        }\n\n        builder = builder[fragments[fragments.length - 1]];\n\n        if (typeof builder !== 'function') {\n            throw new Error('Unsupported type \"' + type + '\"');\n        }\n\n        return builder;\n    }\n\n    function convertTypes(message) {\n        if (message && message.$type && message.$type.children) {\n            for (var key in message.$type.children) {\n                var child = message.$type.children[key];\n                var value = message[child.name];\n                var type = child && child.element ? child.element.resolvedType : null;\n\n                if (type && type.className === 'Message' && type.children) {\n                    message[child.name] = convertTypes(value);\n                } else if (type && type.className === 'Enum' && type.children) {\n                    // Stringify Enums\n                    var metaValue = null;\n\n                    for (var i = 0; i < type.children.length; i++) {\n                        if (type.children[i].id === value) {\n                            metaValue = type.children[i];\n\n                            break;\n                        }\n                    }\n\n                    if (metaValue && metaValue.name) {\n                        message[child.name] = metaValue.name;\n                    }\n                } else if (value && typeof value.toNumber === 'function') {\n                    // Convert long to numbers\n                    message[child.name] = value.toNumber();\n                }\n            }\n        }\n\n        return message;\n    }\n\n    return MQProtocol;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/MQProtocol.js\n// module id = 8\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-http',\n    './ClosestEndPointResolver'\n], function (_, http, ClosestEndPointResolver) {\n    'use strict';\n\n    var maxAttempts = 4;\n\n    function PCastEndPoint(version, baseUri, logger) {\n        if (typeof version !== 'string') {\n            throw new Error('Must pass a valid \"version\"');\n        }\n\n        if (typeof baseUri !== 'string') {\n            throw new Error('Must pass a valid \"baseUri\"');\n        }\n\n        if (typeof logger !== 'object') {\n            throw new Error('Must pass a valid \"logger\"');\n        }\n\n        this._version = version;\n        this._baseUri = baseUri;\n        this._logger = logger;\n    }\n\n    PCastEndPoint.DefaultPCastUri = 'https://pcast.phenixp2p.com';\n\n    PCastEndPoint.prototype.getBaseUri = function () {\n        return this._baseUri;\n    };\n\n    PCastEndPoint.prototype.resolveUri = function (callback /* (error, {uri, roundTripTime}) */) {\n        return resolveUri.call(this, this._baseUri, callback);\n    };\n\n    PCastEndPoint.prototype.toString = function () {\n        return 'PCastEndPoint[' + this._baseUri + ']';\n    };\n\n    function resolveUri(baseUri, callback /* (error, {uri, roundTripTime}) */) {\n        if (baseUri.lastIndexOf('wss:', 0) === 0) {\n            // WSS - Specific web socket end point\n            callback(undefined, {\n                uri: baseUri + '/ws',\n                roundTripTime: 0\n            });\n        } else if (baseUri.lastIndexOf('https:', 0) === 0) {\n            // HTTP - Resolve closest end point\n            var that = this;\n\n            getEndpoints.call(that, baseUri, function(err, endPoints) {\n                if (err) {\n                    return callback(err);\n                }\n\n                var closestEndPointResolver = new ClosestEndPointResolver(callback, that._version, that._baseUri, that._logger);\n\n                closestEndPointResolver.resolveAll(endPoints);\n            });\n        } else {\n            // Not supported\n            callback(new Error('Uri not supported'));\n        }\n    }\n\n    function getEndpoints(baseUri, callback) {\n        http.getWithRetry(baseUri + '/pcast/endPoints', {\n            timeout: 15000,\n            queryParameters: {\n                version: '%VERSION%',\n                _: _.now()\n            }\n        }, function (err, responseText) {\n            if (err) {\n                return callback(new Error('Failed to resolve an end point', err));\n            }\n\n            var endPoints = responseText.split(',');\n\n            if (endPoints.length < 1) {\n                callback(new Error('Failed to discover end points'));\n            }\n\n            callback(undefined, endPoints);\n        }, maxAttempts);\n    }\n\n    return PCastEndPoint;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/PCastEndPoint.js\n// module id = 9\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-logging',\n    './analytixAppenderFactory'\n], function (_, assert, logging, analytixAppenderFactory) {\n    'use strict';\n\n    function PCastLoggerFactory() {\n\n    }\n\n    PCastLoggerFactory.prototype.createPCastLogger = function createPCastLogger(baseUri, disableConsole) {\n        if (baseUri) {\n            assert.stringNotEmpty(baseUri, 'baseUri');\n        }\n\n        var logger = new logging.Logger();\n        var analytixAppender = analytixAppenderFactory.getAppender(baseUri);\n\n        analytixAppender.setThreshold(logging.level.INFO);\n\n        if (!disableConsole) {\n            logger.addAppender(new logging.ConsoleAppender());\n        }\n\n        logger.addAppender(analytixAppender);\n\n        logger.isPCastLogger = true;\n\n        return logger;\n    };\n\n    return new PCastLoggerFactory();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/logging/pcastLoggerFactory.js\n// module id = 10\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var memberEnums = {\n        roles: {\n            participant: {\n                id: 0,\n                name: 'Participant'\n            },\n            moderator: {\n                id: 1,\n                name: 'Moderator'\n            },\n            presenter: {\n                id: 2,\n                name: 'Presenter'\n            },\n            audience: {\n                id: 3,\n                name: 'Audience'\n            }\n        },\n        states: {\n            active: {\n                id: 0,\n                name: 'Active'\n            },\n            passive: {\n                id: 1,\n                name: 'Passive'\n            },\n            handRaised: {\n                id: 2,\n                name: 'HandRaised'\n            },\n            inactive: {\n                id: 3,\n                name: 'Inactive'\n            },\n            offline: {\n                id: 4,\n                name: 'Offline'\n            }\n        }\n    };\n\n    return memberEnums;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/member.json.js\n// module id = 11\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var roomEnums = {\n        types: {\n            directChat: {\n                id: 0,\n                name: 'DirectChat'\n            },\n            multiPartyChat: {\n                id: 1,\n                name: 'MultiPartyChat'\n            },\n            moderatedChat: {\n                id: 2,\n                name: 'ModeratedChat'\n            },\n            townHall: {\n                id: 3,\n                name: 'TownHall'\n            },\n            channel: {\n                id: 4,\n                name: 'Channel'\n            }\n        },\n        events: {\n            memberJoined: {\n                id: 0,\n                name: 'MemberJoined'\n            },\n            memberLeft: {\n                id: 1,\n                name: 'MemberLeft'\n            },\n            memberUpdated: {\n                id: 2,\n                name: 'MemberUpdated'\n            },\n            roomUpdated: {\n                id: 3,\n                name: 'RoomUpdated'\n            },\n            roomEnded: {\n                id: 4,\n                name: 'RoomEnded'\n            }\n        }\n    };\n\n    return roomEnums;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/room.json.js\n// module id = 12\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_13__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ByteBuffer\"\n// module id = 13\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    './logging/pcastLoggerFactory',\n    'phenix-web-http',\n    './PCastProtocol',\n    './PCastEndPoint',\n    './PeerConnectionMonitor',\n    './DimensionsChangedMonitor',\n    './analytix/metricsTransmitterFactory',\n    './analytix/StreamAnalytix',\n    'phenix-rtc'\n], function (_, assert, observable, pcastLoggerFactory, http, PCastProtocol, PCastEndPoint, PeerConnectionMonitor, DimensionsChangedMonitor, metricsTransmitterFactory, StreamAnalytix, phenixRTC) {\n    'use strict';\n\n    var NetworkStates = _.freeze({\n        'NETWORK_EMPTY': 0,\n        'NETWORK_IDLE': 1,\n        'NETWORK_LOADING': 2,\n        'NETWORK_NO_SOURCE': 3\n    });\n    var sdkVersion = '2017-08-14T21:49:04Z';\n    var defaultChromePCastScreenSharingExtensionId = 'icngjadgidcmifnehjcielbmiapkhjpn';\n    var defaultFirefoxPCastScreenSharingAddOn = _.freeze({\n        url: 'https://addons.mozilla.org/firefox/downloads/file/474686/pcast_screen_sharing-1.0.3-an+fx.xpi',\n        iconUrl: 'https://phenixp2p.com/public/images/phenix-logo-unicolor-64x64.png',\n        hash: 'sha256:4972e9718ea7f7c896abc12d1a9e664d5f3efe498539b082ab7694f9d7af4f3b'\n    });\n    var widevineServiceCertificate = null;\n    var firefoxInstallationCheckInterval = 100;\n    var firefoxMaxInstallationChecks = 450;\n    var defaultBandwidthEstimateForPlayback = 2000000; // 2Mbps will select 720p by default\n    var maxBandwidthForSdPlayback = 1280000; // Safe limit for getting SD only playback\n\n    function PCast(options) {\n        options = options || {};\n        this._observableStatus = new observable.Observable('offline');\n        this._baseUri = options.uri || PCastEndPoint.DefaultPCastUri;\n        this._deviceId = options.deviceId || '';\n        this._version = sdkVersion;\n        this._logger = options.logger || pcastLoggerFactory.createPCastLogger(this._baseUri, options.disableConsoleLogging);\n        this._metricsTransmitter = options.metricsTransmitter || metricsTransmitterFactory.createMetricsTransmitter(this._baseUri);\n        this._endPoint = new PCastEndPoint(this._version, this._baseUri, this._logger);\n        this._screenSharingExtensionId = options.screenSharingExtensionId || defaultChromePCastScreenSharingExtensionId;\n        this._screenSharingAddOn = options.screenSharingAddOn || defaultFirefoxPCastScreenSharingAddOn;\n        this._screenSharingEnabled = false;\n        this._shaka = options.shaka || window.shaka;\n        this._videojs = options.videojs || window.videojs;\n        this._status = 'offline';\n\n        if (phenixRTC.browser === 'Chrome' && this._screenSharingExtensionId) {\n            addLinkHeaderElement.call(this);\n        }\n\n        phenixRTC.addEventListener(window, 'unload', function (pcast) {\n            return function () {\n                pcast.stop();\n            };\n        }(this));\n    }\n\n    PCast.prototype.getBaseUri = function () {\n        return this._endPoint.getBaseUri();\n    };\n\n    PCast.prototype.getStatus = function () {\n        return this._observableStatus.getValue();\n    };\n\n    PCast.prototype.getObservableStatus = function () {\n        return this._observableStatus;\n    };\n\n    PCast.prototype.start = function (authToken, authenticationCallback, onlineCallback, offlineCallback) {\n        if (typeof authToken !== 'string') {\n            throw new Error('\"authToken\" must be a string');\n        }\n\n        if (typeof authenticationCallback !== 'function') {\n            throw new Error('\"authenticationCallback\" must be a function');\n        }\n\n        if (typeof onlineCallback !== 'function') {\n            throw new Error('\"onlineCallback\" must be a function');\n        }\n\n        if (typeof offlineCallback !== 'function') {\n            throw new Error('\"offlineCallback\" must be a function');\n        }\n\n        if (this._started) {\n            throw new Error('\"Already started\"');\n        }\n\n        this._stopped = false;\n        this._started = true;\n        this._authToken = authToken;\n        this._authenticationCallback = authenticationCallback;\n        this._onlineCallback = onlineCallback;\n        this._offlineCallback = offlineCallback;\n\n        transitionToStatus.call(this, 'connecting');\n\n        this._peerConnections = {};\n        this._mediaStreams = {};\n        this._publishers = {};\n        this._gumStreams = [];\n\n        var that = this;\n\n        checkForScreenSharingCapability.call(that, function (screenSharingEnabled) {\n            that._screenSharingEnabled = screenSharingEnabled;\n\n            that._endPoint.resolveUri(function (err, endPoint) {\n                if (err) {\n                    that._logger.error('Failed to connect to [%s]', that._baseUri, err);\n\n                    transitionToStatus.call(that, 'offline');\n\n                    switch (err.code) {\n                    case 0:\n                        that._authenticationCallback.call(that, that, 'network-unavailable', '');\n\n                        break;\n                    case 503:\n                        that._authenticationCallback.call(that, that, 'capacity', '');\n\n                        break;\n                    default:\n                        that._authenticationCallback.call(that, that, 'failed', '');\n\n                        break;\n                    }\n\n                    that._stopped = true;\n                    that._started = false;\n\n                    return;\n                }\n\n                that._logger.info('Discovered end point [%s] with RTT [%s]', endPoint.uri, endPoint.roundTripTime);\n\n                that._networkOneWayLatency = endPoint.roundTripTime / 2;\n\n                instantiateProtocol.call(that, endPoint.uri);\n            });\n        });\n    };\n\n    PCast.prototype.stop = function () {\n        if (!this._started) {\n            return;\n        }\n\n        this._stopped = true;\n        this._started = false;\n\n        delete this._authenticationCallback;\n\n        try {\n            var reason = '';\n\n            for (var streamId in this._mediaStreams) {\n                if (this._mediaStreams.hasOwnProperty(streamId)) {\n                    endStream.call(this, streamId, reason);\n                }\n            }\n\n            for (var publisherStreamId in this._publishers) {\n                if (this._publishers.hasOwnProperty(publisherStreamId)) {\n                    var publisher = this._publishers[publisherStreamId];\n\n                    endStream.call(this, publisherStreamId, reason);\n\n                    if (!_.includes(publisher.getOptions(), 'detached')) {\n                        publisher.stop(reason);\n                    }\n                }\n            }\n\n            for (var peerConnectionStreamId in this._peerConnections) {\n                if (this._peerConnections.hasOwnProperty(peerConnectionStreamId)) {\n                    endStream.call(this, peerConnectionStreamId, reason);\n                }\n            }\n\n            for (var i = 0; i < this._gumStreams.length; i++) {\n                var tracks = this._gumStreams[i].getTracks();\n\n                for (var j = 0; j < tracks.length; j++) {\n                    tracks[j].stop();\n                }\n            }\n        } finally {\n            if (this._protocol) {\n                this._protocol.disconnect();\n\n                this._protocol = null;\n            }\n\n            if (this._logger.setObservableSessionId) {\n                this._logger.setObservableSessionId(null);\n            }\n        }\n    };\n\n    PCast.prototype.getUserMedia = function (options, callback) {\n        if (typeof options !== 'object') {\n            throw new Error('\"options\" must be an object');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        return getUserMedia.call(this, options, callback);\n    };\n\n    PCast.prototype.publish = function (streamToken, streamToPublish, callback, tags, options) {\n        if (!this._started) {\n            throw new Error('PCast not started. Unable to publish. Please start pcast first.');\n        }\n\n        if (typeof streamToken !== 'string') {\n            throw new Error('\"streamToken\" must be a string');\n        }\n\n        if (typeof streamToPublish !== 'object' && typeof streamToPublish !== 'string') {\n            throw new Error('\"streamToPublish\" must be an object or URI');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        tags = tags || [];\n\n        if (!Array.isArray(tags)) {\n            throw new Error('\"tags\" must be an array');\n        }\n\n        options = options || {};\n\n        if (typeof options !== 'object') {\n            throw new Error('\"options\" must be an object');\n        }\n\n        var that = this;\n        var streamType = 'upload';\n        var setupStreamOptions = _.assign({}, options, {negotiate: true});\n\n        if (typeof streamToPublish === 'string') {\n            setupStreamOptions.negotiate = false;\n            setupStreamOptions.connectUri = streamToPublish;\n        } else {\n            setupStreamOptions.connectUri = options.connectUri;\n        }\n\n        if (tags.length > 0) {\n            setupStreamOptions.tags = tags;\n        }\n\n        var streamAnalytix = new StreamAnalytix(this.getProtocol().getSessionId(), this._logger, this._metricsTransmitter);\n\n        streamAnalytix.setProperty('resource', streamType);\n\n        this._protocol.setupStream(streamType, streamToken, setupStreamOptions, function (error, response) {\n            if (error) {\n                that._logger.error('Failed to create uploader [%s]', error);\n\n                return callback.call(that, that, 'failed');\n            } else if (response.status !== 'ok') {\n                that._logger.warn('Failed to create uploader, status [%s]', response.status);\n\n                switch (response.status) {\n                case 'capacity':\n                case 'unauthorized':\n                    return callback.call(that, that, response.status);\n                default:\n                    return callback.call(that, that, 'failed');\n                }\n            } else {\n                var streamId = response.createStreamResponse.streamId;\n\n                streamAnalytix.setStreamId(streamId);\n                streamAnalytix.setStartOffset(response.createStreamResponse.offset);\n                streamAnalytix.recordMetric('Provisioned');\n\n                if (setupStreamOptions.negotiate === true) {\n                    var offerSdp = response.createStreamResponse.createOfferDescriptionResponse.sessionDescription.sdp;\n                    var peerConnectionConfig = applyVendorSpecificLogic(parseProtobufMessage(response.createStreamResponse.rtcConfiguration));\n\n                    return createPublisherPeerConnection.call(that, peerConnectionConfig, streamToPublish, streamId, offerSdp, streamAnalytix, function (phenixPublisher, error) {\n                        streamAnalytix.recordMetric('SetupCompleted', {string: error ? 'failed' : 'ok'});\n\n                        if (error) {\n                            callback.call(that, that, 'failed', null);\n                        } else {\n                            callback.call(that, that, 'ok', phenixPublisher);\n                        }\n                    }, options, response.createStreamResponse.options);\n                }\n\n                return createPublisher.call(that, streamId, function (phenixPublisher, error) {\n                    streamAnalytix.recordMetric('SetupCompleted', {string: error ? 'failed' : 'ok'});\n\n                    if (error) {\n                        callback.call(that, that, 'failed', null);\n                    } else {\n                        callback.call(that, that, 'ok', phenixPublisher);\n                    }\n                }, response.createStreamResponse.options);\n            }\n        });\n    };\n\n    PCast.prototype.subscribe = function (streamToken, callback, options) {\n        if (!this._started) {\n            throw new Error('PCast not started. Unable to subscribe. Please start pcast first.');\n        }\n\n        if (typeof streamToken !== 'string') {\n            throw new Error('\"streamToken\" must be a string');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        options = options || {};\n\n        if (typeof options !== 'object') {\n            throw new Error('\"options\" must be an object');\n        }\n\n        var that = this;\n        var streamType = 'download';\n        var setupStreamOptions = _.assign({}, options, {negotiate: options.negotiate !== false});\n        var streamAnalytix = new StreamAnalytix(this.getProtocol().getSessionId(), this._logger, this._metricsTransmitter);\n\n        streamAnalytix.setProperty('resource', streamType);\n\n        this._protocol.setupStream(streamType, streamToken, setupStreamOptions, function (error, response) {\n            if (error) {\n                that._logger.error('Failed to create downloader [%s]', error);\n\n                return callback.call(that, that, 'failed');\n            } else if (response.status !== 'ok') {\n                that._logger.warn('Failed to create downloader, status [%s]', response.status);\n\n                switch (response.status) {\n                case 'capacity':\n                case 'stream-ended':\n                case 'origin-stream-ended':\n                case 'streaming-not-available':\n                case 'unauthorized':\n                    return callback.call(that, that, response.status);\n                default:\n                    return callback.call(that, that, 'failed');\n                }\n            } else {\n                var streamId = response.createStreamResponse.streamId;\n                var offerSdp = response.createStreamResponse.createOfferDescriptionResponse.sessionDescription.sdp;\n                var peerConnectionConfig = applyVendorSpecificLogic(parseProtobufMessage(response.createStreamResponse.rtcConfiguration));\n                var create = _.bind(createViewerPeerConnection, that, peerConnectionConfig);\n\n                if (offerSdp.match(/a=x-playlist:/)) {\n                    create = createLiveViewer;\n                }\n\n                streamAnalytix.setStreamId(streamId);\n                streamAnalytix.setStartOffset(response.createStreamResponse.offset);\n                streamAnalytix.recordMetric('Provisioned');\n\n                options.originStartTime = _.now() - response.createStreamResponse.offset + that._networkOneWayLatency;\n\n                return create.call(that, streamId, offerSdp, streamAnalytix, function (phenixMediaStream, error) {\n                    streamAnalytix.recordMetric('SetupCompleted', {string: error ? 'failed' : 'ok'});\n\n                    if (error) {\n                        callback.call(that, that, 'failed', null);\n                    } else {\n                        callback.call(that, that, 'ok', phenixMediaStream);\n                    }\n                }, options);\n            }\n        });\n    };\n\n    PCast.prototype.getProtocol = function () {\n        return this._protocol;\n    };\n\n    PCast.prototype.getLogger = function () {\n        return this._logger;\n    };\n\n    PCast.prototype.toString = function () {\n        return 'PCast[' + this.getProtocol().getSessionId() + ',' + (this._protocol ? this._protocol.toString() : 'uninitialized') + ']';\n    };\n\n    function checkForScreenSharingCapability(callback) {\n        var that = this;\n\n        if (phenixRTC.browser === 'Chrome' && that._screenSharingExtensionId) {\n            if (!chrome.runtime || !chrome.runtime.sendMessage) { // eslint-disable-line no-undef\n                that._logger.info('Screen sharing NOT available');\n\n                return callback(false);\n            }\n\n            try {\n                chrome.runtime.sendMessage(that._screenSharingExtensionId, {type: 'version'}, function (response) { // eslint-disable-line no-undef\n                    if (response && response.status === 'ok') {\n                        that._logger.info('Screen sharing enabled using version [%s]', response.version);\n                        callback(true);\n                    } else {\n                        that._logger.info('Screen sharing NOT available');\n                        callback(false);\n                    }\n                });\n            } catch (e) {\n                if (e.message) {\n                    that._logger.warn(e.message, e);\n                }\n\n                callback(false);\n            }\n        } else if (phenixRTC.browser === 'Firefox' && typeof window.PCastScreenSharing === 'object') {\n            callback(true);\n        } else {\n            callback(false);\n        }\n    }\n\n    function getChromeWebStoreLink() {\n        return 'https://chrome.google.com/webstore/detail/' + this._screenSharingExtensionId;\n    }\n\n    function addLinkHeaderElement() {\n        var chromeWebStoreUrl = getChromeWebStoreLink.call(this);\n\n        var links = document.getElementsByTagName('link');\n\n        for (var i = 0; i < links.length; i++) {\n            if (links[i].href === chromeWebStoreUrl) {\n                // Link already present\n                return;\n            }\n        }\n\n        this._logger.debug('Adding Chrome Web Store link [%s]', chromeWebStoreUrl);\n\n        var link = document.createElement('link');\n\n        link.rel = 'chrome-webstore-item';\n        link.href = chromeWebStoreUrl;\n\n        document.getElementsByTagName('head')[0].appendChild(link);\n    }\n\n    function tryInstallChromeScreenSharingExtension(callback) {\n        var that = this;\n        var chromeWebStoreUrl = getChromeWebStoreLink.call(this);\n\n        try {\n            chrome.webstore.install(chromeWebStoreUrl, function successCallback() { // eslint-disable-line no-undef\n                return callback('ok');\n            }, function failureCallback(reason) {\n                if (reason) {\n                    if (reason.match(/cancelled/ig)) {\n                        that._logger.info('User cancelled screen sharing');\n\n                        return callback('cancelled', new Error(reason));\n                    }\n\n                    that._logger.warn(reason);\n                }\n\n                return callback('failed', new Error(reason || 'failed'));\n            });\n        } catch (e) {\n            if (e.message) {\n                that._logger.warn(e.message);\n            }\n\n            callback('failed', e);\n        }\n    }\n\n    function tryInstallFirefoxScreenSharingExtension(callback) {\n        try {\n            var params = {\n                \"PCast Screen Sharing\": {\n                    URL: this._screenSharingAddOn.url,\n                    IconURL: this._screenSharingAddOn.iconUrl,\n                    Hash: this._screenSharingAddOn.hash,\n                    toString: function () {\n                        return this.URL;\n                    }\n                }\n            };\n            var attemptsLeft = firefoxMaxInstallationChecks;\n            var intervalId;\n            var success = function success() {\n                if (intervalId) {\n                    clearInterval(intervalId);\n                }\n\n                callback('ok');\n            };\n\n            var failure = function failure() {\n                if (intervalId) {\n                    clearInterval(intervalId);\n                }\n\n                callback('failed', new Error('failed'));\n            };\n\n            intervalId = setInterval(function () {\n                if (typeof window.PCastScreenSharing === 'object') {\n                    return success();\n                }\n\n                if (attemptsLeft-- < 0) {\n                    return failure();\n                }\n            }, firefoxInstallationCheckInterval);\n\n            InstallTrigger.install(params, function xpiInstallCallback(url, status) { // eslint-disable-line no-undef\n                // Callback only works for verified sites\n                if (status === 0) {\n                    success();\n                } else {\n                    failure();\n                }\n            });\n        } catch (e) {\n            if (e.message) {\n                this._logger.warn(e.message);\n            }\n\n            callback('failed', e);\n        }\n    }\n\n    function getScreenSharingConstraints(options, callback) {\n        var that = this;\n\n        switch (phenixRTC.browser) {\n        case 'Chrome':\n            try {\n                chrome.runtime.sendMessage(that._screenSharingExtensionId, {type: 'get-desktop-media'}, function (response) { // eslint-disable-line no-undef\n                    if (response.status !== 'ok') {\n                        return callback(response.status, undefined, new Error(response.status));\n                    }\n\n                    var constraints = {video: {}};\n\n                    if (typeof options === 'object' && typeof options.screen === 'object') {\n                        constraints.video = options.screen;\n                    }\n\n                    if (typeof constraints.video.mandatory !== 'object') {\n                        constraints.video.mandatory = {};\n                    }\n\n                    constraints.video.mandatory.chromeMediaSource = 'desktop';\n                    constraints.video.mandatory.chromeMediaSourceId = response.streamId;\n\n                    callback('ok', constraints, undefined);\n                });\n            } catch (e) {\n                if (e.message) {\n                    that._logger.warn(e.message);\n                }\n\n                callback('failed', undefined, e);\n            }\n\n            break;\n        case 'Firefox':\n            var constraints = {video: {}};\n\n            if (typeof options === 'object' && typeof options.screen === 'object') {\n                constraints.video = options.screen;\n            }\n\n            constraints.video.mediaSource = 'window';\n\n            callback('ok', constraints, undefined);\n\n            break;\n        default:\n            callback('not-supported', undefined, new Error('not-supported'));\n\n            break;\n        }\n    }\n\n    function getUserMediaConstraints(options, callback) {\n        var that = this;\n\n        if (options.screen) {\n            if (!that._screenSharingEnabled) {\n                var installCallback = function installCallback(status) {\n                    if (status === 'cancelled') {\n                        return callback(status, 'cancelled');\n                    }\n\n                    if (status !== 'ok') {\n                        return callback(status, undefined, new Error('screen-sharing-installation-failed'));\n                    }\n\n                    checkForScreenSharingCapability.call(that, function (screenSharingEnabled) {\n                        that._screenSharingEnabled = screenSharingEnabled;\n\n                        if (!that._screenSharingEnabled) {\n                            return callback(status, undefined, new Error('screen-sharing-installation-failed'));\n                        }\n\n                        getScreenSharingConstraints.call(that, options, callback);\n                    });\n                };\n\n                switch (phenixRTC.browser) {\n                case 'Chrome':\n                    tryInstallChromeScreenSharingExtension.call(that, installCallback);\n\n                    break;\n                case 'Firefox':\n                    tryInstallFirefoxScreenSharingExtension.call(that, installCallback);\n\n                    break;\n                default:\n                    callback('not-supported', undefined, new Error('not-supported'));\n\n                    break;\n                }\n            } else {\n                getScreenSharingConstraints.call(that, options, callback);\n            }\n        } else {\n            var constraints = {\n                audio: options.audio || false,\n                video: options.video || false\n            };\n\n            callback('ok', constraints, undefined);\n        }\n    }\n\n    function getUserMedia(options, callback) {\n        var that = this;\n\n        var onUserMediaSuccess = function onUserMediaSuccess(status, stream) {\n            if (that._gumStreams) {\n                that._gumStreams.push(stream);\n            }\n\n            callback(that, status, stream);\n        };\n\n        var onUserMediaFailure = function onUserMediaFailure(status, stream, error) {\n            callback(that, status, stream, error);\n        };\n\n        var hasScreen = options.screen;\n        var hasVideoOrAudio = options.video || options.audio;\n\n        if (!(hasScreen && hasVideoOrAudio)) {\n            return getUserMediaStream.call(that, options, onUserMediaSuccess, onUserMediaFailure);\n        }\n\n        return getUserMediaStream.call(that, {screen: options.screen}, function success(status, screenStream) {\n            return getUserMediaStream.call(that, {\n                audio: options.audio,\n                video: options.video\n            }, function screenSuccess(status, stream) {\n                addTracksToWebRTCStream(stream, screenStream.getTracks());\n\n                onUserMediaSuccess(status, stream);\n            }, function failure(status, stream, error) {\n                stopWebRTCStream(screenStream);\n\n                onUserMediaFailure(status, stream, error);\n            });\n        }, onUserMediaFailure);\n    }\n\n    function getUserMediaStream(options, successCallback, failureCallback) {\n        var onUserMediaCancelled = function onUserMediaCancelled() {\n            failureCallback('cancelled', null);\n        };\n\n        var onUserMediaFailure = function onUserMediaFailure(e) {\n            failureCallback(getUserMediaErrorStatus(e), undefined, e);\n        };\n\n        var onUserMediaSuccess = function onUserMediaSuccess(stream) {\n            successCallback('ok', stream);\n        };\n\n        return getUserMediaConstraints.call(this, options, function (status, constraints, error) {\n            if (status === 'cancelled') {\n                return onUserMediaCancelled();\n            }\n\n            if (status !== 'ok') {\n                return onUserMediaFailure(error);\n            }\n\n            try {\n                phenixRTC.getUserMedia(constraints, onUserMediaSuccess, onUserMediaFailure);\n            } catch (e) {\n                onUserMediaFailure(e);\n            }\n        });\n    }\n\n    var getUserMediaErrorStatus = function getUserMediaErrorStatus(e) {\n        var status;\n\n        if (e.code === 'unavailable') {\n            status = 'conflict';\n        } else if (e.message === 'permission-denied') {\n            status = 'permission-denied';\n        } else if (e.name === 'PermissionDeniedError') { // Chrome\n            status = 'permission-denied';\n        } else if (e.name === 'InternalError' && e.message === 'Starting video failed') { // FF (old getUserMedia API)\n            status = 'conflict';\n        } else if (e.name === 'SourceUnavailableError') { // FF\n            status = 'conflict';\n        } else if (e.name === 'SecurityError' && e.message === 'The operation is insecure.') { // FF\n            status = 'permission-denied';\n        } else {\n            status = 'failed';\n        }\n\n        return status;\n    };\n\n    function instantiateProtocol(uri) {\n        this._protocol = new PCastProtocol(uri, this._deviceId, this._version, this._logger);\n\n        this._protocol.on('connected', _.bind(connected, this));\n        this._protocol.on('reconnecting', _.bind(reconnecting, this));\n        this._protocol.on('reconnected', _.bind(reconnected, this));\n        this._protocol.on('disconnected', _.bind(disconnected, this));\n        this._protocol.on('streamEnded', _.bind(streamEnded, this));\n        this._protocol.on('dataQuality', _.bind(dataQuality, this));\n\n        if (this._logger.setObservableSessionId) {\n            this._logger.setObservableSessionId(this._protocol.getObservableSessionId());\n        }\n    }\n\n    function connected() {\n        var that = this;\n\n        this._connected = true;\n\n        if (!that._stopped) {\n            that._protocol.authenticate(that._authToken, function (error, response) {\n                if (that._authenticationCallback) {\n                    if (error) {\n                        that._logger.error('Failed to authenticate [%s]', error);\n                        transitionToStatus.call(that, 'offline');\n                        that._authenticationCallback.call(that, that, 'unauthorized', '');\n                        that.stop('unauthorized');\n                    } else if (response.status !== 'ok') {\n                        that._logger.warn('Failed to authenticate, status [%s]', response.status);\n                        transitionToStatus.call(that, 'offline');\n                        that._authenticationCallback.call(that, that, 'unauthorized', '');\n                        that.stop('unauthorized');\n                    } else {\n                        transitionToStatus.call(that, 'online');\n\n                        that._authenticationCallback.call(that, that, response.status, response.sessionId);\n                    }\n                }\n            });\n        }\n    }\n\n    function reconnecting() {\n        transitionToStatus.call(this, 'reconnecting');\n    }\n\n    function reconnected() {\n        transitionToStatus.call(this, 'reconnected');\n\n        this._logger.info('Attempting to re-authenticate after reconnect event');\n\n        var that = this;\n\n        if (!that._stopped) {\n            that._protocol.authenticate(that._authToken, function (error, response) {\n                var suppressCallback = that._connected === true;\n\n                if (error) {\n                    that._logger.error('Unable to authenticate after reconnect to WebSocket [%s]', error);\n\n                    return transitionToStatus.call(that, 'offline');\n                }\n\n                if (response.status !== 'ok') {\n                    that._logger.warn('Unable to authenticate after reconnect to WebSocket, status [%s]', response.status);\n\n                    return transitionToStatus.call(that, 'offline');\n                }\n\n                that._connected = true;\n\n                that._logger.info('Successfully authenticated after reconnect to WebSocket');\n\n                return transitionToStatus.call(that, 'online', suppressCallback);\n            });\n        }\n    }\n\n    function disconnected() {\n        this._connected = false;\n        transitionToStatus.call(this, 'offline');\n    }\n\n    function getStreamEndedReason(value) {\n        switch (value) {\n        case '':\n        case 'none':\n        case 'ended':\n            return 'ended';\n        case 'server-error':\n        case 'not-ready':\n        case 'error':\n        case 'died':\n            return 'failed';\n        case 'censored':\n            return 'censored';\n        case 'maintenance':\n            return 'maintenance';\n        case 'capacity':\n            return 'capacity';\n        case 'app-background':\n            return 'app-background';\n        default:\n            return 'custom';\n        }\n    }\n\n    function streamEnded(event) {\n        var streamId = event.streamId;\n        var reason = event.reason;\n\n        return endStream.call(this, streamId, reason);\n    }\n\n    function dataQuality(event) {\n        var streamId = event.streamId;\n        var status = event.status;\n        var reason = event.reason;\n\n        var internalMediaStream = this._mediaStreams[streamId];\n\n        if (internalMediaStream) {\n            internalMediaStream.dataQualityChangedCallback(status, reason);\n        }\n\n        var publisher = this._publishers[streamId];\n\n        if (publisher && typeof publisher.dataQualityChangedCallback === 'function') {\n            publisher.dataQualityChangedCallback(publisher, status, reason);\n        }\n    }\n\n    function endStream(streamId, reason) {\n        this._logger.info('[%s] Stream ended with reason [%s]', streamId, reason);\n\n        var internalMediaStream = this._mediaStreams[streamId];\n\n        if (internalMediaStream) {\n            internalMediaStream.streamEndedCallback(getStreamEndedReason(reason), reason, true);\n        }\n\n        delete this._mediaStreams[streamId];\n\n        var publisher = this._publishers[streamId];\n\n        if (publisher && typeof publisher.publisherEndedCallback === 'function') {\n            publisher.publisherEndedCallback(publisher, getStreamEndedReason(reason), reason);\n        }\n\n        delete this._publishers[streamId];\n\n        var peerConnection = this._peerConnections[streamId];\n\n        if (peerConnection) {\n            closePeerConnection.call(this, streamId, peerConnection, 'ended');\n        }\n\n        delete this._peerConnections[streamId];\n    }\n\n    function setupStreamAddedListener(streamId, state, peerConnection, streamAnalytix, callback, options) {\n        var that = this;\n        var onAddStream = function onAddStream(event) {\n            if (state.failed) {\n                return;\n            }\n\n            var masterStream = event.stream;\n\n            if (!masterStream) {\n                state.failed = true;\n                that._logger.warn('[%s] No remote stream', streamId);\n\n                return callback.call(that, undefined, 'failed');\n            }\n\n            that._logger.info('[%s] Got remote stream', streamId);\n\n            var createMediaStream = function createMediaStream(stream) {\n                var internalMediaStream = {\n                    children: [],\n                    renderer: null,\n                    isStopped: false,\n                    isStreamEnded: false,\n\n                    mediaStream: {\n                        createRenderer: function createRenderer() {\n                            var element = null;\n                            var dimensionsChangedMonitor = new DimensionsChangedMonitor(that._logger);\n\n                            return {\n                                start: function start(elementToAttachTo) {\n                                    element = phenixRTC.attachMediaStream(elementToAttachTo, stream);\n\n                                    streamAnalytix.recordTimeToFirstFrame(element);\n                                    streamAnalytix.recordRebuffering(element);\n                                    streamAnalytix.recordVideoResolutionChanges(element);\n\n                                    if (options.receiveAudio === false) {\n                                        element.muted = true;\n                                    }\n\n                                    internalMediaStream.renderer = this;\n\n                                    dimensionsChangedMonitor.start(this, element);\n\n                                    return element;\n                                },\n\n                                stop: function stop() {\n                                    dimensionsChangedMonitor.stop();\n\n                                    streamAnalytix.stop();\n\n                                    if (element) {\n                                        if (typeof element.pause === 'function') {\n                                            element.pause();\n                                        }\n\n                                        if (element.src) {\n                                            element.src = '';\n                                        }\n\n                                        if (element.srcObject) {\n                                            element.srcObject = null;\n                                        }\n\n                                        element = null;\n                                    }\n\n                                    internalMediaStream.renderer = null;\n                                },\n\n                                getStats: function getStats() {\n                                    if (!element) {\n                                        return {\n                                            width: 0,\n                                            height: 0,\n                                            currentTime: 0.0,\n                                            lag: 0.0,\n                                            networkState: NetworkStates.NETWORK_NO_SOURCE\n                                        };\n                                    }\n\n                                    var trueCurrentTime = (_.now() - options.originStartTime) / 1000;\n                                    var lag = that._networkOneWayLatency / 1000; // Check RTC stats instead\n\n                                    return {\n                                        width: element.videoWidth || element.width,\n                                        height: element.videoHeight || element.height,\n                                        currentTime: trueCurrentTime,\n                                        lag: lag,\n                                        networkState: element.networkState\n                                    };\n                                },\n\n                                setDataQualityChangedCallback: function setDataQualityChangedCallback(callback) {\n                                    if (typeof callback !== 'function') {\n                                        throw new Error('\"callback\" must be a function');\n                                    }\n\n                                    this.dataQualityChangedCallback = callback;\n                                },\n\n                                setVideoDisplayDimensionsChangedCallback: function setVideoDisplayDimensionsChangedCallback(callback, options) {\n                                    dimensionsChangedMonitor.setVideoDisplayDimensionsChangedCallback(callback, options);\n                                }\n                            };\n                        },\n\n                        setStreamEndedCallback: function setStreamEndedCallback(callback) {\n                            if (typeof callback !== 'function') {\n                                throw new Error('\"callback\" must be a function');\n                            }\n\n                            this.streamEndedCallback = callback;\n                        },\n\n                        setStreamErrorCallback: function setStreamErrorCallback(callback) {\n                            if (typeof callback !== 'function') {\n                                throw new Error('\"callback\" must be a function');\n                            }\n\n                            this.streamErrorCallback = callback;\n                        },\n\n                        stop: function stop(reason) {\n                            if (internalMediaStream.isStopped) {\n                                return;\n                            }\n\n                            stopWebRTCStream(stream);\n\n                            if (noTracksAreActiveInMaster()) {\n                                destroyMasterMediaStream(reason);\n                            }\n\n                            internalMediaStream.isStopped = true;\n                        },\n\n                        monitor: function monitor(options, callback) {\n                            if (typeof options !== 'object') {\n                                throw new Error('\"options\" must be an object');\n                            }\n\n                            if (typeof callback !== 'function') {\n                                throw new Error('\"callback\" must be a function');\n                            }\n\n                            var monitor = new PeerConnectionMonitor(streamId, peerConnection, that._logger);\n\n                            options.direction = 'inbound';\n\n                            monitor.start(options, function activeCallback() {\n                                return internalMediaStream.mediaStream.isActive();\n                            }, function monitorCallback(reason) {\n                                that._logger.warn('[%s] Media stream triggered monitor condition for [%s]', streamId, reason);\n\n                                return callback(internalMediaStream.mediaStream, 'client-side-failure', reason);\n                            });\n                        },\n\n                        getStats: function getStats(callback) {\n                            assert.isFunction(callback, 'callback');\n\n                            if (!this._lastStats) {\n                                this._lastStats = {};\n                            }\n\n                            var that = this;\n\n                            return phenixRTC.getStats(peerConnection, null, function (stats) {\n                                callback(convertPeerConnectionStats(stats, that._lastStats));\n                            });\n                        },\n\n                        getStream: function getStream() {\n                            return stream;\n                        },\n\n                        isActive: function isActive() {\n                            var isMasterStreamStopped = state.stopped;\n                            var isMasterStreamDestroyed = typeof that._mediaStreams[streamId] !== 'object';\n                            var isCurrentStreamStopped = internalMediaStream.isStopped;\n\n                            return !isMasterStreamStopped && !isMasterStreamDestroyed && !isCurrentStreamStopped;\n                        },\n\n                        getStreamId: function getStreamId() {\n                            return streamId;\n                        },\n\n                        select: function select(trackSelectCallback) {\n                            if (typeof trackSelectCallback !== 'function') {\n                                throw new Error('\"callback\" must be a function');\n                            }\n\n                            if (typeof window.MediaStream !== 'function') {\n                                throw new Error('MediaStream not supported in current browser');\n                            }\n\n                            var tracks = masterStream.getTracks();\n                            var streamToAttach = new window.MediaStream();\n\n                            for (var i = 0; i < tracks.length; i++) {\n                                if (trackSelectCallback(tracks[i], i)) {\n                                    streamToAttach.addTrack(tracks[i]);\n                                }\n                            }\n\n                            if (streamToAttach.getTracks().length === 0) {\n                                return that._logger.warn('No tracks selected');\n                            }\n\n                            var newMediaStream = createMediaStream(streamToAttach);\n                            internalMediaStream.children.push(newMediaStream);\n\n                            return newMediaStream.mediaStream;\n                        }\n                    },\n\n                    streamErrorCallback: function (status, reason) {\n                        // Recursively calls all children error callbacks\n                        for (var i = 0; i < internalMediaStream.children.length; i++) {\n                            internalMediaStream.children[i].streamErrorCallback(status, reason);\n                        }\n\n                        var mediaStream = internalMediaStream.mediaStream;\n\n                        if (typeof mediaStream.streamErrorCallback === 'function') {\n                            mediaStream.streamErrorCallback(mediaStream, status, reason);\n                        }\n                    },\n\n                    streamEndedCallback: function (status, reason) {\n                        // Recursively calls all children ended callbacks\n                        for (var i = 0; i < internalMediaStream.children.length; i++) {\n                            internalMediaStream.children[i].streamEndedCallback(status, reason);\n                        }\n\n                        if (internalMediaStream.isStreamEnded) {\n                            return;\n                        }\n\n                        var mediaStream = internalMediaStream.mediaStream;\n\n                        internalMediaStream.isStreamEnded = true;\n\n                        if (typeof mediaStream.streamEndedCallback === 'function') {\n                            mediaStream.streamEndedCallback(mediaStream, status, reason);\n                        }\n\n                        mediaStream.stop();\n\n                        if (internalMediaStream.renderer) {\n                            internalMediaStream.renderer.stop();\n                        }\n                    },\n\n                    dataQualityChangedCallback: function (status, reason) {\n                        for (var i = 0; i < internalMediaStream.children.length; i++) {\n                            internalMediaStream.children[i].dataQualityChangedCallback(status, reason);\n                        }\n\n                        var renderer = internalMediaStream.renderer;\n\n                        if (!renderer) {\n                            return;\n                        }\n\n                        if (typeof renderer.dataQualityChangedCallback === 'function') {\n                            renderer.dataQualityChangedCallback(renderer, status, reason);\n                        }\n                    }\n                };\n\n                return internalMediaStream;\n            };\n\n            function noTracksAreActiveInMaster() {\n                var tracks = masterStream.getTracks();\n\n                for (var i = 0; i < tracks.length; i++) {\n                    var track = tracks[i];\n\n                    if (!isTrackStopped(track)) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            function destroyMasterMediaStream(reason) {\n                if (state.stopped) {\n                    return;\n                }\n\n                that._logger.info('[%s] stop media stream', streamId);\n\n                closePeerConnection.call(that, streamId, peerConnection, 'stop');\n\n                that._protocol.destroyStream(streamId, reason || '', function (error, response) {\n                    if (error) {\n                        that._logger.error('[%s] failed to destroy stream [%s]', streamId, error);\n\n                        return;\n                    } else if (response.status !== 'ok') {\n                        that._logger.warn('[%s] failed to destroy stream, status [%s]', streamId, response.status);\n\n                        return;\n                    }\n\n                    that._logger.info('[%s] destroyed stream', streamId);\n                });\n\n                state.stopped = true;\n            }\n\n            var internalMediaStream = createMediaStream(masterStream);\n\n            that._mediaStreams[streamId] = internalMediaStream;\n\n            callback.call(that, internalMediaStream.mediaStream);\n        };\n\n        phenixRTC.addEventListener(peerConnection, 'addstream', onAddStream);\n    }\n\n    function setupIceCandidateListener(streamId, peerConnection, callback) {\n        var that = this;\n        var onIceCandidate = function onIceCandidate(event) {\n            var candidate = event.candidate;\n\n            if (candidate) {\n                that._logger.debug('[%s] ICE candidate: [%s] [%s] [%s]', streamId, candidate.sdpMid, candidate.sdpMLineIndex, candidate.candidate);\n            } else {\n                that._logger.info('[%s] ICE candidate discovery complete', streamId);\n            }\n\n            if (callback) {\n                callback(candidate);\n            }\n        };\n\n        phenixRTC.addEventListener(peerConnection, 'icecandidate', onIceCandidate);\n    }\n\n    function setupStateListener(streamId, peerConnection) {\n        var that = this;\n        var onNegotiationNeeded = function onNegotiationNeeded(event) { // eslint-disable-line no-unused-vars\n            that._logger.info('[%s] Negotiation needed');\n        };\n\n        var onIceConnectionStateChanged = function onIceConnectionStateChanged(event) { // eslint-disable-line no-unused-vars\n            that._logger.info('[%s] ICE connection state changed [%s]', streamId, peerConnection.iceConnectionState);\n        };\n\n        var onIceGatheringStateChanged = function onIceGatheringStateChanged(event) { // eslint-disable-line no-unused-vars\n            that._logger.info('[%s] ICE gathering state changed [%s]', streamId, peerConnection.iceGatheringState);\n        };\n\n        var onSignalingStateChanged = function onSignalingStateChanged(event) { // eslint-disable-line no-unused-vars\n            that._logger.info('[%s] Signaling state changed [%s]', streamId, peerConnection.signalingState);\n        };\n\n        var onConnectionStateChanged = function onConnectionStateChanged(event) { // eslint-disable-line no-unused-vars\n            that._logger.info('[%s] Connection state changed [%s]', streamId, peerConnection.connectionState);\n        };\n\n        phenixRTC.addEventListener(peerConnection, 'negotiationneeded', onNegotiationNeeded);\n        phenixRTC.addEventListener(peerConnection, 'iceconnectionstatechange', onIceConnectionStateChanged);\n        phenixRTC.addEventListener(peerConnection, 'icegatheringstatechange ', onIceGatheringStateChanged);\n        phenixRTC.addEventListener(peerConnection, 'signalingstatechange', onSignalingStateChanged);\n        phenixRTC.addEventListener(peerConnection, 'connectionstatechange', onConnectionStateChanged);\n    }\n\n    function createPublisher(streamId, callback, streamOptions) {\n        var that = this;\n        var state = {stopped: false};\n\n        var publisher = {\n            getStreamId: function getStreamId() {\n                return streamId;\n            },\n\n            getStream: function getStream() {\n                that._logger.debug('[%s] Unable to get stream on publisher of remote origin.', streamId);\n\n                return null;\n            },\n\n            getStats: function getStats() {\n                that._logger.debug('[%s] Unable to get stream stats on publisher of remote origin.', streamId);\n\n                return null;\n            },\n\n            isActive: function isActive() {\n                return !state.stopped;\n            },\n\n            hasEnded: function hasEnded() {\n                return state.stopped;\n            },\n\n            stop: function stop(reason) {\n                if (state.stopped) {\n                    return;\n                }\n\n                that._protocol.destroyStream(streamId, reason || '', function (error, response) {\n                    if (error) {\n                        that._logger.error('[%s] failed to destroy stream [%s]', streamId, error);\n\n                        return;\n                    } else if (response.status !== 'ok') {\n                        that._logger.warn('[%s] failed to destroy stream, status [%s]', streamId, response.status);\n\n                        return;\n                    }\n\n                    that._logger.info('[%s] destroyed stream', streamId);\n                });\n\n                state.stopped = true;\n            },\n\n            setPublisherEndedCallback: function setPublisherEndedCallback(callback) {\n                if (typeof callback !== 'function') {\n                    throw new Error('\"callback\" must be a function');\n                }\n\n                this.publisherEndedCallback = callback;\n            },\n\n            setDataQualityChangedCallback: function setDataQualityChangedCallback(callback) {\n                if (typeof callback !== 'function') {\n                    throw new Error('\"callback\" must be a function');\n                }\n\n                this.dataQualityChangedCallback = callback;\n            },\n\n            getOptions: function getOptions() {\n                return streamOptions;\n            },\n\n            monitor: function monitor(options, callback) {\n                if (typeof options !== 'object') {\n                    throw new Error('\"options\" must be an object');\n                }\n\n                if (typeof callback !== 'function') {\n                    throw new Error('\"callback\" must be a function');\n                }\n            }\n        };\n\n        that._publishers[streamId] = publisher;\n\n        callback(publisher);\n    }\n\n    function createPublisherPeerConnection(peerConnectionConfig, mediaStream, streamId, offerSdp, streamAnalytix, callback, createOptions, streamOptions) {\n        var that = this;\n        var state = {\n            failed: false,\n            stopped: false\n        };\n        var hasCrypto = offerSdp.match(/a=crypto:/i);\n        var hasDataChannel = offerSdp.match(/m=application /i);\n        var peerConnection = new phenixRTC.RTCPeerConnection(peerConnectionConfig, {\n            'optional': [\n                {DtlsSrtpKeyAgreement: !hasCrypto}, {RtpDataChannels: hasDataChannel}\n            ]\n        });\n        var remoteMediaStream = null;\n        var onIceCandidateCallback = null;\n\n        that._peerConnections[streamId] = peerConnection;\n\n        peerConnection.addStream(mediaStream);\n\n        var onFailure = function onFailure() {\n            if (state.failed) {\n                return;\n            }\n\n            state.failed = true;\n            state.stopped = true;\n\n            delete that._peerConnections[streamId];\n\n            closePeerConnection.call(that, streamId, peerConnection, 'failure');\n\n            callback.call(that, undefined, 'failed');\n        };\n\n        function onSetRemoteDescriptionSuccess() {\n            that._logger.info('Set remote description (offer)');\n\n            function onCreateAnswerSuccess(answerSdp) {\n                that._logger.info('Created answer [%s]', answerSdp.sdp);\n\n                that._protocol.setAnswerDescription(streamId, answerSdp.sdp, function (error, response) {\n                    if (error) {\n                        that._logger.error('Failed to set answer description [%s]', error);\n\n                        return onFailure();\n                    } else if (response.status !== 'ok') {\n                        that._logger.warn('Failed to set answer description, status [%s]', response.status);\n\n                        return onFailure();\n                    }\n\n                    function onSetLocalDescriptionSuccess() {\n                        var bandwidthAttribute = /(b=AS:([0-9]*)[\\n\\r]*)/gi;\n                        var video = /(mid:video)([\\n\\r]*)/gi;\n\n                        that._logger.info('Set local description (answer)');\n\n                        var limit = 0;\n                        var bandwithAttribute = bandwidthAttribute.exec(offerSdp);\n\n                        if (bandwithAttribute && bandwithAttribute.length >= 3) {\n                            limit = bandwithAttribute[2] * 1000;\n                        }\n\n                        var publisher = {\n                            getStreamId: function getStreamId() {\n                                return streamId;\n                            },\n\n                            getStream: function getStream() {\n                                return mediaStream;\n                            },\n\n                            isActive: function isActive() {\n                                return !state.stopped;\n                            },\n\n                            hasEnded: function hasEnded() {\n                                switch (peerConnection.iceConnectionState) {\n                                case 'new':\n                                case 'checking':\n                                case 'connected':\n                                case 'completed':\n                                    return false;\n                                case 'disconnected':\n                                case 'failed':\n                                case 'closed':\n                                    return true;\n                                default:\n                                    return true;\n                                }\n                            },\n\n                            stop: function stop(reason) {\n                                if (state.stopped) {\n                                    return;\n                                }\n\n                                closePeerConnection.call(that, streamId, peerConnection, 'closed');\n\n                                that._protocol.destroyStream(streamId, reason || '', function (error, response) {\n                                    if (error) {\n                                        that._logger.error('[%s] failed to destroy stream [%s]', streamId, error);\n\n                                        return;\n                                    } else if (response.status !== 'ok') {\n                                        that._logger.warn('[%s] failed to destroy stream, status [%s]', streamId, response.status);\n\n                                        return;\n                                    }\n\n                                    that._logger.info('[%s] destroyed stream', streamId);\n                                });\n\n                                state.stopped = true;\n                            },\n\n                            setPublisherEndedCallback: function setPublisherEndedCallback(callback) {\n                                if (typeof callback !== 'function') {\n                                    throw new Error('\"callback\" must be a function');\n                                }\n\n                                this.publisherEndedCallback = callback;\n                            },\n\n                            setDataQualityChangedCallback: function setDataQualityChangedCallback(callback) {\n                                if (typeof callback !== 'function') {\n                                    throw new Error('\"callback\" must be a function');\n                                }\n\n                                this.dataQualityChangedCallback = callback;\n                            },\n\n                            limitBandwidth: function limitBandwidth(bandwidthLimit) {\n                                if (typeof bandwidthLimit !== 'number') {\n                                    throw new Error('\"bandwidthLimit\" must be a number');\n                                }\n\n                                var newLimit = limit ? Math.min(bandwidthLimit, limit) : bandwidthLimit;\n                                var remoteDescription = peerConnection.remoteDescription;\n\n                                that._logger.info('Changing bandwidth limit to [%s]', newLimit);\n\n                                var updatedSdp = remoteDescription.sdp.replace(bandwidthAttribute, '');\n\n                                // Add new limit in kbps\n                                updatedSdp = updatedSdp.replace(video, function (match, videoLine, lineEnding, offset, sdp) { // eslint-disable-line no-unused-vars\n                                    return [videoLine, lineEnding, 'b=AS:', Math.ceil(newLimit / 1000), lineEnding].join('');\n                                });\n\n                                var updatedRemoteDescription = new phenixRTC.RTCSessionDescription({\n                                    type: remoteDescription.type,\n                                    sdp: updatedSdp\n                                });\n\n                                peerConnection.setRemoteDescription(updatedRemoteDescription);\n\n                                return {\n                                    dispose: function () {\n                                        peerConnection.setRemoteDescription(remoteDescription);\n                                    }\n                                };\n                            },\n\n                            monitor: function monitor(options, callback) {\n                                if (typeof options !== 'object') {\n                                    throw new Error('\"options\" must be an object');\n                                }\n\n                                if (typeof callback !== 'function') {\n                                    throw new Error('\"callback\" must be a function');\n                                }\n\n                                var monitor = new PeerConnectionMonitor(streamId, peerConnection, that._logger);\n\n                                options.direction = 'outbound';\n\n                                monitor.start(options, function activeCallback() {\n                                    return that._publishers[streamId] === publisher && !state.stopped;\n                                }, function monitorCallback(reason) {\n                                    that._logger.warn('[%s] Publisher triggered monitor condition for [%s]', streamId, reason);\n\n                                    return callback(publisher, 'client-side-failure', reason);\n                                });\n                            },\n\n                            setRemoteMediaStreamCallback: function setRemoteMediaStreamCallback(callback) {\n                                if (typeof callback !== 'function') {\n                                    throw new Error('\"callback\" must be a function');\n                                }\n\n                                this.remoteMediaStreamCallback = callback;\n\n                                if (remoteMediaStream) {\n                                    callback(publisher, remoteMediaStream);\n                                }\n                            },\n\n                            getOptions: function getOptions() {\n                                return streamOptions;\n                            },\n\n                            getStats: function getStats(callback) {\n                                assert.isFunction(callback, 'callback');\n\n                                if (!this._lastStats) {\n                                    this._lastStats = {};\n                                }\n\n                                var that = this;\n\n                                return phenixRTC.getStats(peerConnection, null, function (stats) {\n                                    callback(convertPeerConnectionStats(stats, that._lastStats));\n                                });\n                            }\n                        };\n\n                        that._publishers[streamId] = publisher;\n\n                        callback.call(that, publisher);\n                    }\n\n                    if (_.includes(response.options, 'ice-candidates')) {\n                        onIceCandidateCallback = function (candidate) {\n                            var candidates = [];\n                            var options = [];\n\n                            if (candidate) {\n                                candidates.push(candidate);\n                            } else {\n                                options.push('completed');\n                            }\n\n                            that._protocol.addIceCandidates(streamId, candidates, options, function (error, response) {\n                                if (error) {\n                                    that._logger.error('Failed to add ICE candidate [%s]', error);\n\n                                    return;\n                                } else if (response.status !== 'ok') {\n                                    that._logger.warn('Failed to add ICE candidate, status [%s]', response.status);\n\n                                    return;\n                                }\n\n                                if (_.includes(response.options, 'cancel')) {\n                                    onIceCandidateCallback = null;\n                                }\n                            });\n                        };\n                    }\n\n                    var sessionDescription = new phenixRTC.RTCSessionDescription({\n                        type: 'answer',\n                        sdp: response.sessionDescription.sdp\n                    });\n\n                    peerConnection.setLocalDescription(sessionDescription, onSetLocalDescriptionSuccess, onFailure);\n                });\n            }\n\n            var mediaConstraints = {mandatory: {}};\n\n            if (phenixRTC.browser === 'Chrome') {\n                mediaConstraints.mandatory.OfferToReceiveVideo = createOptions.receiveVideo === true;\n                mediaConstraints.mandatory.OfferToReceiveAudio = createOptions.receiveAudio === true;\n            } else {\n                mediaConstraints.mandatory.offerToReceiveVideo = createOptions.receiveVideo === true;\n                mediaConstraints.mandatory.offerToReceiveAudio = createOptions.receiveAudio === true;\n            }\n\n            peerConnection.createAnswer(onCreateAnswerSuccess, onFailure, mediaConstraints);\n        }\n\n        setupStreamAddedListener.call(that, streamId, state, peerConnection, streamAnalytix, function (mediaStream) {\n            var publisher = that._publishers[streamId];\n\n            remoteMediaStream = mediaStream;\n\n            if (publisher && publisher.remoteMediaStreamCallback) {\n                publisher.remoteMediaStreamCallback(publisher, mediaStream);\n            }\n        }, createOptions);\n        setupIceCandidateListener.call(that, streamId, peerConnection, function onIceCandidate(candidate) {\n            if (onIceCandidateCallback) {\n                onIceCandidateCallback(candidate);\n            }\n        });\n        setupStateListener.call(that, streamId, peerConnection);\n\n        var offerSessionDescription = new phenixRTC.RTCSessionDescription({\n            type: 'offer',\n            sdp: offerSdp\n        });\n\n        peerConnection.setRemoteDescription(offerSessionDescription, onSetRemoteDescriptionSuccess, onFailure);\n    }\n\n    function createViewerPeerConnection(peerConnectionConfig, streamId, offerSdp, streamAnalytix, callback, createOptions) {\n        var that = this;\n        var state = {\n            failed: false,\n            stopped: false\n        };\n        var hasCrypto = offerSdp.match(/a=crypto:/i);\n        var hasDataChannel = offerSdp.match(/m=application /i);\n        var peerConnection = new phenixRTC.RTCPeerConnection(peerConnectionConfig, {\n            'optional': [\n                {DtlsSrtpKeyAgreement: !hasCrypto}, {RtpDataChannels: hasDataChannel}\n            ]\n        });\n        var onIceCandidateCallback = null;\n\n        that._peerConnections[streamId] = peerConnection;\n\n        var onFailure = function onFailure() {\n            if (state.failed) {\n                return;\n            }\n\n            state.failed = true;\n            state.stopped = true;\n\n            delete that._peerConnections[streamId];\n\n            closePeerConnection.call(that, streamId, peerConnection, 'failure');\n\n            callback.call(that, undefined, 'failed');\n        };\n\n        function onSetRemoteDescriptionSuccess() {\n            that._logger.debug('Set remote description (offer)');\n\n            function onCreateAnswerSuccess(answerSdp) {\n                that._logger.info('Created answer [%s]', answerSdp.sdp);\n\n                that._protocol.setAnswerDescription(streamId, answerSdp.sdp, function (error, response) {\n                    if (error) {\n                        that._logger.error('Failed to set answer description [%s]', error);\n\n                        return onFailure();\n                    } else if (response.status !== 'ok') {\n                        that._logger.warn('Failed to set answer description, status [%s]', response.status);\n\n                        return onFailure();\n                    }\n\n                    function onSetLocalDescriptionSuccess() {\n                        that._logger.debug('Set local description (answer)');\n                    }\n\n                    if (_.includes(response.options, 'ice-candidates')) {\n                        onIceCandidateCallback = function (candidate) {\n                            var candidates = [];\n                            var iceCandidatesOptions = [];\n\n                            if (candidate) {\n                                candidates.push(candidate);\n                            } else {\n                                iceCandidatesOptions.push('completed');\n                            }\n\n                            that._protocol.addIceCandidates(streamId, candidate, iceCandidatesOptions, function (error, response) {\n                                if (error) {\n                                    that._logger.error('Failed to add ICE candidate [%s]', error);\n\n                                    return;\n                                } else if (response.status !== 'ok') {\n                                    that._logger.warn('Failed to add ICE candidate, status [%s]', response.status);\n\n                                    return;\n                                }\n\n                                if (_.includes(response.options, 'cancel')) {\n                                    onIceCandidateCallback = null;\n                                }\n                            });\n                        };\n                    }\n\n                    var sessionDescription = new phenixRTC.RTCSessionDescription({\n                        type: 'answer',\n                        sdp: response.sessionDescription.sdp\n                    });\n\n                    peerConnection.setLocalDescription(sessionDescription, onSetLocalDescriptionSuccess, onFailure);\n                });\n            }\n\n            var mediaConstraints = {mandatory: {}};\n\n            if (phenixRTC.browser === 'Chrome') {\n                mediaConstraints.mandatory.OfferToReceiveVideo = createOptions.receiveVideo !== false;\n                mediaConstraints.mandatory.OfferToReceiveAudio = createOptions.receiveAudio !== false;\n            } else {\n                mediaConstraints.mandatory.offerToReceiveVideo = createOptions.receiveVideo !== false;\n                mediaConstraints.mandatory.offerToReceiveAudio = createOptions.receiveAudio !== false;\n            }\n\n            peerConnection.createAnswer(onCreateAnswerSuccess, onFailure, mediaConstraints);\n        }\n\n        setupStreamAddedListener.call(that, streamId, state, peerConnection, streamAnalytix, callback, createOptions);\n        setupIceCandidateListener.call(that, streamId, peerConnection, function onIceCandidate(candidate) {\n            if (onIceCandidateCallback) {\n                onIceCandidateCallback(candidate);\n            }\n        });\n        setupStateListener.call(that, streamId, peerConnection);\n\n        var offerSessionDescription = new phenixRTC.RTCSessionDescription({\n            type: 'offer',\n            sdp: offerSdp\n        });\n\n        peerConnection.setRemoteDescription(offerSessionDescription, onSetRemoteDescriptionSuccess, onFailure);\n    }\n\n    function createLiveViewer(streamId, offerSdp, streamAnalytix, callback, options) {\n        var that = this;\n\n        var dashMatch = offerSdp.match(/a=x-playlist:([^\\n]*[.]mpd\\??[^\\s]*)/m);\n        var hlsMatch = offerSdp.match(/a=x-playlist:([^\\n]*[.]m3u8)/m);\n\n        if (dashMatch && dashMatch.length === 2 && that._shaka && that._shaka.Player.isBrowserSupported()) {\n            options.isDrmProtectedContent = /[?&]drmToken=([^&]*)/.test(dashMatch[1]) || /x-widevine-service-certificate/.test(offerSdp);\n\n            if (options.isDrmProtectedContent) {\n                options.widevineServiceCertificateUrl = offerSdp.match(/a=x-widevine-service-certificate:([^\\n][^\\s]*)/m)[1];\n            }\n\n            return createShakaLiveViewer.call(that, streamId, dashMatch[1], streamAnalytix, callback, options);\n        } else if (hlsMatch && hlsMatch.length === 2 && document.createElement('video').canPlayType('application/vnd.apple.mpegURL') === 'maybe') {\n            return createHlsLiveViewer.call(that, streamId, hlsMatch[1], streamAnalytix, callback, options);\n        }\n\n        that._logger.warn('[%s] Offer does not contain a supported manifest', streamId, offerSdp);\n\n        return callback.call(that, undefined, 'failed');\n    }\n\n    function createShakaLiveViewer(streamId, uri, streamAnalytix, callback, options) {\n        var that = this;\n\n        if (!that._shaka) {\n            that._logger.warn('[%s] Shaka player not available', streamId);\n\n            return callback.call(that, undefined, 'live-player-missing');\n        }\n\n        if (!that._shaka.Player.isBrowserSupported()) {\n            that._logger.warn('[%s] Shaka does not support this browser', streamId);\n\n            return callback.call(that, undefined, 'browser-unsupported');\n        }\n\n        var shaka = that._shaka;\n        var manifestUri = encodeURI(uri).replace(/[#]/g, '%23');\n\n        var onPlayerError = function onPlayerError(event) {\n            var mediaStream = internalMediaStream;\n\n            if (!mediaStream.streamErrorCallback) {\n                that._logger.error('[%s] DASH live stream error event [%s]', streamId, event.detail);\n            } else {\n                that._logger.debug('[%s] DASH live stream error event [%s]', streamId, event.detail);\n\n                mediaStream.streamErrorCallback(mediaStream, 'shaka', event.detail);\n            }\n        };\n\n        var internalMediaStream = {\n            renderer: null,\n            isStreamEnded: false,\n            isStopped: false,\n            waitingForLastChunk: false,\n\n            mediaStream: {\n                createRenderer: function createRenderer() {\n                    var player = null;\n                    var element = null;\n                    var dimensionsChangedMonitor = new DimensionsChangedMonitor(that._logger);\n                    var lastProgress = {\n                        time: 0,\n                        buffered: null,\n                        averageLength: 0,\n                        count: 0\n                    };\n\n                    function onProgress() {\n                        lastProgress.time = _.now();\n\n                        if (element.buffered.length === 0) {\n                            return that._logger.debug('[%s] Dash stream progress event fired without any buffered content', streamId);\n                        }\n\n                        var bufferedEnd = element.buffered.end(element.buffered.length - 1);\n\n                        if (lastProgress.buffered === bufferedEnd) {\n                            return;\n                        }\n\n                        // Start and end times are unreliable for overall length of stream.\n                        if (lastProgress.buffered !== null) {\n                            var oldTimeElapsed = lastProgress.averageLength * lastProgress.count;\n                            var newTimeElapsed = oldTimeElapsed + (bufferedEnd - lastProgress.buffered);\n\n                            lastProgress.count += 1;\n                            lastProgress.averageLength = newTimeElapsed / lastProgress.count;\n                        }\n\n                        lastProgress.buffered = bufferedEnd;\n                    }\n\n                    function stalled() {\n                        that._logger.info('[%s] Loading Dash stream stalled.', streamId);\n\n                        if (lastProgress.time === 0) {\n                            return;\n                        }\n\n                        setTimeout(function () {\n                            if (_.now() - lastProgress.time > getTimeoutOrMinimum() && internalMediaStream.waitingForLastChunk) {\n                                internalMediaStream.renderer.stop('ended');\n                            }\n                        }, getTimeoutOrMinimum());\n                    }\n\n                    function getTimeoutOrMinimum() {\n                        return lastProgress.averageLength * 1.5 < 2000 ? 2000 : lastProgress.averageLength * 1.5;\n                    }\n\n                    function ended() {\n                        that._logger.info('[%s] Dash stream ended.', streamId);\n                    }\n\n                    return {\n                        start: function start(elementToAttachTo) {\n                            player = new shaka.Player(elementToAttachTo);\n                            internalMediaStream.renderer = this;\n\n                            streamAnalytix.recordTimeToFirstFrame(elementToAttachTo);\n                            streamAnalytix.recordRebuffering(elementToAttachTo);\n                            streamAnalytix.recordVideoResolutionChanges(elementToAttachTo);\n\n                            var playerConfig = {\n                                abr: {defaultBandwidthEstimate: defaultBandwidthEstimateForPlayback},\n                                manifest: {retryParameters: {timeout: 10000}},\n                                streaming: {\n                                    rebufferingGoal: 2,\n                                    bufferingGoal: 10,\n                                    bufferBehind: 30,\n                                    retryParameters: {timeout: 10000}\n                                }\n                            };\n\n                            if (options.isDrmProtectedContent) {\n                                checkBrowserSupportForWidevineDRM.call(that);\n                                unwrapLicenseResponse.call(that, player);\n                                addDrmSpecificsToPlayerConfig.call(that, playerConfig, options, function (err, updatedPlayerConfig) {\n                                    if (!err) {\n                                        loadPlayer(updatedPlayerConfig);\n                                    } else {\n                                        that._logger.error('Failed to add DRM configuration to shaka player', err);\n\n                                        throw err;\n                                    }\n                                });\n                            } else {\n                                loadPlayer(playerConfig);\n                            }\n\n                            function loadPlayer(config) {\n                                player.configure(config);\n\n                                if (options.receiveAudio === false) {\n                                    elementToAttachTo.muted = true;\n                                }\n\n                                player.addEventListener('error', onPlayerError);\n\n                                elementToAttachTo.addEventListener('stalled', stalled, false);\n                                elementToAttachTo.addEventListener('progress', onProgress, false);\n                                elementToAttachTo.addEventListener('ended', ended, false);\n\n                                player.load(manifestUri).then(function () {\n                                    that._logger.info('[%s] DASH live stream has been loaded', streamId);\n\n                                    if (_.isFunction(elementToAttachTo.play)) {\n                                        elementToAttachTo.play();\n                                    }\n                                }).catch(function (e) {\n                                    that._logger.error('[%s] Error while loading DASH live stream [%s]', streamId, e.code, e);\n\n                                    internalMediaStream.streamErrorCallback('shaka', e);\n                                });\n\n                                dimensionsChangedMonitor.start(this, elementToAttachTo);\n                                element = elementToAttachTo;\n                            }\n\n                            return elementToAttachTo;\n                        },\n\n                        stop: function stop() {\n                            dimensionsChangedMonitor.stop();\n\n                            streamAnalytix.stop();\n\n                            if (player) {\n                                var finalizeStreamEnded = function finalizeStreamEnded() {\n                                    var reason = '';\n\n                                    if (element) {\n                                        element.removeEventListener('stalled', stalled, false);\n                                        element.removeEventListener('progress', onProgress, false);\n                                        element.removeEventListener('ended', ended, false);\n                                    }\n\n                                    internalMediaStream.streamEndedCallback(getStreamEndedReason(reason), reason);\n\n                                    player = null;\n                                    element = null;\n                                };\n\n                                var destroy = player.destroy() // eslint-disable-line no-unused-vars\n                                    .then(function () {\n                                        that._logger.info('[%s] DASH live stream has been destroyed', streamId);\n                                    }).then(function () {\n                                        finalizeStreamEnded();\n                                    }).catch(function (e) {\n                                        that._logger.error('[%s] Error while destroying DASH live stream [%s]', streamId, e.code, e);\n\n                                        finalizeStreamEnded();\n\n                                        internalMediaStream.streamErrorCallback('shaka', e);\n                                    });\n                            }\n\n                            internalMediaStream.renderer = null;\n                        },\n\n                        getStats: function getStats() {\n                            if (!player) {\n                                return {\n                                    width: 0,\n                                    height: 0,\n                                    currentTime: 0.0,\n                                    lag: 0.0,\n                                    networkState: NetworkStates.NETWORK_NO_SOURCE\n                                };\n                            }\n\n                            var stat = player.getStats();\n                            var currentTime = element.currentTime;\n                            var trueCurrentTime = (_.now() - options.originStartTime) / 1000;\n                            var lag = Math.max(0.0, trueCurrentTime - currentTime);\n\n                            stat.currentTime = currentTime;\n                            stat.lag = lag;\n\n                            if (stat.estimatedBandwidth > 0) {\n                                stat.networkState = NetworkStates.NETWORK_LOADING;\n                            } else if (stat.playTime > 0) {\n                                stat.networkState = NetworkStates.NETWORK_IDLE;\n                            } else if (stat.video) {\n                                stat.networkState = NetworkStates.NETWORK_EMPTY;\n                            } else {\n                                stat.networkState = NetworkStates.NETWORK_NO_SOURCE;\n                            }\n\n                            return stat;\n                        },\n\n                        setDataQualityChangedCallback: function setDataQualityChangedCallback(callback) {\n                            if (typeof callback !== 'function') {\n                                throw new Error('\"callback\" must be a function');\n                            }\n\n                            this.dataQualityChangedCallback = callback;\n                        },\n\n                        getPlayer: function getPlayer() {\n                            return player;\n                        },\n\n                        setVideoDisplayDimensionsChangedCallback: function setVideoDisplayDimensionsChangedCallback(callback, options) {\n                            dimensionsChangedMonitor.setVideoDisplayDimensionsChangedCallback(callback, options);\n                        }\n                    };\n                },\n\n                select: function select(trackSelectCallback) { // eslint-disable-line no-unused-vars\n                    that._logger.warn('[%s] selection of tracks not supported for shaka live streams', streamId);\n\n                    return this;\n                },\n\n                setStreamEndedCallback: function setStreamEndedCallback(callback) {\n                    if (typeof callback !== 'function') {\n                        throw new Error('\"callback\" must be a function');\n                    }\n\n                    this.streamEndedCallback = callback;\n                },\n\n                setStreamErrorCallback: function setStreamErrorCallback(callback) {\n                    if (typeof callback !== 'function') {\n                        throw new Error('\"callback\" must be a function');\n                    }\n\n                    this.streamErrorCallback = callback;\n                },\n\n                stop: function stop(reason) {\n                    if (internalMediaStream.isStopped) {\n                        return;\n                    }\n\n                    that._logger.info('[%s] stop media stream', streamId);\n\n                    that._protocol.destroyStream(streamId, reason || '', function (error, response) {\n                        if (error) {\n                            that._logger.error('[%s] failed to destroy stream, [%s]', streamId, error);\n\n                            return;\n                        } else if (response.status !== 'ok') {\n                            that._logger.warn('[%s] failed to destroy stream, status [%s]', streamId, response.status);\n\n                            return;\n                        }\n\n                        that._logger.info('[%s] destroyed stream', streamId);\n                    });\n\n                    internalMediaStream.isStopped = true;\n                },\n\n                monitor: function monitor(options, callback) {\n                    if (typeof options !== 'object') {\n                        throw new Error('\"options\" must be an object');\n                    }\n\n                    if (typeof callback !== 'function') {\n                        throw new Error('\"callback\" must be a function');\n                    }\n                },\n\n                getStream: function getStream() {\n                    that._logger.debug('[%s] stream not available for shaka live streams', streamId);\n\n                    return null;\n                },\n\n                isActive: function isActive() {\n                    return !internalMediaStream.isStopped;\n                },\n\n                getStreamId: function getStreamId() {\n                    return streamId;\n                },\n\n                getStats: function getStats() {\n                    that._logger.debug('[%s] stats not available for shaka live streams', streamId);\n\n                    return null;\n                }\n            },\n\n            streamErrorCallback: function (status, reason) {\n                var mediaStream = internalMediaStream.mediaStream;\n\n                if (typeof mediaStream.streamErrorCallback === 'function') {\n                    mediaStream.streamErrorCallback(mediaStream, status, reason);\n                }\n            },\n\n            streamEndedCallback: function (status, reason, waitForLastChunk) {\n                if (waitForLastChunk && !internalMediaStream.waitingForLastChunk && !internalMediaStream.isStopped) {\n                    internalMediaStream.waitingForLastChunk = true;\n\n                    return that._logger.info('[%s] Shaka stream ended. Waiting for end of content.');\n                }\n\n                if (internalMediaStream.isStreamEnded) {\n                    return;\n                }\n\n                var mediaStream = internalMediaStream.mediaStream;\n\n                internalMediaStream.isStreamEnded = true;\n\n                if (typeof mediaStream.streamEndedCallback === 'function') {\n                    mediaStream.streamEndedCallback(mediaStream, status, reason);\n                }\n\n                mediaStream.stop();\n\n                if (internalMediaStream.renderer) {\n                    internalMediaStream.renderer.stop();\n                }\n            },\n\n            dataQualityChangedCallback: function (status, reason) {\n                var renderer = internalMediaStream.renderer;\n\n                if (!renderer) {\n                    return;\n                }\n\n                if (typeof renderer.dataQualityChangedCallback === 'function') {\n                    renderer.dataQualityChangedCallback(renderer, status, reason);\n                }\n            }\n        };\n\n        that._mediaStreams[streamId] = internalMediaStream;\n\n        callback.call(that, internalMediaStream.mediaStream);\n    }\n\n    function checkBrowserSupportForWidevineDRM() {\n        var error;\n\n        if (!_.isFunction(Uint8Array)) {\n            error = 'Uint8Array support required for DRM';\n            this._logger.error(error);\n\n            throw new Error(error);\n        }\n\n        if (!_.isFunction(window.atob)) {\n            error = 'window.atob support required for DRM';\n            this._logger.error(error);\n\n            throw new Error(error);\n        }\n    }\n\n    function unwrapLicenseResponse(player) {\n        var that = this;\n\n        player.getNetworkingEngine().registerResponseFilter(function (type, response) {\n            // Only manipulate license responses:\n            if (type.toString() === that._shaka.net.NetworkingEngine.RequestType.LICENSE.toString()) {\n                var binaryResponseAsTypedArray = new Uint8Array(response.data);\n                var responseAsString = String.fromCharCode.apply(null, binaryResponseAsTypedArray);\n                var parsedResponse = JSON.parse(responseAsString);\n                var base64License = parsedResponse.license;\n                var decodedLicense = window.atob(base64License);\n\n                response.data = new Uint8Array(decodedLicense.length);\n\n                for (var i = 0; i < decodedLicense.length; ++i) {\n                    response.data[i] = decodedLicense.charCodeAt(i);\n                }\n\n                if (!isHDPlaybackAllowedByWidevine(parsedResponse.allowedTracks)) {\n                    disableHdPlayback(player);\n                }\n            }\n        });\n    }\n\n    function isHDPlaybackAllowedByWidevine(allowedTracks) {\n        var minQualityLevelForHD = '720';\n\n        return _.includes(allowedTracks, minQualityLevelForHD);\n    }\n\n    function disableHdPlayback(player) {\n        player.configure({restrictions: {maxVideoBandwidth: maxBandwidthForSdPlayback}});\n    }\n\n    function addDrmSpecificsToPlayerConfig(playerConfig, options, callback) {\n        if (!playerConfig.drm) {\n            playerConfig.drm = {};\n        }\n\n        if (!playerConfig.drm.advanced) {\n            playerConfig.drm.advanced = {};\n        }\n\n        if (!playerConfig.manifest) {\n            playerConfig.manifest = {};\n        }\n\n        if (!playerConfig.manifest.dash) {\n            playerConfig.manifest.dash = {};\n        }\n\n        // Add browser specific DRM calls here\n        // Currently we support Widevine only\n        addWidevineConfigToPlayerConfig.call(this, playerConfig, options, callback);\n    }\n\n    function addWidevineConfigToPlayerConfig(playerConfig, options, callback) {\n        playerConfig['manifest']['dash']['customScheme'] = function (element) {\n            if (element.getAttribute('schemeIdUri') === 'com.phenixp2p.widevine') {\n                return [{\n                    keySystem: 'com.widevine.alpha',\n                    licenseServerUri: decodeURIComponent(element.getAttribute('widevineLicenseServerUrl'))\n                }];\n            }\n        };\n\n        function addToPlayerconfig(error, serverCertificate) {\n            if (error) {\n                callback(error);\n\n                return;\n            }\n\n            widevineServiceCertificate = serverCertificate; // Cache so that we can reuse\n\n            playerConfig.drm.advanced['com.widevine.alpha'] = {serverCertificate: convertBinaryStringToUint8Array(serverCertificate)};\n\n            callback(null, playerConfig);\n        }\n\n        if (widevineServiceCertificate) {\n            addToPlayerconfig(null, widevineServiceCertificate);\n        } else {\n            http.get(options.widevineServiceCertificateUrl, {mimeType: 'text/plain; charset=x-user-defined'}, addToPlayerconfig);\n        }\n    }\n\n    function convertBinaryStringToUint8Array(bStr) {\n        var len = bStr.length;\n        var u8Array = new Uint8Array(len); // eslint-disable-line no-undef\n\n        for (var i = 0; i < len; i++) {\n            u8Array[i] = bStr.charCodeAt(i);\n        }\n\n        return u8Array;\n    }\n\n    function createHlsLiveViewer(streamId, uri, streamAnalytix, callback, options) {\n        var that = this;\n\n        var manifestUri = encodeURI(uri).replace(/[#]/g, '%23');\n\n        var onPlayerError = function onPlayerError(event, e) { // eslint-disable-line no-unused-vars\n            var mediaStream = internalMediaStream.mediaStream;\n\n            if (!mediaStream.streamErrorCallback) {\n                that._logger.error('[%s] HLS live stream error event [%s]', streamId, event.detail);\n            } else {\n                that._logger.debug('[%s] HLS live stream error event [%s]', streamId, event.detail);\n                mediaStream.streamErrorCallback(mediaStream, 'hls', event.detail);\n            }\n        };\n\n        var internalMediaStream = {\n            renderer: null,\n            isStreamEnded: false,\n            isStopped: false,\n            waitingForLastChunk: false,\n\n            mediaStream: {\n                createRenderer: function createRenderer() {\n                    var element = null;\n                    var bufferSizeHistory = [];\n                    var dimensionsChangedMonitor = new DimensionsChangedMonitor(that._logger);\n                    var lastProgress = {\n                        time: 0,\n                        buffered: null,\n                        averageLength: 0,\n                        count: 0\n                    };\n\n                    function onProgress() {\n                        lastProgress.time = _.now();\n\n                        if (element.buffered.length === 0) {\n                            return that._logger.debug('[%s] Hls stream progress event fired without any buffered content', streamId);\n                        }\n\n                        var bufferedEnd = element.buffered.end(element.buffered.length - 1);\n\n                        if (lastProgress.buffered === bufferedEnd) {\n                            return;\n                        }\n\n                        // Start and end times are unreliable for overall length of stream.\n                        if (lastProgress.buffered !== null) {\n                            var oldTimeElapsed = lastProgress.averageLength * lastProgress.count;\n                            var newTimeElapsed = oldTimeElapsed + (bufferedEnd - lastProgress.buffered);\n\n                            lastProgress.count += 1;\n                            lastProgress.averageLength = newTimeElapsed / lastProgress.count;\n                        }\n\n                        lastProgress.buffered = bufferedEnd;\n                    }\n\n                    function stalled() {\n                        that._logger.info('[%s] Loading Hls stream stalled.', streamId);\n\n                        if (lastProgress.count === 0) {\n                            reload();\n                        } else {\n                            setTimeout(function () {\n                                if (lastProgress.count === 0) {\n                                    reload();\n                                }\n                            }, getTimeoutOrMinimum());\n\n                            var streamEndedBeforeSetupTimeout = 5000;\n\n                            setTimeout(endIfReady, streamEndedBeforeSetupTimeout);\n                        }\n                    }\n\n                    function ended() {\n                        that._logger.info('[%s] Hls stream ended', streamId);\n\n                        if (internalMediaStream.renderer) {\n                            internalMediaStream.renderer.stop('ended');\n                        }\n                    }\n\n                    function waiting() {\n                        that._logger.info('Time elapsed since last progress [%s]', _.now() - lastProgress.time);\n\n                        setTimeout(endIfReady, getTimeoutOrMinimum());\n                    }\n\n                    function reload() {\n                        that._logger.info('[%s] Attempting to reload Hls stream.', streamId);\n\n                        element.pause();\n                        element.src = '';\n\n                        element.src = manifestUri;\n                        element.play();\n                    }\n\n                    function getTimeoutOrMinimum() {\n                        return lastProgress.averageLength * 1.5 < 2000 ? 2000 : lastProgress.averageLength * 1.5;\n                    }\n\n                    function endIfReady() {\n                        if (_.now() - lastProgress.time > getTimeoutOrMinimum() && internalMediaStream.waitingForLastChunk && internalMediaStream.renderer) {\n                            internalMediaStream.renderer.stop('ended');\n                        }\n                    }\n\n                    return {\n                        start: function start(elementToAttachTo) {\n                            try {\n                                elementToAttachTo.src = manifestUri;\n\n                                if (options.receiveAudio === false) {\n                                    elementToAttachTo.muted = true;\n                                }\n\n                                streamAnalytix.recordTimeToFirstFrame(elementToAttachTo);\n                                streamAnalytix.recordRebuffering(elementToAttachTo);\n                                streamAnalytix.recordVideoResolutionChanges(elementToAttachTo);\n\n                                internalMediaStream.renderer = this;\n\n                                elementToAttachTo.addEventListener('error', onPlayerError, true);\n                                elementToAttachTo.addEventListener('stalled', stalled, false);\n                                elementToAttachTo.addEventListener('progress', onProgress, false);\n                                elementToAttachTo.addEventListener('ended', ended, false);\n                                elementToAttachTo.addEventListener('waiting', waiting, false);\n\n                                elementToAttachTo.play();\n\n                                element = elementToAttachTo;\n\n                                dimensionsChangedMonitor.start(this, element);\n\n                                return elementToAttachTo;\n                            } catch (e) {\n                                that._logger.error('[%s] Error while loading HLS live stream [%s]', streamId, e.code, e);\n\n                                internalMediaStream.streamErrorCallback('hls', e);\n                            }\n                        },\n\n                        stop: function stop() {\n                            dimensionsChangedMonitor.stop();\n\n                            streamAnalytix.stop();\n\n                            if (element) {\n                                var finalizeStreamEnded = function finalizeStreamEnded() {\n                                    if (element) {\n                                        element.removeEventListener('error', onPlayerError, true);\n                                        element.removeEventListener('stalled', stalled, false);\n                                        element.removeEventListener('progress', onProgress, false);\n                                        element.removeEventListener('ended', ended, false);\n                                        element.removeEventListener('waiting', waiting, false);\n\n                                        element.src = '';\n\n                                        element = null;\n                                    }\n\n                                    var reason = '';\n\n                                    internalMediaStream.streamEndedCallback(getStreamEndedReason(reason), reason);\n                                };\n\n                                try {\n                                    element.pause();\n\n                                    that._logger.info('[%s] HLS live stream has been destroyed', streamId);\n\n                                    finalizeStreamEnded();\n                                } catch (e) {\n                                    that._logger.error('[%s] Error while destroying HLS live stream [%s]', streamId, e.code, e);\n\n                                    finalizeStreamEnded();\n\n                                    internalMediaStream.streamErrorCallback('hls', e);\n                                }\n                            }\n\n                            internalMediaStream.renderer = null;\n                        },\n\n                        getStats: function getStats() {\n                            if (!element) {\n                                return {\n                                    width: 0,\n                                    height: 0,\n                                    currentTime: 0.0,\n                                    lag: 0.0,\n                                    networkState: NetworkStates.NETWORK_NO_SOURCE\n                                };\n                            }\n\n                            var currentTime = element ? element.currentTime || 0.0 : 0.0;\n                            var buffered = (element && element.buffered && element.buffered.length > 0) ? element.buffered.end(element.buffered.length - 1) : 0;\n                            var currentBufferSize = Math.max(0, buffered - currentTime);\n\n                            bufferSizeHistory.push(currentBufferSize);\n\n                            if (bufferSizeHistory.length > 15) {\n                                bufferSizeHistory.shift();\n                            }\n\n                            var estimatedBufferSize = 0.0;\n\n                            for (var i = 0, len = bufferSizeHistory.length; i < len; i++) {\n                                estimatedBufferSize = Math.max(estimatedBufferSize, bufferSizeHistory[i]);\n                            }\n\n                            var chunkDuration = 2.0; // TODO (sbi) Parse chunk duration from manifest\n                            var trueCurrentTime = (_.now() - options.originStartTime) / 1000;\n                            var lag = 2.0 * chunkDuration + estimatedBufferSize;\n                            var estimatedCurrentTime = trueCurrentTime - lag;\n\n                            return {\n                                width: element.videoWidth || element.width,\n                                height: element.videoHeight || element.height,\n                                currentTime: estimatedCurrentTime,\n                                originTime: trueCurrentTime,\n                                lag: lag,\n                                networkState: element.networkState\n                            };\n                        },\n\n                        setDataQualityChangedCallback: function setDataQualityChangedCallback(callback) {\n                            if (typeof callback !== 'function') {\n                                throw new Error('\"callback\" must be a function');\n                            }\n\n                            this.dataQualityChangedCallback = callback;\n                        },\n\n                        setVideoDisplayDimensionsChangedCallback: function setVideoDisplayDimensionsChangedCallback(callback, options) {\n                            dimensionsChangedMonitor.setVideoDisplayDimensionsChangedCallback(callback, options);\n                        }\n                    };\n                },\n\n                select: function select(trackSelectCallback) { // eslint-disable-line no-unused-vars\n                    that._logger.warn('[%s] selection of tracks not supported for HLS live streams', streamId);\n\n                    return this;\n                },\n\n                setStreamEndedCallback: function setStreamEndedCallback(callback) {\n                    if (typeof callback !== 'function') {\n                        throw new Error('\"callback\" must be a function');\n                    }\n\n                    this.streamEndedCallback = callback;\n                },\n\n                setStreamErrorCallback: function setStreamErrorCallback(callback) {\n                    if (typeof callback !== 'function') {\n                        throw new Error('\"callback\" must be a function');\n                    }\n\n                    this.streamErrorCallback = callback;\n                },\n\n                stop: function stop(reason) {\n                    if (internalMediaStream.isStopped) {\n                        return;\n                    }\n\n                    that._logger.info('[%s] stop media stream', streamId);\n\n                    that._protocol.destroyStream(streamId, reason || '', function (error, response) {\n                        if (error) {\n                            that._logger.error('[%s] failed to destroy stream [%s]', streamId, error);\n\n                            return;\n                        } else if (response.status !== 'ok') {\n                            that._logger.warn('[%s] failed to destroy stream, status [%s]', streamId, response.status);\n\n                            return;\n                        }\n\n                        that._logger.info('[%s] destroyed stream', streamId);\n                    });\n\n                    internalMediaStream.isStopped = true;\n                },\n\n                monitor: function monitor(options, callback) {\n                    if (typeof options !== 'object') {\n                        throw new Error('\"options\" must be an object');\n                    }\n\n                    if (typeof callback !== 'function') {\n                        throw new Error('\"callback\" must be a function');\n                    }\n                },\n\n                isActive: function isActive() {\n                    return !internalMediaStream.isStopped;\n                },\n\n                getStreamId: function getStreamId() {\n                    return streamId;\n                },\n\n                getStream: function getStream() {\n                    that._logger.debug('[%s] stream not available for HLS live streams', streamId);\n\n                    return null;\n                },\n\n                getStats: function getStats() {\n                    that._logger.debug('[%s] stats not available for HLS live streams', streamId);\n\n                    return null;\n                }\n            },\n\n            streamErrorCallback: function (status, reason) {\n                var mediaStream = internalMediaStream.mediaStream;\n\n                if (typeof mediaStream.streamErrorCallback === 'function') {\n                    mediaStream.streamErrorCallback(mediaStream, status, reason);\n                }\n            },\n\n            streamEndedCallback: function (status, reason, waitForLastChunk) {\n                if (waitForLastChunk && !internalMediaStream.waitingForLastChunk && !internalMediaStream.isStopped) {\n                    internalMediaStream.waitingForLastChunk = true;\n\n                    return that._logger.info('[%s] Hls stream ended. Waiting for end of content.');\n                }\n\n                if (internalMediaStream.isStreamEnded) {\n                    return;\n                }\n\n                var mediaStream = internalMediaStream.mediaStream;\n\n                internalMediaStream.isStreamEnded = true;\n\n                if (typeof mediaStream.streamEndedCallback === 'function') {\n                    mediaStream.streamEndedCallback(mediaStream, status, reason);\n                }\n\n                mediaStream.stop();\n\n                if (internalMediaStream.renderer) {\n                    internalMediaStream.renderer.stop();\n                }\n            },\n\n            dataQualityChangedCallback: function (status, reason) {\n                var renderer = internalMediaStream.renderer;\n\n                if (!renderer) {\n                    return;\n                }\n\n                if (typeof renderer.dataQualityChangedCallback === 'function') {\n                    renderer.dataQualityChangedCallback(renderer, status, reason);\n                }\n            }\n        };\n\n        that._mediaStreams[streamId] = internalMediaStream;\n\n        callback.call(that, internalMediaStream.mediaStream);\n    }\n\n    function transitionToStatus(newStatus, suppressCallback) {\n        var oldStatus = this.getStatus();\n\n        if (oldStatus !== newStatus) {\n            this._observableStatus.setValue(newStatus);\n\n            if (suppressCallback) {\n                return;\n            }\n\n            switch (newStatus) {\n            case 'connecting':\n            case 'reconnecting':\n            case 'reconnected':\n                break;\n            case 'offline':\n                this._offlineCallback.call(this);\n\n                break;\n            case 'online':\n                this._onlineCallback.call(this);\n\n                break;\n            default:\n                break;\n            }\n        }\n    }\n\n    function addTracksToWebRTCStream(stream, tracks) {\n        if (typeof stream !== 'object') {\n            return;\n        }\n\n        if (typeof tracks !== 'object') {\n            return;\n        }\n\n        if (tracks.constructor !== Array) {\n            return;\n        }\n\n        for (var i = 0; i < tracks.length; i++) {\n            stream.addTrack(tracks[i]);\n        }\n    }\n\n    function stopWebRTCStream(stream) {\n        if (stream && typeof stream.getTracks === 'function') {\n            var tracks = stream.getTracks();\n\n            for (var i = 0; i < tracks.length; i++) {\n                var track = tracks[i];\n\n                track.stop();\n            }\n        }\n    }\n\n    function isTrackStopped(track) {\n        if (typeof track !== 'object') {\n            throw new Error('Invalid track.');\n        }\n\n        return track.readyState === 'ended';\n    }\n\n    function closePeerConnection(streamId, peerConnection, reason) {\n        if (peerConnection.signalingState !== 'closed' && !peerConnection.__closing) {\n            this._logger.debug('[%s] close peer connection [%s]', streamId, reason);\n            peerConnection.close();\n            peerConnection.__closing = true;\n        }\n    }\n\n    function convertPeerConnectionStats(stats, lastStats) {\n        if (!stats) {\n            return null;\n        }\n\n        var newStats = [];\n\n        var convertStats = function convertStats(ssrc, mediaType, timestamp, bytesSent, bytesReceived) {\n            if (ssrc) {\n                if (!_.hasIndexOrKey(lastStats, ssrc)) {\n                    lastStats[ssrc] = {timestamp: 0};\n                }\n\n                var timeDelta = parseFloat(timestamp) - lastStats[ssrc].timestamp;\n                var up = calculateUploadRate(parseFloat(bytesSent), lastStats[ssrc].bytesSent, timeDelta);\n                var down = calculateDownloadRate(parseFloat(bytesReceived), lastStats[ssrc].bytesReceived, timeDelta);\n\n                lastStats[ssrc].bytesSent = parseFloat(bytesSent);\n                lastStats[ssrc].bytesReceived = parseFloat(bytesReceived);\n                lastStats[ssrc].timestamp = parseFloat(timestamp);\n\n                newStats.push({\n                    uploadRate: up,\n                    downloadRate: down,\n                    mediaType: mediaType,\n                    ssrc: ssrc\n                });\n            }\n        };\n\n        if (_.isFunction(stats.result)) {\n            _.forEach(stats.result(), function (statsReport) {\n                if (statsReport.type === 'ssrc') {\n                    var ssrc = statsReport.stat('ssrc');\n                    var bytesSent = statsReport.stat('bytesSent');\n                    var bytesReceived = statsReport.stat('bytesReceived');\n                    var mediaType = statsReport.stat('mediaType');\n                    var timestamp = statsReport.timestamp.getTime();\n\n                    convertStats(ssrc, mediaType, timestamp, bytesSent, bytesReceived);\n                }\n            });\n        } else if (_.isFunction(stats.values)) {\n            _.forEach(Array.from(stats.values()), function (statsReport) {\n                if (_.hasIndexOrKey(statsReport, 'ssrc')) {\n                    if (!statsReport.ssrc || statsReport.id.indexOf('rtcp') > -1) {\n                        return;\n                    }\n\n                    convertStats(statsReport.ssrc, statsReport.mediaType, statsReport.timestamp, statsReport.bytesSent, statsReport.bytesReceived);\n                }\n            });\n        } else {\n            _.forEach(stats, function (statsReport) {\n                if (_.hasIndexOrKey(statsReport, 'ssrc')) {\n                    if (!statsReport.ssrc || statsReport.id.indexOf('rtcp') > -1) {\n                        return;\n                    }\n\n                    convertStats(statsReport.ssrc, statsReport.mediaType, statsReport.timestamp, statsReport.bytesSent, statsReport.bytesReceived);\n                }\n            });\n        }\n\n        return newStats;\n    }\n\n    function calculateUploadRate(bytesSent, prevBytesSent, timeDelta) {\n        if (bytesSent) {\n            var bytesSentBefore = prevBytesSent || 0;\n            var bps = 8 * 1000 * (bytesSent - bytesSentBefore) / timeDelta;\n\n            return Math.round(bps / 1000);\n        }\n\n        return 0;\n    }\n\n    function calculateDownloadRate(bytesReceived, prevBytesReceived, timeDelta) {\n        if (bytesReceived) {\n            var bytesReceivedBefore = prevBytesReceived || 0;\n            var bps = 8 * 1000 * (bytesReceived - bytesReceivedBefore) / timeDelta;\n\n            return Math.round(bps / 1000);\n        }\n\n        return 0;\n    }\n\n    function parseProtobufMessage(message) {\n        if (!message) {\n            return message;\n        }\n\n        var parsedMessage = _.isArray(message) ? [] : {};\n        var processIndexOrKey = _.bind(removeNullValuesAndParseEnums, null, parsedMessage);\n\n        if (_.isArray(message)) {\n            _.forEach(message, processIndexOrKey);\n        } else {\n            _.forOwn(message, processIndexOrKey);\n        }\n\n        return parsedMessage;\n    }\n\n    function removeNullValuesAndParseEnums(parsedMessage, value, key) {\n        if (value === null) {\n            return;\n        }\n\n        if (_.isObject(value) || _.isArray(value)) {\n            return parsedMessage[key] = parseProtobufMessage(value);\n        }\n\n        if (!_.isString(value) || !_.isString(key)) {\n            return parsedMessage[key] = value;\n        }\n\n        var prefixedByKey = value.toLowerCase().indexOf(key.toLowerCase()) === 0;\n        var valueParsedWithoutKey = prefixedByKey ? value.substring(key.length, value.length).toLowerCase() : value;\n\n        parsedMessage[key] = valueParsedWithoutKey;\n    }\n\n    function applyVendorSpecificLogic(config) {\n        if (phenixRTC.browser.toLowerCase() === 'firefox') {\n            removeTurnsServers(config);\n        }\n\n        return config;\n    }\n\n    function removeTurnsServers(config) {\n        if (!config) {\n            return config;\n        }\n\n        _.forEach(config.iceServers, function(server) {\n            server.urls = _.filter(server.urls, function(url) {\n                return url.indexOf('turns') !== 0;\n            });\n        });\n\n        return config;\n    }\n\n    return PCast;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/PCast.js\n// module id = 14\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    '../AdminAPI',\n    '../PCast',\n    '../room/RoomService',\n    'phenix-rtc'\n], function (_, assert, AdminAPI, PCast, RoomService, rtc) {\n    'use strict';\n\n    var unauthorizedStatus = 'unauthorized';\n    var capacityBackoffTimeout = 1000;\n    var defaultPrerollSkipDuration = 500;\n\n    function PCastExpress(options) {\n        assert.isObject(options, 'options');\n        assert.stringNotEmpty(options.backendUri, 'options.backendUri');\n        assert.isObject(options.authenticationData, 'options.authenticationData');\n\n        this._pcast = null;\n        this._subscribers = {};\n        this._publishers = {};\n        this._roomServices = {};\n        this._adminAPI = new AdminAPI(options.backendUri, options.authenticationData);\n        this._pcast = new PCast(options);\n    }\n\n    PCastExpress.prototype.stop = function stop() {\n        if (_.values(this._roomServices).length) {\n            _.forOwn(this._roomServices, function (roomService) {\n                roomService.stop();\n            });\n\n            this._roomServices = {};\n        }\n\n        if (this._pcast) {\n            this._pcast.stop();\n        }\n    };\n\n    PCastExpress.prototype.getPCast = function getPCast() {\n        return this._pcast;\n    };\n\n    PCastExpress.prototype.getUserMedia = function(options, callback) {\n        var that = this;\n\n        assert.isObject(options.mediaConstraints, 'options.mediaConstraints');\n\n        instantiatePCastIfNoneExist.call(this, function(error, instantiateResponse) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (instantiateResponse.status !== 'ok') {\n                return callback(null, instantiateResponse);\n            }\n\n            that._pcast.getUserMedia(options.mediaConstraints, function(pcast, status, userMedia, e) {\n                if (e) {\n                    return callback(e);\n                }\n\n                if (status !== 'ok') {\n                    return callback(null, {status: status});\n                }\n\n                callback(null, {\n                    status: 'ok',\n                    userMedia: userMedia\n                });\n            });\n        });\n    };\n\n    PCastExpress.prototype.publish = function publish(options, callback) {\n        assert.isObject(options, 'options');\n\n        if (options.capabilities) {\n            assert.isArray(options.capabilities, 'options.capabilities');\n        }\n\n        if (options.connectOptions) {\n            assert.isArray(options.connectOptions, 'options.connectOptions');\n        }\n\n        if (options.mediaConstraints) {\n            assert.isObject(options.mediaConstraints, 'options.mediaConstraints');\n        } else {\n            assert.isObject(options.userMediaStream, 'options.userMediaStream');\n        }\n\n        if (options.videoElement) {\n            assert.isObject(options.videoElement, 'options.videoElement');\n        }\n\n        if (options.monitor) {\n            assert.isObject(options.monitor, 'options.monitor');\n            assert.isFunction(options.monitor.callback, 'options.monitor.callback');\n\n            if (options.monitor.options) {\n                assert.isObject(options.monitor.options, 'options.monitor.options');\n            }\n        }\n\n        var that = this;\n\n        instantiatePCastIfNoneExist.call(this, function(error, instantiateResponse) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (instantiateResponse.status !== 'ok') {\n                return callback(null, instantiateResponse);\n            }\n\n            if (options.userMediaStream) {\n                return getStreamingTokenAndPublish.call(that, options.userMediaStream, options, callback);\n            }\n\n            that._pcast.getUserMedia(options.mediaConstraints, function(pcast, status, userMedia, e) {\n                if (e) {\n                    return callback(e);\n                }\n\n                if (status !== 'ok') {\n                    return callback(null, {status: status});\n                }\n\n                getStreamingTokenAndPublish.call(that, userMedia, options, callback);\n            });\n        });\n    };\n\n    var connectOptionCapabilities = ['streaming', 'low-latency', 'on-demand', 'uld', 'vvld', 'vld', 'ld', 'sd', 'hd', 'fhd', 'uhd'];\n\n    PCastExpress.prototype.publishRemote = function publish(options, callback) {\n        assert.isObject(options, 'options');\n        assert.stringNotEmpty(options.streamUri, 'options.streamUri');\n\n        if (options.capabilities) {\n            assert.isArray(options.capabilities, 'options.capabilities');\n        }\n\n        if (options.connectOptions) {\n            assert.isArray(options.connectOptions, 'options.connectOptions');\n        }\n\n        if (options.mediaConstraints) {\n            throw new Error('Invalid argument, Media Constraints, for publishing remote.');\n        }\n\n        if (options.videoElement) {\n            throw new Error('May not view remote stream publisher. Please subscribe to view.');\n        }\n\n        if (options.prerollSkipDuration) {\n            assert.isNumber(options.prerollSkipDuration, 'options.prerollSkipDuration');\n        }\n\n        if (options.monitor) {\n            assert.isObject(options.monitor, 'options.monitor');\n            assert.isFunction(options.monitor.callback, 'options.monitor.callback');\n\n            if (options.monitor.options) {\n                assert.isObject(options.monitor.options, 'options.monitor.options');\n            }\n        }\n\n        if (options.frameRate) {\n            assert.isObject(options.frameRate, 'options.frameRate');\n\n            if (options.frameRate.exact) {\n                assert.isNumber(options.frameRate.exact, 'options.frameRate.exact');\n            }\n\n            if (options.frameRate.max) {\n                assert.isNumber(options.frameRate.max, 'options.frameRate.max');\n            }\n        }\n\n        var that = this;\n\n        instantiatePCastIfNoneExist.call(this, function(error, instantiateResponse) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (instantiateResponse.status !== 'ok') {\n                return callback(null, instantiateResponse);\n            }\n\n            var remoteOptions = _.assign({\n                connectOptions: [],\n                capabilities: []\n            }, options);\n\n            if (!_.includes(remoteOptions.capabilities, 'publish-uri')) {\n                remoteOptions.capabilities.push('publish-uri');\n            }\n\n            _.forEach(connectOptionCapabilities, function(capability) {\n                if (_.includes(remoteOptions.capabilities, capability)) {\n                    remoteOptions.connectOptions.push('publisher-capability=' + capability);\n                }\n            });\n\n            if (options.frameRate && options.frameRate.exact) {\n                remoteOptions.connectOptions.push('source-uri-video-fps=' + options.frameRate.exact);\n            }\n\n            if (options.frameRate && options.frameRate.max) {\n                remoteOptions.connectOptions.push('source-uri-video-fps-max=' + options.frameRate.max);\n            }\n\n            remoteOptions.connectOptions.push('source-uri-preroll-skip-duration=' + (_.isNumber(options.prerollSkipDuration) ? options.prerollSkipDuration : defaultPrerollSkipDuration).toString());\n\n            getStreamingTokenAndPublish.call(that, remoteOptions.streamUri, remoteOptions, callback);\n        });\n    };\n\n    PCastExpress.prototype.subscribe = function subscribe(options, callback) {\n        assert.isObject(options, 'options');\n        assert.stringNotEmpty(options.streamId, 'options.streamId');\n        assert.isObject(options.capabilities, 'options.capabilities');\n\n        if (options.videoElement) {\n            assert.isObject(options.videoElement, 'options.videoElement');\n        }\n\n        if (options.monitor) {\n            assert.isObject(options.monitor, 'options.monitor');\n            assert.isFunction(options.monitor.callback, 'options.monitor.callback');\n\n            if (options.monitor.options) {\n                assert.isObject(options.monitor.options, 'options.monitor.options');\n            }\n        }\n\n        var that = this;\n\n        instantiatePCastIfNoneExist.call(this, function(error, instantiateResponse) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (instantiateResponse.status !== 'ok') {\n                return callback(null, instantiateResponse);\n            }\n\n            that._adminAPI.createStreamTokenForSubscribing(that._pcast.getProtocol().getSessionId(), options.capabilities, options.streamId, function(error, response) {\n                if (error) {\n                    return callback(error);\n                }\n\n                if (response.status !== 'ok') {\n                    return callback(null, response);\n                }\n\n                subscribeToStream.call(that, response.streamToken, options, callback);\n            }, 1);\n        });\n    };\n\n    PCastExpress.prototype.createRoomService = function createRoomService(callback) {\n        var that = this;\n        var uniqueId = _.uniqueId();\n\n        instantiatePCastIfNoneExist.call(this, function(error, instantiateResponse) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (instantiateResponse.status !== 'ok') {\n                return callback(null, instantiateResponse);\n            }\n\n            that._roomServices[uniqueId] = new RoomService(that._pcast);\n\n            var expressRoomService = createExpressRoomService.call(that, that._roomServices[uniqueId], uniqueId);\n\n            callback(null, {\n                status: 'ok',\n                roomService: expressRoomService\n            });\n        });\n    };\n\n    function instantiatePCastIfNoneExist(callback) {\n        if (this._pcast && this._pcast.getStatus() !== 'offline') {\n            return callback(null, {status: 'ok'});\n        }\n\n        var that = this;\n\n        this._adminAPI.createAuthenticationToken(function(error, response) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (response.status !== 'ok') {\n                return callback(null, response);\n            }\n\n            that._pcast.start(response.authenticationToken,\n                function authenticationToken() {},\n                function onlineCallback() {\n                    callback(null, {status: 'ok'});\n                }, function offlineCallback() {\n                    callback(null, {status: 'offline'});\n                });\n        });\n    }\n\n    function getStreamingTokenAndPublish(userMediaOrUri, options, callback) {\n        var that = this;\n\n        assert.isArray(options.capabilities, 'options.capabilities');\n\n        that._adminAPI.createStreamTokenForPublishing(that._pcast.getProtocol().getSessionId(), options.capabilities, function(error, response) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (response.status !== 'ok') {\n                return callback(null, response);\n            }\n\n            publishUserMediaOrUri.call(that, response.streamToken, userMediaOrUri, options, callback);\n        }, 1);\n    }\n\n    function publishUserMediaOrUri(streamToken, userMediaOrUri, options, callback) {\n        var that = this;\n\n        if (options.tags) {\n            assert.isArray(options.tags, 'options.tags');\n        }\n\n        if (options.connectOptions) {\n            assert.isArray(options.connectOptions, 'options.connectOptions');\n        }\n\n        var publishCallback = function publishCallback(pcast, status, publisher) {\n            var retryPublisher = function retryPublisher(reason) {\n                var placeholder = _.uniqueId();\n\n                that._publishers[placeholder] = true;\n                publisher.stop(reason);\n\n                publishUserMediaOrUri.call(that, streamToken, userMediaOrUri, options, function(error, response) {\n                    if (response && response.status === unauthorizedStatus) {\n                        return getStreamingTokenAndPublish.call(that, userMediaOrUri, options, callback);\n                    }\n\n                    callback(error, response);\n                });\n\n                delete that._publishers[placeholder];\n            };\n\n            if (status !== 'ok') {\n                return callback(null, {status: status});\n            }\n\n            that._publishers[publisher.getStreamId()] = publisher;\n\n            if (options.videoElement) {\n                rtc.attachMediaStream(options.videoElement, userMediaOrUri);\n            }\n\n            var isPublisher = true;\n            var noopCallback = function() {};\n            var publisherEndedCallback = _.bind(onPublisherOrStreamEnd, that, noopCallback, retryPublisher, isPublisher);\n\n            if (options.monitor) {\n                var monitorCallback = _.bind(onMonitorCallback, that, options.monitor.callback, retryPublisher);\n\n                publisher.monitor(options.monitor.options || {}, monitorCallback);\n\n                publisherEndedCallback = _.bind(onPublisherOrStreamEnd, that, options.monitor.callback, retryPublisher, isPublisher);\n            }\n\n            publisher.setPublisherEndedCallback(publisherEndedCallback);\n\n            var expressPublisher = createExpressPublisher.call(that, publisher, options.videoElement);\n\n            callback(null, {\n                status: 'ok',\n                publisher: expressPublisher\n            });\n        };\n\n        that._pcast.publish(streamToken, userMediaOrUri, publishCallback, options.tags, {connectOptions: options.connectOptions});\n    }\n\n    function subscribeToStream(streamToken, options, callback) {\n        var that = this;\n\n        that._pcast.subscribe(streamToken, function(pcast, status, subscriber) {\n            var retrySubscriber = function retrySubscriber(reason) {\n                var placeholder = _.uniqueId();\n\n                that._subscribers[placeholder] = true;\n\n                subscriber.stop(reason);\n\n                subscribeToStream.call(that, streamToken, options, function(error, response) {\n                    if (response && response.status === unauthorizedStatus) {\n                        return that.subscribe(options, callback);\n                    }\n\n                    callback(error, response);\n                });\n\n                delete that._subscribers[placeholder];\n            };\n\n            if (status === 'streaming-not-ready') {\n                return callback(null, {\n                    status: status,\n                    retry: _.bind(retrySubscriber, that, status)\n                });\n            }\n\n            if (status !== 'ok') {\n                return callback(null, {status: status});\n            }\n\n            that._subscribers[subscriber.getStreamId()] = subscriber;\n\n            var renderer;\n\n            if (options.videoElement) {\n                renderer = subscriber.createRenderer();\n\n                renderer.start(options.videoElement);\n            }\n\n            var isPublisher = false;\n            var noopCallback = function() {};\n            var subscriberEndedCallback = _.bind(onPublisherOrStreamEnd, that, noopCallback, retrySubscriber, isPublisher);\n\n            if (options.monitor) {\n                var monitorCallback = _.bind(onMonitorCallback, that, options.monitor.callback, retrySubscriber);\n\n                subscriber.monitor(options.monitor.options || {}, monitorCallback);\n\n                subscriberEndedCallback = _.bind(onPublisherOrStreamEnd, that, options.monitor.callback, retrySubscriber, isPublisher);\n            }\n\n            subscriber.setStreamEndedCallback(subscriberEndedCallback);\n\n            var expressSubscriber = createExpressSubscriber.call(that, subscriber, renderer);\n            var subscribeResponse = {\n                status: 'ok',\n                mediaStream: expressSubscriber\n            };\n\n            if (renderer) {\n                subscribeResponse.renderer = renderer;\n            }\n\n            callback(null, subscribeResponse);\n        });\n    }\n\n    function createExpressPublisher(publisher, videoElement) {\n        var publisherStop = publisher.stop;\n\n        publisher.stop = function(reason) {\n            publisherStop(reason);\n\n            if (videoElement) {\n                videoElement.src = '';\n                videoElement.srcObject = null;\n            }\n        };\n\n        publisher.enableAudio = function() {\n            return setStreamAudioTracksState(publisher.getStream(), true);\n        };\n\n        publisher.disableAudio = function() {\n            return setStreamAudioTracksState(publisher.getStream(), false);\n        };\n\n        publisher.enableVideo = function() {\n            return setStreamVideoTracksState(publisher.getStream(), true);\n        };\n\n        publisher.disableVideo = function() {\n            return setStreamVideoTracksState(publisher.getStream(), false);\n        };\n\n        // Publisher Ended Callback handled with normal callback route for express\n        publisher.setPublisherEndedCallback = function() {};\n\n        return publisher;\n    }\n\n    function createExpressSubscriber(subscriber, renderer) {\n        var subscriberStop = subscriber.stop;\n\n        subscriber.stop = function(reason) {\n            if (renderer) {\n                renderer.stop();\n            }\n\n            subscriberStop(reason);\n        };\n\n        subscriber.enableAudio = function() {\n            return setStreamAudioTracksState(subscriber.getStream(), true);\n        };\n\n        subscriber.disableAudio = function() {\n            return setStreamAudioTracksState(subscriber.getStream(), false);\n        };\n\n        subscriber.enableVideo = function() {\n            return setStreamVideoTracksState(subscriber.getStream(), true);\n        };\n\n        subscriber.disableVideo = function() {\n            return setStreamVideoTracksState(subscriber.getStream(), false);\n        };\n\n        // Stream Ended Callback handled with normal callback route for express\n        subscriber.setStreamEndedCallback = function() {};\n\n        return subscriber;\n    }\n\n    function createExpressRoomService(roomService, uniqueId) {\n        var that = this;\n        var roomServiceStop = roomService.stop;\n\n        roomService.stop = function() {\n            roomServiceStop.call(roomService);\n\n            delete that._roomServices[uniqueId];\n\n            // StopPCastIfNoActiveStreams.call(that);\n        };\n\n        return roomService;\n    }\n\n    function setStreamAudioTracksState(stream, newState) {\n        if (!stream) {\n            return;\n        }\n\n        setTracksEnabled(stream.getAudioTracks(), newState);\n\n        return newState;\n    }\n\n    function setStreamVideoTracksState(stream, newState) {\n        if (!stream) {\n            return;\n        }\n\n        setTracksEnabled(stream.getVideoTracks(), newState);\n\n        return newState;\n    }\n\n    function setTracksEnabled(tracks, enabled) {\n        assert.isArray(tracks, 'tracks');\n\n        _.forEach(tracks, function(track) {\n            track.enabled = enabled;\n        });\n    }\n\n    function onMonitorCallback(callback, retry, stream, reason, description) { // eslint-disable-line no-unused-vars\n        switch (reason) {\n        case 'client-side-failure':\n            callback(null, {\n                status: reason,\n                retry: _.bind(retry, null, reason)\n            });\n\n            // Handle failure event, redo stream\n            break;\n        default:\n            // No failure has occurred, handle monitor event\n            break;\n        }\n    }\n\n    function onPublisherOrStreamEnd(monitorCallback, retry, isPublisher, publisherOrStream, reason, description) {\n        var response = {\n            status: 'stream-ended',\n            reason: reason,\n            description: description\n        };\n\n        switch (reason) {\n        case 'ended':\n            // Normal operation\n            var endedResponse = {\n                status: reason,\n                reason: reason,\n                description: description\n            };\n\n            if (isPublisher) {\n                endedResponse.publisher = publisherOrStream;\n            } else {\n                endedResponse.mediaStream = publisherOrStream;\n            }\n\n            return monitorCallback(null, endedResponse);\n        case 'custom':\n            // Client ended publisher, do nothing\n            return monitorCallback(null, response);\n        case 'capacity':\n            // Don't inform the client, attempt to re-publish automatically after backoff\n            return setTimeout(function() {\n                return retry(reason);\n            }, capacityBackoffTimeout);\n        case 'failed':\n        case 'maintenance':\n            // Don't inform the client, attempt to re-publish automatically\n            return retry(reason);\n        case 'censored':\n        case 'app-background':\n        default:\n            // Give client option to re-publish\n            response.retry = retry;\n\n            return monitorCallback(null, response);\n        }\n    }\n\n    return PCastExpress;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/express/PCastExpress.js\n// module id = 15\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    '../authentication/AuthenticationService',\n    './Room',\n    './ImmutableRoom',\n    './Member',\n    '../chat/RoomChatService',\n    './room.json',\n    './member.json'\n], function (_, assert, observable, AuthenticationService, Room, ImmutableRoom, Member, RoomChatService, room, member) {\n    'use strict';\n\n    var notInRoomResponse = _.freeze({status: 'not-in-room'});\n\n    function RoomService(pcast) {\n        assert.isObject(pcast, 'pcast');\n        assert.isFunction(pcast.getLogger, 'pcast.getLogger');\n        assert.isFunction(pcast.getProtocol, 'pcast.getProtocol');\n\n        this._pcast = pcast;\n        this._logger = pcast.getLogger();\n        this._protocol = pcast.getProtocol();\n\n        this._self = new observable.Observable(null);\n        this._activeRoom = new observable.Observable(null);\n        this._cachedRoom = new observable.Observable(null);\n        this._roomChatService = null;\n\n        assert.isObject(this._logger, 'this._logger');\n        assert.isObject(this._protocol, 'this._protocol');\n\n        this._authService = new AuthenticationService(this._pcast);\n    }\n\n    RoomService.prototype.start = function start(role, screenName) {\n        assert.stringNotEmpty(role, 'role');\n        assert.stringNotEmpty(screenName, 'screenName');\n\n        var myState = member.states.passive.name;\n        var mySessionId = this._authService.getPCastSessionId();\n        var myScreenName = screenName;\n        var myStreams = [];\n        var myLastUpdate = _.now();\n        var roomService = this;\n\n        var self = new Member(roomService, myState, mySessionId, myScreenName, role, myStreams, myLastUpdate);\n\n        this._self = new observable.Observable(self);\n        this._disposables = [];\n\n        var disposeOfRoomEventHandler = this._protocol.on('roomEvent', _.bind(onRoomEvent, this));\n\n        this._disposables.push(disposeOfRoomEventHandler);\n\n        setupSubscriptions.call(this);\n\n        return self;\n    };\n\n    RoomService.prototype.getRoomInfo = function getRoomInfo(roomId, alias, callback) {\n        if (roomId) {\n            assert.stringNotEmpty('roomId', roomId);\n        } else {\n            assert.stringNotEmpty('alias', alias);\n        }\n\n        assert.isFunction(callback);\n\n        getRoomInfoRequest.call(this, roomId, alias, callback);\n    };\n\n    RoomService.prototype.createRoom = function createRoom(room, callback) {\n        assert.isObject(room, 'room');\n        assert.stringNotEmpty(room.name, 'room.name');\n        assert.stringNotEmpty(room.type, 'room.type');\n        assert.isString(room.description, 'room.description');\n        assert.isFunction(callback);\n\n        createRoomRequest.call(this, room, callback);\n    };\n\n    RoomService.prototype.enterRoom = function enterRoom(roomId, alias, callback) {\n        if (roomId) {\n            assert.stringNotEmpty('roomId', roomId);\n        } else {\n            assert.stringNotEmpty('alias', alias);\n        }\n\n        assert.isFunction(callback);\n\n        enterRoomRequest.call(this, roomId, alias, callback);\n    };\n\n    RoomService.prototype.leaveRoom = function leaveRoom(callback) {\n        var that = this;\n\n        return leaveRoomRequest.call(that, callback);\n    };\n\n    RoomService.prototype.getRoomChatService = function getRoomChatService() {\n        if (!this._roomChatService && this._activeRoom.getValue()) {\n            this._roomChatService = new RoomChatService(this);\n        }\n\n        return this._roomChatService;\n    };\n\n    RoomService.prototype.getSelf = function getSelf() {\n        return this._self.getValue();\n    };\n\n    RoomService.prototype.getObservableActiveRoom = function getObservableActiveRoom() {\n        return this._activeRoom;\n    };\n\n    RoomService.prototype.updateSelf = function updateSelf(callback) {\n        assert.isFunction(callback);\n\n        updateMemberRequest.call(this, this.getSelf(), callback);\n    };\n\n    RoomService.prototype.updateMember = function updateMember(member, callback) {\n        assert.isFunction(callback);\n        assert.isObject(member);\n\n        updateMemberRequest.call(this, member, callback);\n    };\n\n    RoomService.prototype.updateRoom = function updateRoom(callback) {\n        assert.isFunction(callback);\n\n        updateRoomRequest.call(this, callback);\n    };\n\n    RoomService.prototype.revertRoomChanges = function revertRoomChanges() {\n        var activeRoom = this._activeRoom.getValue();\n        var cachedRoom = this._cachedRoom.getValue();\n\n        if (!activeRoom || !cachedRoom) {\n            return this._logger.warn('Unable to revert changes to room. Not currently in a room.');\n        }\n\n        activeRoom._update(cachedRoom.toJson());\n    };\n\n    RoomService.prototype.revertMemberChanges = function revertMemberChanges(member) {\n        assert.isObject(member);\n\n        var cachedMember = findMemberInObservableRoom(member.getSessionId(), this._cachedRoom);\n        var activeMember = findMemberInObservableRoom(member.getSessionId(), this._activeRoom);\n\n        if (!cachedMember || !activeMember) {\n            return this._logger.warn('Unable to revert changes to member. Member is currently not in room.');\n        }\n\n        activeMember._update(cachedMember.toJson());\n    };\n\n    RoomService.prototype.toString = function toString() {\n        return 'RoomService';\n    };\n\n    RoomService.prototype.stop = function stop() {\n        disposeOfArray(this._disposables);\n    };\n\n    function resetSelf(sessionId) {\n        var self = this._self.getValue().toJson();\n        var roomService = this;\n\n        this._self.setValue(new Member(roomService, self.state, sessionId, self.screenName, self.role, self.streams, self.lastUpdate));\n    }\n\n    function resetRoom() {\n        var that = this;\n\n        var activeRoom = that._activeRoom.getValue();\n\n        if (!_.isObject(activeRoom)) {\n            return;\n        }\n\n        var roomId = activeRoom.getRoomId();\n        var alias = activeRoom.getObservableAlias().getValue();\n\n        that.leaveRoom(function() {\n            that.enterRoom(roomId, alias, function() {\n                that._logger.info('Room Reset Completed');\n            });\n        });\n    }\n\n    // Handle events\n    function onRoomEvent(event) {\n        assert.isObject(event, 'event');\n        assert.isString(event.roomId, 'event.roomId');\n        assert.isString(event.eventType, 'event.eventType');\n        assert.isArray(event.members, 'event.members');\n\n        _.forEach(event.members, function(member) {\n            assert.isObject(member, 'member');\n        });\n\n        var that = this;\n\n        switch (event.eventType) {\n        case room.events.memberJoined.name:\n            that._logger.debug('[%s] Member joined [%s]', event.roomId, event.members);\n\n            return onMembersJoinsRoom.call(that, event.roomId, event.members);\n        case room.events.memberLeft.name:\n            that._logger.debug('[%s] Member left [%s]', event.roomId, event.members);\n\n            return onMembersLeavesRoom.call(that, event.roomId, event.members);\n        case room.events.memberUpdated.name:\n            that._logger.debug('[%s] Member updated [%s]', event.roomId, event.members);\n\n            return onMembersUpdated.call(that, event.roomId, event.members);\n        case room.events.roomUpdated.name:\n            that._logger.debug('[%s] Room updated [%s]', event.roomId, event.room);\n\n            return onRoomUpdated.call(that, event.roomId, event.room);\n        case room.events.roomEnded.name:\n            that._logger.info('[%s] Room ended', event.roomId);\n\n            break;\n        default:\n            that._logger.warn('Unsupported room event [%s]', event.eventType);\n        }\n    }\n\n    function onMembersJoinsRoom(roomId, members) {\n        var room = this._activeRoom.getValue();\n        var cachedRoom = this._cachedRoom.getValue();\n\n        if (!room || room.getRoomId() !== roomId) {\n            return;\n        }\n\n        room._removeMembers(members);\n        room._addMembers(members);\n\n        cachedRoom._removeMembers(members);\n        cachedRoom._addMembers(members);\n\n        var that = this;\n\n        var memberIsSelf = function(member) {\n            return member.sessionId === that.getSelf().getSessionId();\n        };\n\n        var joinedSelf = _.find(members, memberIsSelf);\n\n        if (joinedSelf) {\n            replaceSelfInstanceInRoom.call(that, room);\n\n            room._updateMembers([joinedSelf]);\n        }\n\n        this._logger.info('[%s] Room has now [%d] members', roomId, room.getObservableMembers().getValue().length);\n    }\n\n    function onMembersLeavesRoom(roomId, members) {\n        var room = this._activeRoom.getValue();\n        var cachedRoom = this._cachedRoom.getValue();\n\n        if (!room || room.getRoomId() !== roomId) {\n            return;\n        }\n\n        room._removeMembers(members);\n        cachedRoom._removeMembers(members);\n\n        this._logger.info('[%s] Room has now [%d] members', roomId, room.getObservableMembers().getValue().length);\n    }\n\n    function onMembersUpdated(roomId, members) {\n        var room = this._activeRoom.getValue();\n        var cachedRoom = this._cachedRoom.getValue();\n\n        if (!room || room.getRoomId() !== roomId) {\n            return;\n        }\n\n        // To help reduce conflicts when different properties are sequentially changing\n        var membersWithOnlyPropertiesThatChanged = getDifferencesBetweenCachedRoomMembersAndUpdatedMembers.call(this, members);\n\n        room._updateMembers(membersWithOnlyPropertiesThatChanged);\n        cachedRoom._updateMembers(membersWithOnlyPropertiesThatChanged);\n\n        this._logger.info('[%s] Room has [%d] updated members', roomId, members.length);\n    }\n\n    function onRoomUpdated(roomId, room) {\n        var activeRoom = this._activeRoom.getValue();\n        var cachedRoom = this._cachedRoom.getValue();\n\n        if (!activeRoom || activeRoom.getRoomId() !== roomId) {\n            return;\n        }\n\n        cachedRoom._update(room);\n        activeRoom._update(room);\n    }\n\n    function handlePCastSessionIdChanged(sessionId) {\n        if (this.getSelf() && this.getSelf().getSessionId() === sessionId) {\n            return;\n        }\n\n        resetSelf.call(this, sessionId);\n    }\n\n    function findMemberInObservableRoom(sessionId, observableRoom) {\n        var room = observableRoom.getValue();\n        var members = room.getObservableMembers().getValue();\n\n        return findMemberInMembers(sessionId, members);\n    }\n\n    function findMemberInMembers(sessionId, members) {\n        return _.find(members, function(member) {\n            return sessionId === member.getSessionId();\n        });\n    }\n\n    function handlePCastStatusChange(status) {\n        this._logger.info('PCast status changed to [%s]', status);\n\n        if (status.toLowerCase() !== 'offline' && this._lastPcastStatus === 'offline') {\n            // ToDo (dcy) disabled until we determine what to do when the client goes back online\n            // resetRoom.call(this);\n        } else if (status.toLowerCase() === 'offline' && this._lastPcastStatus !== 'offline' && !_.isNullOrUndefined(this._lastPcastStatus)) {\n            // ToDo (dcy) disabled until we determine what to do when the client goes offline\n        }\n\n        this._lastPcastStatus = status;\n    }\n\n    function setupSubscriptions() {\n        var selfSubscription = this._self.subscribe(_.bind(resetRoom, this));\n\n        var pcastStatusSubscription = this._authService.getObservableStatus().subscribe(_.bind(handlePCastStatusChange, this));\n        var pcastSessionIdSubscription = this._authService.getObservableSessionId().subscribe(_.bind(handlePCastSessionIdChanged, this));\n\n        this._disposables.push(selfSubscription.dispose);\n        this._disposables.push(pcastStatusSubscription.dispose);\n        this._disposables.push(pcastSessionIdSubscription.dispose);\n    }\n\n    function disposeOfArray(arrayOfDisposables) {\n        if (!_.isArray(arrayOfDisposables)) {\n            return;\n        }\n\n        for (var i = 0; i < arrayOfDisposables.length; i++) {\n            if (typeof arrayOfDisposables[i] === 'function') {\n                arrayOfDisposables[i]();\n            }\n        }\n    }\n\n    function getDifferencesBetweenCachedRoomMembersAndUpdatedMembers(members) {\n        var that = this;\n\n        return _.map(members, function (member) {\n            var cachedMember = findMemberInObservableRoom(member.sessionId, that._cachedRoom);\n            var placeholderMember = new Member(null, member.state, member.sessionId, member.screenName, member.role, member.streams, member.lastUpdate);\n            var memberWithOnlyDifferentProperties = buildMemberForRequest(placeholderMember, cachedMember);\n\n            memberWithOnlyDifferentProperties.lastUpdate = member.lastUpdate;\n\n            return memberWithOnlyDifferentProperties;\n        });\n    }\n\n    // Requests to server\n    function buildMemberForRequest(member, memberToCompare) {\n        var memberForRequest = findDifferencesInMember(member, memberToCompare);\n\n        memberForRequest.sessionId = member.getSessionId();\n        // Last valid update from server. Handles collisions.\n        memberForRequest.lastUpdate = memberToCompare ? memberToCompare.getLastUpdate() : _.now();\n\n        return memberForRequest;\n    }\n\n    function findDifferencesInMember(member, memberToCompare) {\n        if (memberToCompare === null) {\n            return member.toJson();\n        }\n\n        var memberForRequest = {};\n        var newMember = member.toJson();\n        var cachedMember = memberToCompare.toJson();\n        var differences = _.findDifferences(newMember, cachedMember, true);\n\n        _.forEach(differences, function(key) {\n            memberForRequest[key] = newMember[key];\n        });\n\n        return memberForRequest;\n    }\n\n    function getRoomInfoRequest(roomId, alias, callback) {\n        this._authService.assertAuthorized();\n\n        var that = this;\n\n        this._protocol.getRoomInfo(roomId, alias,\n            function handleCreateRoomResponse(error, response) {\n                if (error) {\n                    that._logger.error('Request to get room info failed with error [%s]', error);\n\n                    return callback(error, null);\n                }\n\n                var result = {status: response.status};\n\n                if (response.status !== 'ok') {\n                    that._logger.warn('Request to get room info failed with status [%s]', response.status);\n\n                    return callback(null, result);\n                }\n\n                result.room = _.freeze(createImmutableRoomFromResponse.call(this, response));\n\n                callback(null, result);\n            }\n        );\n    }\n\n    function createRoomRequest(room, callback) {\n        this._authService.assertAuthorized();\n\n        var that = this;\n\n        var validatedRoom = getValidRoomObject(room);\n\n        this._protocol.createRoom(validatedRoom, function handleCreateRoomResponse(error, response) {\n            if (error) {\n                that._logger.error('Creating room failed with error [%s]', error);\n\n                return callback(error, null);\n            }\n\n            var result = {status: response.status};\n\n            if (response.status !== 'ok' && response.status !== 'already-exists') {\n                that._logger.warn('Creating room failed with status [%s]', response.status);\n\n                return callback(null, result);\n            }\n\n            result.room = _.freeze(createImmutableRoomFromResponse.call(this, response));\n\n            callback(null, result);\n        });\n    }\n\n    function getValidRoomObject(room) {\n        var roomService = this;\n\n        return (new Room(roomService, '', room.alias, room.name, room.description, room.type, [], room.bridgeId, room.pin)).toJson();\n    }\n\n    function enterRoomRequest(roomId, alias, callback) {\n        this._authService.assertAuthorized();\n\n        var self = this._self.getValue();\n\n        var screenName = self.getObservableScreenName().getValue();\n        var role = self.getObservableRole().getValue();\n        var selfForRequest = buildMemberForRequest.call(this, self, null);\n        var timestamp = _.now();\n\n        this._logger.info('Enter room [%s]/[%s] with screen name [%s] and role [%s]', roomId, alias, screenName, role);\n\n        var that = this;\n\n        this._protocol.enterRoom(roomId, alias, selfForRequest, timestamp,\n            function handleEnterRoomResponse(error, response) {\n                if (error) {\n                    that._logger.error('Joining of room failed with error [%s]', error);\n\n                    return callback(error, null);\n                }\n\n                var result = {status: response.status};\n\n                if (response.status !== 'ok') {\n                    that._logger.warn('Joining of room failed with status [%s]', response.status);\n\n                    return callback(null, result);\n                }\n\n                result.room = initializeRoomAndBuildCache.call(that, response);\n\n                callback(null, result);\n            }\n        );\n    }\n\n    function leaveRoomRequest(callback) {\n        if (!this._activeRoom.getValue()) {\n            this._logger.warn('Unable to leave room. Not currently in a room.');\n\n            return callback(null, notInRoomResponse);\n        }\n\n        this._authService.assertAuthorized();\n\n        var roomId = this._activeRoom.getValue().getRoomId();\n        var timestamp = _.now();\n\n        this._logger.info('Leave room [%s]', roomId);\n\n        var that = this;\n\n        this._protocol.leaveRoom(roomId, timestamp,\n            function handleLeaveRoomResponse(error, response) {\n                if (error) {\n                    that._logger.error('Leaving room failed with error [%s]', error);\n\n                    return callback(error, null);\n                }\n\n                var result = {status: response.status};\n\n                if (response.status !== 'ok') {\n                    that._logger.warn('Leaving room failed with status [%s]', response.status);\n\n                    return callback(null, result);\n                }\n\n                if (that._roomChatService) {\n                    that._roomChatService.stop();\n                }\n\n                that._roomChatService = null;\n\n                that._activeRoom.setValue(null);\n                that._cachedRoom.setValue(null);\n\n                callback(null, result);\n            }\n        );\n    }\n\n    function updateMemberRequest(member, callback) {\n        if (!this._activeRoom.getValue()) {\n            this._logger.warn('Not in a room. Please Enter a room before updating member.');\n\n            return callback(null, notInRoomResponse);\n        }\n\n        this._authService.assertAuthorized();\n\n        var cachedMember = findMemberInObservableRoom(member.getSessionId(), this._cachedRoom);\n        var memberForRequest = buildMemberForRequest.call(this, member, cachedMember);\n        var timestamp = _.now();\n\n        this._logger.info('Updating member info for active room');\n\n        var that = this;\n\n        this._protocol.updateMember(memberForRequest, timestamp,\n            function handleUpdateMemberResponse(error, response) {\n                if (error) {\n                    that._logger.error('Update of member failed with error [%s]', error);\n\n                    return callback(error, null);\n                }\n\n                var result = {status: response.status};\n\n                if (response.status !== 'ok') {\n                    that._logger.warn('Update of member failed with status [%s]', response.status);\n                }\n\n                callback(null, result);\n            }\n        );\n    }\n\n    function updateRoomRequest(callback) {\n        if (!this._activeRoom.getValue()) {\n            this._logger.warn('Not in a room. Please Enter a room before updating member.');\n\n            return callback(null, notInRoomResponse);\n        }\n\n        this._authService.assertAuthorized();\n\n        var room = this._activeRoom.getValue();\n        var timestamp = _.now();\n\n        var that = this;\n\n        this._protocol.updateRoom(room.toJson(), timestamp,\n            function handleUpdateMemberResponse(error, response) {\n                if (error) {\n                    that._logger.error('Update of room failed with error [%s]', error);\n\n                    return callback(error, null);\n                }\n\n                var result = {status: response.status};\n\n                if (response.status !== 'ok') {\n                    that._logger.warn('Update of room failed with status [%s]', response.status);\n                }\n\n                callback(null, result);\n            }\n        );\n    }\n\n    function createImmutableRoomFromResponse(response) {\n        var roomInfo = response.room;\n        var members = response.members || [];\n        var roomService = this;\n\n        return new ImmutableRoom(roomService, roomInfo.roomId, roomInfo.alias, roomInfo.name, roomInfo.description, roomInfo.type, members, roomInfo.bridgeId, roomInfo.pin);\n    }\n\n    function createRoomFromResponse(response) {\n        var roomInfo = response.room;\n        var members = response.members;\n        var roomService = this;\n\n        return new Room(roomService, roomInfo.roomId, roomInfo.alias, roomInfo.name, roomInfo.description, roomInfo.type, members, roomInfo.bridgeId, roomInfo.pin);\n    }\n\n    function initializeRoomAndBuildCache(response) {\n        var room = createRoomFromResponse.call(this, response);\n        var cachedRoom = createRoomFromResponse.call(this, response);\n\n        replaceSelfInstanceInRoom.call(this, room);\n\n        this._activeRoom.setValue(room);\n        this._cachedRoom.setValue(cachedRoom);\n\n        return room;\n    }\n\n    function replaceSelfInstanceInRoom(room) {\n        var self = this._self.getValue();\n        var members = room.getObservableMembers().getValue();\n\n        var selfIndex = _.findIndex(members, function(member) {\n            return self.getSessionId() === member.getSessionId();\n        });\n\n        if (!_.isNumber(selfIndex)) {\n            return this._logger.info('Self not in server room model.');\n        }\n\n        self._update(members[selfIndex].toJson());\n\n        members[selfIndex] = self;\n\n        room.getObservableMembers().setValue(members);\n    }\n\n    return RoomService;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/RoomService.js\n// module id = 16\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert'\n], function (_, assert) {\n    'use strict';\n\n    function Observable(initialValue, beforeChange) {\n        this.latestValue = null;\n        this.subscribeCallbacks = {};\n        this.subscriptionTimeout = 100;\n        this.subscriptionCount = 0;\n        this.resetOnChange = false;\n        this.lastChangeTime = 0;\n        this.isPendingChanges = false;\n        this.beforeChange = beforeChange;\n\n        setLatestValue.call(this, initialValue);\n    }\n\n    Observable.prototype.getValue = function getValue() {\n        return clone(this.latestValue);\n    };\n\n    Observable.prototype.setValue = function setValue(value) {\n        if (value !== this.latestValue) {\n            setLatestValue.call(this, value);\n            onSubscribeCallback.call(this, this.subscriptionTimeout);\n        }\n    };\n\n    Observable.prototype.subscribe = function subscribe(callback, options) {\n        assert.isFunction(callback);\n\n        if (options) {\n            assert.isObject(options);\n        }\n\n        var that = this;\n        var key = _.uniqueId();\n        var listenForChanges;\n\n        that.subscribeCallbacks[key] = callback;\n        that.subscriptionCount += 1;\n\n        if (options) {\n            if (options.initial === 'notify') {\n                onSubscribeCallback.call(that, that.subscriptionTimeout, true);\n            }\n\n            if (options.listenForChanges) {\n                listenForChanges = setInterval(function() {\n                    var valueAtInterval = options.listenForChanges.callback();\n\n                    if (valueAtInterval !== that.latestValue) {\n                        that.setValue(valueAtInterval);\n                    }\n                }, options.listenForChanges.timeout);\n            }\n        }\n\n        function dispose() {\n            delete that.subscribeCallbacks[key];\n\n            if (listenForChanges) {\n                clearInterval(listenForChanges);\n\n                listenForChanges = null;\n            }\n\n            that.subscriptionCount -= 1;\n        }\n\n        return {dispose: dispose};\n    };\n\n    Observable.prototype.extend = function extend(options) {\n        assert.isObject(options);\n\n        switch (options.method) {\n        case 'notifyWhenChangesStop':\n            this.subscriptionTimeout = options.timeout;\n            this.resetOnChange = true;\n\n            break;\n        case 'notifyAtFixedRate':\n            this.subscriptionTimeout = options.timeout;\n\n            break;\n        default:\n            break;\n        }\n\n        if (_.isNumber(options.rateLimit)) {\n            this.subscriptionTimeout = options.rateLimit;\n        }\n\n        return this;\n    };\n\n    function clone(value) {\n        if (typeof value === 'undefined' || value === null) {\n            return value;\n        }\n\n        // Necessary for observable array. Subsequent comparison must not be equal in order to trigger updates.\n        if (_.isArray(value)) {\n            return value.slice();\n        }\n\n        return value;\n    }\n\n    function setLatestValue(value) {\n        var valueToSet = value;\n\n        if (this.beforeChange) {\n            valueToSet = this.beforeChange(value);\n        }\n\n        this.latestValue = clone(valueToSet);\n    }\n\n    function onSubscribeCallback(timeoutLength, noTimeout) {\n        this.lastChangeTime = _.now();\n\n        if (!this.isPendingChanges && this.subscriptionCount !== 0) {\n            this.isPendingChanges = true;\n\n            if (noTimeout) {\n                return notifySubscribers.call(this);\n            }\n\n            continueAfterTimeout.call(this, timeoutLength);\n        }\n    }\n\n    function continueAfterTimeout(timeoutLength) {\n        var that = this;\n\n        setTimeout(function() {\n            var timeElapsedSinceLastChange = _.now() - that.lastChangeTime;\n\n            if (that.resetOnChange && timeElapsedSinceLastChange < that.subscriptionTimeout) {\n                continueAfterTimeout.call(that, that.subscriptionTimeout - timeElapsedSinceLastChange);\n            } else {\n                notifySubscribers.call(that);\n            }\n        }, timeoutLength);\n    }\n\n    function notifySubscribers() {\n        try {\n            executeSubscriptionCallbacks.call(this);\n        } finally {\n            this.isPendingChanges = false;\n        }\n    }\n\n    function executeSubscriptionCallbacks() {\n        var that = this;\n\n        _.forOwn(that.subscribeCallbacks, function (callback) {\n            if (_.isFunction(callback)) {\n                callback(that.latestValue);\n            }\n        });\n    }\n\n    return Observable;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-observable/src/Observable.js\n// module id = 17\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert'\n], function (_, assert) {\n    'use strict';\n\n    function AuthenticationService(pcast) {\n        assert.isObject(pcast, 'pcast');\n        assert.isFunction(pcast.getObservableStatus, 'pcast.getObservableStatus');\n        assert.isFunction(pcast.getLogger, 'pcast.getLogger');\n        assert.isFunction(pcast.getProtocol, 'pcast.getProtocol');\n\n        if (this._pcast === pcast) {\n            return;\n        }\n\n        this._pcast = pcast;\n        this._logger = pcast.getLogger();\n        this._protocol = pcast.getProtocol();\n\n        assert.isObject(this._logger, 'this._logger');\n        assert.isObject(this._protocol, 'this._protocol');\n        assert.isFunction(this._protocol.getObservableSessionId, 'this._protocol.getObservableSessionId');\n        assert.isFunction(this._pcast.getObservableStatus, 'this._pcast.getObservableStatus');\n\n        this._sessionId = this._protocol.getObservableSessionId();\n        this._status = this._pcast.getObservableStatus();\n    }\n\n    AuthenticationService.prototype.assertAuthorized = function assertAuthorized() {\n        if (!validPCastStatus(this.getPCastStatus())) {\n            throw new Error('Unable to perform action. Status [%s]. Please wait to reconnect.', this.getPCastStatus());\n        }\n\n        if (!validPCastSessionId(this.getPCastSessionId())) {\n            throw new Error('Unable to perform action. Invalid sessionId [%s]', this.getPCastSessionId());\n        }\n    };\n\n    AuthenticationService.prototype.getObservableSessionId = function getObservableSessionId() {\n        return this._sessionId;\n    };\n\n    AuthenticationService.prototype.getObservableStatus = function getObservableStatus() {\n        return this._status;\n    };\n\n    AuthenticationService.prototype.getPCastSessionId = function getPCastSessionId() {\n        return this._sessionId.getValue();\n    };\n\n    AuthenticationService.prototype.getPCastStatus = function getPCastStatus() {\n        return this._status.getValue();\n    };\n\n    function validPCastSessionId(sessionId) {\n        return sessionId !== null && sessionId !== undefined && sessionId !== '';\n    }\n\n    function validPCastStatus(status) {\n        return status !== null && status !== undefined && status !== '' && status.toLowerCase() !== 'offline';\n    }\n\n    return AuthenticationService;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/authentication/AuthenticationService.js\n// module id = 18\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([], function () {\n    'use strict';\n\n    var environment = {};\n\n    environment.parseEnvFromPcastBaseUri = function (uri) {\n        uri = uri.toLowerCase();\n\n        if (uri.indexOf('local') > -1) {\n            return 'local';\n        } else if (uri.indexOf('stg') > -1) {\n            return 'staging';\n        }\n\n        return 'production';\n    };\n\n    return environment;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/environment.js\n// module id = 19\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    './Stream',\n    './member.json'\n], function (_, assert, observable, Stream, member) {\n    'use strict';\n    var memberRoles = member.roles;\n    var memberStates = member.states;\n\n    function Member(roomService, state, sessionId, screenName, role, streams, lastUpdate) {\n        this.init(roomService, state, sessionId, screenName, role, streams, lastUpdate);\n    }\n\n    Member.prototype.init = function init(roomService, state, sessionId, screenName, role, streams, lastUpdate) {\n        assert.isString(sessionId, 'sessionId');\n        assert.isString(screenName, 'screenName');\n        assert.isArray(streams, 'streams');\n        assert.isNumber(_.utc(lastUpdate), 'lastUpdate');\n\n        if (roomService) {\n            assert.isObject(roomService);\n        }\n\n        this._sessionId = new observable.Observable(sessionId);\n        this._screenName = new observable.Observable(screenName);\n        this._streams = new observable.ObservableArray([]);\n\n        this._state = new observable.Observable(state, assertIsValidMemberState).extend({rateLimit: 500});\n        this._role = new observable.Observable(role, assertIsValidMemberRole);\n        this._lastUpdate = new observable.Observable(lastUpdate, _.utc);\n        this._roomService = roomService;\n\n        this.setStreams(streams);\n    };\n\n    Member.prototype.getObservableState = function getObservableState() {\n        return this._state;\n    };\n\n    Member.prototype.getSessionId = function getSessionId() {\n        return this._sessionId.getValue();\n    };\n\n    Member.prototype.getObservableScreenName = function getObservableScreenName() {\n        return this._screenName;\n    };\n\n    Member.prototype.getObservableRole = function getObservableRole() {\n        return this._role;\n    };\n\n    Member.prototype.getObservableStreams = function getObservableStreams() {\n        return this._streams;\n    };\n\n    Member.prototype.getObservableLastUpdate = function getObservableLastUpdate() {\n        return this._lastUpdate;\n    };\n\n    Member.prototype.getLastUpdate = function getLastUpdate() {\n        return this._lastUpdate.getValue();\n    };\n\n    Member.prototype.getStreams = function getStreams() {\n        return _.map(this._streams.getValue(), function mapToJson(stream) {\n            return stream.toJson();\n        });\n    };\n\n    Member.prototype.commitChanges = function commitChanges(callback) {\n        assert.isObject(this._roomService);\n\n        this._roomService.updateMember(this, callback);\n    };\n\n    Member.prototype.reload = function reload() {\n        assert.isObject(this._roomService);\n\n        this._roomService.revertMemberChanges(this);\n    };\n\n    Member.prototype.setStreams = function setStreams(streams) {\n        var newStreams = _.map(streams, function(stream) {\n            return createNewObservableStream(stream);\n        });\n\n        this._streams.setValue(newStreams);\n    };\n\n    Member.prototype.toString = function toString() {\n        return this.getObservableRole().getValue() + '[' + this.getObservableScreenName().getValue() + ',' + this.getSessionId() + ']';\n    };\n\n    Member.prototype.toJson = function toJson() {\n        var member = {\n            sessionId: this._sessionId.getValue(),\n            screenName: this._screenName.getValue(),\n            role: this._role.getValue(),\n            state: this._state.getValue(),\n            streams: [],\n            lastUpdate: this._lastUpdate.getValue()\n        };\n\n        _.forEach(this._streams.getValue(), function(stream) {\n            member.streams.push(stream.toJson());\n        });\n\n        return member;\n    };\n\n    Member.prototype._update = function update(member) {\n        if (!_.isObject(member)) {\n            return;\n        }\n\n        if (member.hasOwnProperty('state')) {\n            this._state.setValue(member.state);\n        }\n\n        if (member.hasOwnProperty('screenName')) {\n            this._screenName.setValue(member.screenName);\n        }\n\n        if (member.hasOwnProperty('role')) {\n            this._role.setValue(member.role);\n        }\n\n        if (member.hasOwnProperty('lastUpdate')) {\n            this._lastUpdate.setValue(member.lastUpdate);\n        }\n\n        if (member.hasOwnProperty('streams')) {\n            updateStreams.call(this, member.streams);\n        }\n    };\n\n    function createNewObservableStream(stream) {\n        return new Stream(stream.uri, stream.type, stream.audioState, stream.videoState);\n    }\n\n    function updateStreams(streams) {\n        // Iterate through new streams object, update those that have changed, push new ones, remove old ones\n        var oldObservableStreams = this._streams.getValue();\n        var newObservableStreams = [];\n\n        _.forEach(streams, function (stream) {\n            var streamToUpdate = _.find(oldObservableStreams, function(observableStream) {\n                return observableStream.getUri() === stream.uri && observableStream.getType() === stream.type;\n            });\n\n            if (streamToUpdate) {\n                streamToUpdate._update(stream);\n            } else {\n                streamToUpdate = createNewObservableStream(stream);\n            }\n\n            newObservableStreams.push(streamToUpdate);\n        });\n\n        this._streams.setValue(newObservableStreams);\n    }\n\n    function assertIsValidMemberRole(role) {\n        role = _.getEnumName(memberRoles, role);\n\n        if (!role) {\n            throw new Error('\"role\" must be a valid member role');\n        }\n\n        return role;\n    }\n\n    function assertIsValidMemberState(state) {\n        state = _.getEnumName(memberStates, state);\n\n        if (!state) {\n            throw new Error('\"state\" must be a valid member state');\n        }\n\n        return state;\n    }\n\n    return Member;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/Member.js\n// module id = 20\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    './Member',\n    './room.json'\n], function (_, assert, observable, Member, room) {\n    'use strict';\n    var roomTypes = room.types;\n\n    function Room(roomService, id, alias, name, description, type, members, bridgeId, pin) {\n        this.init(roomService, id, alias, name, description, type, members, bridgeId, pin);\n    }\n\n    Room.prototype.init = function init(roomService, id, alias, name, description, type, members, bridgeId, pin) {\n        assert.stringNotEmpty(name, 'name');\n        assert.stringNotEmpty(description, 'description');\n        assert.isArray(members, 'members');\n\n        if (id) {\n            assert.stringNotEmpty(id, 'id');\n        }\n\n        if (alias) {\n            assert.stringNotEmpty(alias, 'alias');\n        }\n\n        if (bridgeId) {\n            assert.stringNotEmpty(bridgeId, 'bridgeId');\n        }\n\n        if (pin) {\n            assert.stringNotEmpty(pin, 'pin');\n        }\n\n        if (roomService) {\n            assert.isObject(roomService, 'roomService');\n        }\n\n        this._roomId = new observable.Observable(id);\n        this._alias = new observable.Observable(alias);\n        this._name = new observable.Observable(name);\n        this._description = new observable.Observable(description);\n        this._type = new observable.Observable(type, assertIsValidRoomType);\n        this._members = new observable.ObservableArray([]).extend({\n            method: \"notifyWhenChangesStop\",\n            timeout: 400\n        });\n        this._options = new observable.ObservableArray();\n        this._bridgeId = new observable.Observable(bridgeId);\n        this._pin = new observable.Observable(pin);\n        this._roomService = roomService;\n\n        setMembers.call(this, members);\n    };\n\n    Room.prototype.getRoomId = function getRoomId() {\n        return this._roomId.getValue();\n    };\n\n    Room.prototype.getObservableAlias = function getObservableAlias() {\n        return this._alias;\n    };\n\n    Room.prototype.getObservableName = function getObservableName() {\n        return this._name;\n    };\n\n    Room.prototype.getObservableDescription = function getObservableDescription() {\n        return this._description;\n    };\n\n    Room.prototype.getObservableType = function getObservableType() {\n        return this._type;\n    };\n\n    Room.prototype.getObservableMembers = function getObservableMembers() {\n        return this._members;\n    };\n\n    Room.prototype.getObservableBridgeId = function getObservableBridgeId() {\n        return this._bridgeId;\n    };\n\n    Room.prototype.getObservablePin = function getObservablePin() {\n        return this._pin;\n    };\n\n    Room.prototype.toString = function toString() {\n        return this._type.getValue() + '[' + this._roomId.getValue() + ']';\n    };\n\n    Room.prototype.toJson = function toJson() {\n        return {\n            roomId: this._roomId.getValue(),\n            alias: this._alias.getValue(),\n            name: this._name.getValue(),\n            description: this._description.getValue(),\n            type: this._type.getValue(),\n            pin: this._pin.getValue(),\n            bridgeId: this._bridgeId.getValue()\n        };\n    };\n\n    Room.prototype.commitChanges = function commitChanges(callback) {\n        assert.isObject(this._roomService);\n\n        this._roomService.updateRoom(this, callback);\n    };\n\n    Room.prototype.reload = function reload() {\n        assert.isObject(this._roomService);\n\n        this._roomService.revertRoomChanges(this);\n    };\n\n    Room.prototype._update = function update(room) {\n        if (!_.isObject(room)) {\n            return;\n        }\n\n        if (room.roomId) {\n            this._roomId.setValue(room.roomId);\n        }\n\n        if (room.alias) {\n            this._alias.setValue(room.alias);\n        }\n\n        if (room.name) {\n            this._name.setValue(room.name);\n        }\n\n        if (room.description) {\n            this._description.setValue(room.description);\n        }\n\n        if (room.type) {\n            this._type.setValue(room.type);\n        }\n\n        if (room.options) {\n            this._options.setValue(room.options);\n        }\n\n        if (room.bridgeId) {\n            this._bridgeId.setValue(room.bridgeId);\n        }\n\n        if (room.pin) {\n            this._pin.setValue(room.pin);\n        }\n\n        if (room.members) {\n            // DO NOTHING -- members updated by member events\n        }\n    };\n\n    Room.prototype._addMembers = function addMembers(members) {\n        var that = this;\n\n        var newMembers = mapMembers(members);\n\n        _.forEach(newMembers, function (member) {\n            that._members.push(member);\n        });\n    };\n\n    Room.prototype._removeMembers = function removeMembers(members) {\n        var that = this;\n\n        _.forEach(members, function(member) {\n            that._members.remove(function(observableMember) {\n                return member.sessionId === observableMember.getSessionId()\n                    && member.lastUpdate >= observableMember.getObservableLastUpdate().getValue();\n            });\n        });\n    };\n\n    Room.prototype._updateMembers = function updateMembers(members) {\n        _.forEach(this._members.getValue(), function (observableMember) {\n            var memberToUpdate = _.find(members, function(member) {\n                return observableMember.getSessionId() === member.sessionId && member.lastUpdate > observableMember.getObservableLastUpdate().getValue();\n            });\n\n            if (memberToUpdate) {\n                observableMember._update(memberToUpdate);\n            }\n        });\n    };\n\n    function setMembers(members) {\n        var newMembers = mapMembers(members, this._roomService);\n\n        this._members.setValue(newMembers);\n    }\n\n    function mapMembers(members, roomService) {\n        return _.map(members, function(member) {\n            return new Member(roomService, member.state, member.sessionId, member.screenName, member.role, member.streams, member.lastUpdate);\n        });\n    }\n\n    function assertIsValidRoomType(type) {\n        type = _.getEnumName(roomTypes, type);\n\n        if (!type) {\n            throw new Error('\"type\" must be a valid room type');\n        }\n\n        return type;\n    }\n\n    return Room;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/Room.js\n// module id = 21\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    '../logging/pcastLoggerFactory',\n    '../PCastEndPoint',\n    './AudioContext',\n    './AudioVolumeMeterFactory',\n    './AudioSpeakerDetectionAlgorithm'\n], function (_, assert, pcastLoggerFactory, PCastEndPoint, AudioContext, AudioVolumeMeterFactory, AudioSpeakerDetectionAlgorithm) {\n    'use strict';\n\n    function AudioSpeakerDetector(userMediaStreams, options) {\n        assert.isArray(userMediaStreams, 'userMediaStreams');\n\n        options = options || {};\n\n        this._baseUri = options.uri || PCastEndPoint.DefaultPCastUri;\n        this._logger = options.logger || pcastLoggerFactory.createPCastLogger(this._baseUri);\n        this._audioContext = options.audioContext || new AudioContext();\n        this._nativeAudioContext = this._audioContext.getNativeAudioContext();\n        this._onSpeakingChanged = null;\n        this._userMediaStreams = userMediaStreams;\n        this._disposeOfAudioContext = !_.isObject(options.audioContext);\n        this._audioVolumeMeterFactory = new AudioVolumeMeterFactory(this._logger);\n\n        _.forEach(this._userMediaStreams, _.bind(setupAudioVolumeMeter, this, options));\n    }\n\n    AudioSpeakerDetector.prototype.start = function start(options, callback) {\n        assert.isFunction(callback, 'callback');\n\n        this._onSpeakingChanged = callback;\n\n        options = options || {};\n\n        _.forEach(this._userMediaStreams, _.bind(setupSpeakingDetection, this, options));\n    };\n\n    AudioSpeakerDetector.prototype.stop = function stop() {\n        _.forEach(this.getAudioVolumeMeters(), function(meter) {\n            meter.onValue(function() {});\n        });\n\n        this._onSpeakingChanged = null;\n    };\n\n    AudioSpeakerDetector.prototype.getAudioVolumeMeter = function getAudioVolumeMeter(stream) {\n        assert.isObject(stream, 'stream');\n\n        return this._audioVolumeMeterFactory.getAudioVolumeMeter(stream);\n    };\n\n    AudioSpeakerDetector.prototype.getAudioVolumeMeters = function getAudioVolumeMeters() {\n        return this._audioVolumeMeterFactory.getAudioVolumeMeters();\n    };\n\n    AudioSpeakerDetector.prototype.dispose = function dispose() {\n        if (this._disposeOfAudioContext) {\n            this._nativeAudioContext.close();\n        }\n\n        this._audioVolumeMeterFactory.stopAllMeters();\n\n        this._userMediaStreams = null;\n    };\n\n    AudioSpeakerDetector.prototype.toString = function toString() {\n        return 'AudioSpeakerDetector';\n    };\n\n    function setupAudioVolumeMeter(options, stream) {\n        assert.isObject(stream, 'stream');\n        assert.isObject(options, 'options');\n\n        var audioVolumeMeter = this._audioVolumeMeterFactory.getAudioVolumeMeter(stream);\n\n        audioVolumeMeter.init(this._nativeAudioContext, options.alpha);\n        audioVolumeMeter.connect(stream);\n    }\n\n    function setupSpeakingDetection(options, stream) {\n        assert.isObject(stream, 'stream');\n        assert.isObject(options, 'options');\n\n        var audioVolumeMeter = this._audioVolumeMeterFactory.getAudioVolumeMeter(stream);\n        var audioSpeakerDetectionAlgorithm = new AudioSpeakerDetectionAlgorithm(this._logger);\n\n        if (options.alpha) {\n            audioVolumeMeter.setAlpha(options.alpha);\n        }\n\n        audioSpeakerDetectionAlgorithm.onValue(this._onSpeakingChanged);\n        audioSpeakerDetectionAlgorithm.startDetection(audioVolumeMeter, options);\n    }\n\n    return AudioSpeakerDetector;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/audio/AudioSpeakerDetector.js\n// module id = 22\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    '../logging/pcastLoggerFactory',\n    '../PCastEndPoint',\n    './PublisherBandwidthAdjuster'\n], function (_, assert, pcastLoggerFactory, PCastEndPoint, PublisherBandwidthAdjuster) {\n    'use strict';\n\n    function BandwidthMonitor(publishers, options) {\n        assert.isArray(publishers, 'userMediaStreams');\n\n        options = options || {};\n\n        this._baseUri = options.uri || PCastEndPoint.DefaultPCastUri;\n        this._logger = options.logger || pcastLoggerFactory.createPCastLogger(this._baseUri);\n        this._publisherAdjusters = [];\n        this._publishers = publishers;\n    }\n\n    BandwidthMonitor.prototype.start = function start(roomService, options) {\n        options = options || {};\n\n        _.forEach(this._publishers, _.bind(setupPublisherAdjusters, this, roomService, options));\n    };\n\n    BandwidthMonitor.prototype.stop = function stop() {\n        _.forEach(this._publisherAdjusters, function closePublisherAdjusters(adjuster) {\n            adjuster.close();\n        });\n\n        this._publisherAdjusters = [];\n    };\n\n    BandwidthMonitor.prototype.toString = function toString() {\n        return 'BandwidthMonitor';\n    };\n\n    function setupPublisherAdjusters(roomService, options, publisher) {\n        var publisherAdjuster = new PublisherBandwidthAdjuster(publisher);\n\n        publisherAdjuster.connect(roomService, options);\n\n        this._publisherAdjusters.push(publisherAdjuster);\n    }\n\n    return BandwidthMonitor;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/bandwidth/BandwidthMonitor.js\n// module id = 23\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    './PCastExpress',\n    '../room/room.json',\n    '../room/member.json'\n], function (_, assert, PCastExpress, roomEnums, memberEnums) {\n    'use strict';\n\n    function RoomExpress(options) {\n        assert.isObject(options, 'options');\n        assert.stringNotEmpty(options.backendUri, 'options.backendUri');\n        assert.isObject(options.authenticationData, 'options.authenticationData');\n\n        this._pcastExpress = new PCastExpress(options);\n        this._roomServices = [];\n    }\n\n    RoomExpress.prototype.stop = function stop() {\n        this._pcastExpress.stop();\n    };\n\n    RoomExpress.prototype.getPCastExpress = function getPCastExpress() {\n        return this._pcastExpress;\n    };\n\n    RoomExpress.prototype.createRoom = function createRoom(options, callback) {\n        assert.isFunction(callback, 'callback');\n        assert.isObject(options.room, 'options.room');\n        assert.stringNotEmpty(options.room.name, 'options.room.name');\n        assert.stringNotEmpty(options.room.type, 'options.room.type');\n\n        if (options.room.description) {\n            assert.stringNotEmpty(options.room.description, 'options.room.description');\n        }\n\n        var roomDescription = options.room.description || getDefaultRoomDescription(options.room.type);\n\n        this._pcastExpress.createRoomService(function(error, roomServiceResponse) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (roomServiceResponse.status !== 'ok') {\n                return callback(null, roomServiceResponse);\n            }\n\n            var roomService = roomServiceResponse.roomService;\n            var roomToCreate = _.assign({}, options.room);\n\n            if (!roomToCreate.description) {\n                roomToCreate.description = roomDescription;\n            }\n\n            roomService.createRoom(roomToCreate, function (error, roomResponse) {\n                if (error) {\n                    roomService.stop();\n\n                    return callback(error);\n                }\n\n                if (roomResponse.status !== 'already-exists' && roomResponse.status !== 'ok') {\n                    roomService.stop();\n                }\n\n                roomResponse.roomService = roomService;\n\n                return callback(null, roomResponse);\n            });\n        });\n    };\n\n    RoomExpress.prototype.createChannel = function createChannel(options, callback) {\n        assert.isObject(options, 'options');\n        assert.isObject(options.room, 'options.room');\n\n        var createRoomOptions = _.assign({}, options);\n\n        createRoomOptions.room.type = roomEnums.types.channel.name;\n\n        this.createRoom(createRoomOptions, callback);\n    };\n\n    RoomExpress.prototype.joinRoom = function joinRoom(options, joinRoomCallback, membersChangedCallback) {\n        assert.isObject(options, 'options');\n        assert.isFunction(joinRoomCallback, 'joinRoomCallback');\n        assert.isFunction(membersChangedCallback, 'membersChangedCallback');\n        assert.stringNotEmpty(options.role, 'options.role');\n\n        if (options.screenName) {\n            assert.stringNotEmpty(options.screenName, 'options.screenName');\n        }\n\n        if (options.roomId) {\n            assert.stringNotEmpty(options.roomId, 'options.roomId');\n        }\n\n        if (options.alias) {\n            assert.stringNotEmpty(options.alias, 'options.alias');\n        }\n\n        var that = this;\n        var role = options.role;\n        var screenName = options.screenName || _.uniqueId();\n\n        this._pcastExpress.createRoomService(function(error, roomServiceResponse) {\n            if (error) {\n                return joinRoomCallback(error);\n            }\n\n            if (roomServiceResponse.status !== 'ok') {\n                return joinRoomCallback(null, roomServiceResponse);\n            }\n\n            var roomService = roomServiceResponse.roomService;\n\n            that._roomServices.push(roomService);\n\n            roomService.start(role, screenName);\n\n            roomService.enterRoom(options.roomId, options.alias, function(error, roomResponse) {\n                if (error) {\n                    roomService.stop();\n\n                    return joinRoomCallback(error);\n                }\n\n                if (roomResponse.status === 'not-found') {\n                    roomService.stop();\n\n                    return joinRoomCallback(null, {status: 'room-not-found'});\n                }\n\n                if (roomResponse.status !== 'ok') {\n                    roomService.stop();\n\n                    return joinRoomCallback(null, roomResponse);\n                }\n\n                var room = roomResponse.room;\n                var roomServiceLeaveRoom = roomService.leaveRoom;\n\n                roomService.leaveRoom = function leaveRoom(callback) {\n                    roomServiceLeaveRoom.call(roomService, function(error, response) {\n                        if (error) {\n                            roomService.stop();\n\n                            return callback(error);\n                        }\n\n                        if (response.status !== 'ok') {\n                            return callback(null, response);\n                        }\n\n                        roomService.stop();\n                    });\n                };\n\n                joinRoomCallback(null, {\n                    status: 'ok',\n                    roomService: roomService\n                });\n\n                that._membersSubscription = room.getObservableMembers().subscribe(membersChangedCallback, {initial: 'notify'});\n            });\n        });\n    };\n\n    RoomExpress.prototype.joinChannel = function joinChannel(options, joinChannelCallback, subscriberCallback) {\n        assert.isObject(options, 'options');\n        assert.isFunction(joinChannelCallback, 'joinChannelCallback');\n        assert.isFunction(subscriberCallback, 'subscriberCallback');\n\n        if (options.videoElement) {\n            assert.isObject(options.videoElement, 'options.videoElement');\n        }\n\n        var channelOptions = _.assign({\n            type: roomEnums.types.channel.name,\n            role: memberEnums.roles.audience.name\n        }, options);\n        var lastMediaStream;\n        var lastStreamId;\n        var that = this;\n\n        var joinRoomCallback = function(error, response) {\n            var channelResponse = !response || _.assign({}, response);\n\n            if (response && response.roomService) {\n                var leaveRoom = response.roomService.leaveRoom;\n\n                channelResponse.roomService.leaveRoom = function(callback) {\n                    if (lastMediaStream) {\n                        lastMediaStream.stop();\n                    }\n\n                    leaveRoom(callback);\n                };\n            }\n\n            joinChannelCallback(error, channelResponse);\n        };\n\n        this.joinRoom(channelOptions, joinRoomCallback, function membersChangedCallback(members) {\n            var presenters = _.filter(members, function(member) {\n                return member.getObservableRole().getValue() === memberEnums.roles.presenter.name;\n            });\n            var mostRecentPresenter = _.reduce(presenters, function(presenterA, presenterB) {\n                if (!presenterA) {\n                    return presenterB;\n                }\n\n                return presenterA.getLastUpdate() > presenterB.getLastUpdate() ? presenterA : presenterB;\n            });\n\n            if (!mostRecentPresenter) {\n                return subscriberCallback(null, {status: 'no-stream-playing'});\n            }\n\n            var presenterStream = mostRecentPresenter.getObservableStreams().getValue()[0];\n\n            if (!presenterStream) {\n                return subscriberCallback(null, {status: 'no-stream-playing'});\n            }\n\n            var streamId = parsePcastFromStream(presenterStream.getUri());\n\n            if (!streamId) {\n                return subscriberCallback(null, {status: 'no-stream-playing'});\n            }\n\n            if (streamId === lastStreamId) {\n                return;\n            } else if (lastStreamId) {\n                lastMediaStream.stop();\n            }\n\n            var subscribeOptions = {\n                capabilities: options.capabilities,\n                videoElement: options.videoElement,\n                streamId: streamId,\n                monitor: {\n                    callback: _.bind(monitorSubsciberOrPublisher, that, subscriberCallback),\n                    options: {conditionCountForNotificationThreshold: 8}\n                }\n            };\n\n            var successReason = lastStreamId ? 'stream-override' : 'stream-started';\n\n            lastStreamId = streamId;\n\n            var mediaStreamCallback = function mediaStreamCallback(error, response) {\n                if (response && response.mediaStream) {\n                    lastMediaStream = response.mediaStream;\n                } else {\n                    lastStreamId = null;\n                    lastMediaStream = null;\n                }\n\n                subscriberCallback(error, response);\n            };\n\n            subscribeToMemberStream.call(that, subscribeOptions, mediaStreamCallback, successReason);\n        });\n    };\n\n    RoomExpress.prototype.publishToRoom = function publishToRoom(options, callback) {\n        assert.isObject(options, 'options');\n        assert.isFunction(callback, 'callback');\n        assert.isObject(options.room, 'options.room');\n\n        if (options.streamUri) {\n            assert.stringNotEmpty(options.streamUri, 'options.streamUri');\n        } else if (options.mediaConstraints) {\n            assert.isObject(options.mediaConstraints, 'options.mediaConstraints');\n        } else {\n            assert.isObject(options.userMediaStream, 'options.userMediaStream');\n        }\n\n        if (options.videoElement) {\n            assert.isObject(options.videoElement, 'options.videoElement');\n        }\n\n        if (options.screenName) {\n            assert.stringNotEmpty(options.screenName, 'options.screenName');\n        }\n\n        if (options.capabilities) {\n            assert.isArray(options.capabilities);\n        }\n\n        if (options.tags) {\n            assert.isArray(options.tags);\n        }\n\n        var that = this;\n        var role = memberEnums.roles.audience.name;\n        var screenName = options.screenName || _.uniqueId();\n\n        this.createRoom(options, function(error, createRoomResponse) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (createRoomResponse.status !== 'ok' && createRoomResponse.status !== 'already-exists') {\n                return callback(null, createRoomResponse);\n            }\n\n            var roomService = createRoomResponse.roomService;\n            var room = createRoomResponse.room;\n\n            roomService.start(role, screenName);\n\n            var publishOptions = _.assign({\n                monitor: {\n                    callback: _.bind(monitorSubsciberOrPublisher, that, callback),\n                    options: {conditionCountForNotificationThreshold: 8}\n                }\n            }, options);\n\n            if (options.streamUri) {\n                var remoteOptions = _.assign({connectOptions: []}, publishOptions);\n                var hasRoomConnectOptions = _.find(remoteOptions.connectOptions, function(option) {\n                    return option.startsWith('room-id');\n                });\n\n                if (!hasRoomConnectOptions) {\n                    remoteOptions.connectOptions = remoteOptions.connectOptions.concat([\n                        'room-id=' + room.getRoomId(),\n                        'member-role=Presenter',\n                        'member-stream-type=Presentation',\n                        'screen-name=' + screenName\n                    ]);\n                }\n\n                that._pcastExpress.publishRemote(remoteOptions, callback);\n            } else if (room.getObservableType().getValue() === roomEnums.types.channel.name) {\n                var localOptions = _.assign({tags: []}, publishOptions);\n                var hasChannelTag = _.find(localOptions.tags, function(tag) {\n                    return tag.startsWith('channelId');\n                });\n\n                if (!hasChannelTag) {\n                    localOptions.tags = localOptions.tags.concat([\n                        'channelId:' + room.getRoomId()\n                    ]);\n                }\n\n                if (!_.includes(localOptions.capabilities, 'channel')) {\n                    localOptions.capabilities.push('channel');\n                }\n\n                that._pcastExpress.publish(localOptions, callback);\n            }\n        });\n    };\n\n    RoomExpress.prototype.publishToChannel = function publishToChannel(options, callback) {\n        assert.isObject(options, 'options');\n        assert.isFunction(callback, 'callback');\n\n        var channelOptions = _.assign({}, options);\n\n        options.room.type = roomEnums.types.channel.name;\n\n        this.publishToRoom(channelOptions, callback);\n    };\n\n    function subscribeToMemberStream(subscribeOptions, callback, successReason) {\n        var that = this;\n\n        var count = 0;\n\n        that._pcastExpress.subscribe(subscribeOptions, function(error, response) {\n            if (error) {\n                return callback(error);\n            }\n\n            if (response.status !== 'ok' && response.status !== 'streaming-not-ready') {\n                return callback(null, response);\n            }\n\n            count++;\n\n            if (response.status === 'streaming-not-ready' && count < 3) {\n                return setTimeout(response.retry, count * count * 1000);\n            } else if (response.status === 'streaming-not-ready' && count >= 3) {\n                return callback(null, {status: response.status});\n            }\n\n            var subscribeResponse = _.assign({}, response, {\n                status: 'ok',\n                reason: successReason\n            });\n\n            if (count > 1) {\n                subscribeResponse.reason = 'stream-failure-recovered';\n\n                return callback(null, subscribeResponse);\n            }\n\n            callback(null, subscribeResponse);\n        });\n    }\n\n    function monitorSubsciberOrPublisher(callback, error, response) {\n        if (error) {\n            return callback(error);\n        }\n\n        if (response.retry) {\n            return response.retry();\n        }\n\n        callback(error, response);\n    }\n\n    function getDefaultRoomDescription(type) {\n        switch(type) {\n        case roomEnums.types.channel.name:\n            return 'Room Channel';\n        case roomEnums.types.moderatedChat.name:\n            return 'Moderated Chat';\n        case roomEnums.types.multiPartyChat.name:\n            return 'Multi Party Chat';\n        case roomEnums.types.townHall.name:\n            return 'Town Hall';\n        case roomEnums.types.directChat.name:\n            return 'Direct Chat';\n        default:\n            throw new Error('Unsupported Room Type');\n        }\n    }\n\n    var pcastStreamPrefix = 'pcast://phenixp2p.com/';\n\n    function parsePcastFromStream(uri) {\n        var hasPrefix = uri.indexOf(pcastStreamPrefix) > -1;\n\n        if (!hasPrefix) {\n            return null;\n        }\n\n        return uri.replace(pcastStreamPrefix, '');\n    }\n\n    function addPublishedStreams(publishedStream) { // eslint-disable-line no-unused-vars\n        var self = this._roomService.getSelf();\n        var streams = self.getStreams();\n\n        publishedStream.uri = 'pcast://phenixp2p.com/' + publishedStream.uri;\n        streams.push(publishedStream);\n        self.setStreams(streams);\n    }\n\n    return RoomExpress;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/express/RoomExpress.js\n// module id = 24\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light'\n], function (_) {\n    var Assert = function() {\n\n    };\n\n    Assert.prototype.isObject = function isObject(obj, name) {\n        var error = '\"' + name + '\" must be an object';\n\n        if (!_.isObject(obj)) {\n            throw new Error(error);\n        }\n    };\n\n    Assert.prototype.isArray = function isArray(array, name) {\n        var error = '\"' + name + '\" must be an array';\n\n        if (!_.isArray(array)) {\n            throw new Error(error);\n        }\n    };\n\n    Assert.prototype.isString = function isString(string, name) {\n        var error = '\"' + name + '\" must be a string';\n\n        if (!_.isString(string)) {\n            throw new Error(error);\n        }\n    };\n\n    Assert.prototype.isBoolean = function isBoolean(bool, name) {\n        var error = '\"' + name + '\" must be a string';\n\n        if (!_.isBoolean(bool)) {\n            throw new Error(error);\n        }\n    };\n\n    Assert.prototype.isNumber = function isNumber(number, name) {\n        var error = '\"' + name + '\" must be a number';\n\n        if (!_.isNumber(number)) {\n            throw new Error(error);\n        }\n    };\n\n    Assert.prototype.isFunction = function isFunction(callback, name) {\n        var error = '\"' + name + '\" must be a function';\n\n        if (!_.isFunction(callback)) {\n            throw new Error(error);\n        }\n    };\n\n    Assert.prototype.stringNotEmpty = function stringNotEmpty(string, name) {\n        var error = '\"' + name + '\" must not be empty';\n\n        this.isString(string, name);\n\n        if (string === '') {\n            throw new Error(error);\n        }\n    };\n\n    return new Assert();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-assert/src/assert.js\n// module id = 25\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert'\n], function (_, assert) {\n    'use strict';\n\n    var requestMethods = {\n        get: 'GET',\n        post: 'POST'\n    };\n    var defaultTimeout = 3000;\n\n    function Http() {\n\n    }\n\n    Http.prototype.get = function get(url, settings, callback) {\n        settings = settings || {};\n\n        validateSettings(settings);\n\n        var requestUrl = appendQueryParameters(settings.queryParameters || {}, url);\n        var xhr = getAndOpenVendorSpecificXmlHttpMethod(requestMethods.get, requestUrl, callback);\n\n        if (!xhr) {\n            return callback(getUnsupportedError());\n        }\n\n        if (settings.mimeType) {\n            xhr.overrideMimeType(settings.mimeType);\n        }\n\n        appendDataTypeHeaders(xhr, settings);\n\n        xhr.addEventListener('readystatechange', _.bind(handleReadyStateChange, this, xhr, callback));\n\n        xhr.timeout = settings.timeout || defaultTimeout;\n\n        xhr.send();\n    };\n\n    Http.prototype.post = function postWithRetry(url, data, settings, callback) {\n        settings = settings || {};\n\n        validateSettings(settings);\n\n        var requestUrl = appendQueryParameters(settings.queryParameters || {}, url);\n        var xhr = getAndOpenVendorSpecificXmlHttpMethod(requestMethods.post, requestUrl, callback);\n\n        if (!xhr) {\n            return callback(getUnsupportedError());\n        }\n\n        appendDataTypeHeaders(xhr, settings);\n\n        xhr.addEventListener('readystatechange', _.bind(handleReadyStateChange, this, xhr, callback));\n\n        xhr.timeout = settings.timeout || 15000;\n\n        xhr.send(data);\n    };\n\n    Http.prototype.getWithRetry = function getWithRetry(url, settings, callback, maxAttempts, attempt) {\n        if (!_.isNumber(attempt)) {\n            attempt = 1;\n        }\n\n        var shouldRetry = attempt < maxAttempts;\n        var retry = _.bind(getWithRetry, this, url, settings, callback, maxAttempts, attempt + 1);\n        var getRetryCallback = _.bind(retryCallback, this, shouldRetry, retry, callback);\n\n        this.get(url, settings, getRetryCallback);\n    };\n\n    Http.prototype.postWithRetry = function postWithRetry(url, data, settings, callback, maxAttempts, attempt) {\n        if (!_.isNumber(attempt)) {\n            attempt = 1;\n        }\n\n        var shouldRetry = attempt < maxAttempts;\n        var retry = _.bind(postWithRetry, this, url, data, settings, callback, maxAttempts, attempt + 1);\n        var postRetryCallback = _.bind(retryCallback, this, shouldRetry, retry, callback);\n\n        this.post(url, data, settings, postRetryCallback);\n    };\n\n    function validateSettings(settings) {\n        assert.isObject(settings, 'settings');\n\n        if (settings.queryParameters) {\n            assert.isObject(settings.queryParameters, 'settings.queryParameters');\n        }\n\n        if (settings.mimeType) {\n            assert.stringNotEmpty(settings.mimeType, 'settings.mimeType');\n        }\n\n        if (settings.responseType) {\n            assert.stringNotEmpty(settings.responseType, 'settings.responseType');\n        }\n\n        if (settings.contentType) {\n            assert.stringNotEmpty(settings.contentType, 'settings.contentType');\n        }\n\n        if (!_.isNullOrUndefined(settings.timeout)) {\n            assert.isNumber(settings.timeout, 'settings.timeout');\n        }\n    }\n\n    function appendQueryParameters(queryParameters, url) {\n        var queryParameterString = _.reduce(queryParameters, function(paramString, value, key) {\n            paramString += !paramString ? '?' : '&';\n\n            return paramString + key.toString() + '=' + value.toString();\n        }, '');\n\n        return queryParameterString.length > 0 ? url + queryParameterString : url;\n    }\n\n    function getAndOpenVendorSpecificXmlHttpMethod(requestMethod, requestUrl) {\n        var xhr = new XMLHttpRequest();\n\n        if ('withCredentials' in xhr) {\n            // Most browsers.\n            xhr.open(requestMethod, requestUrl, true);\n        } else if (typeof XDomainRequest !== 'undefined') {\n            // IE8 & IE9\n            xhr = new XDomainRequest();\n            xhr.open(requestMethod, requestUrl);\n        } else {\n            return;\n        }\n\n        return xhr;\n    }\n\n    function getUnsupportedError() {\n        // CORS not supported.\n        var err = new Error('unsupported');\n\n        err.code = 'unsupported';\n\n        return err;\n    }\n\n    function appendDataTypeHeaders(xhr, settings) {\n        var contentType = !settings.contentType ? 'application/json' : settings.contentType;\n        var responseType = !settings.responseType ? settings.contentType || 'application/json' : settings.responseType;\n\n        switch (contentType.toLowerCase()) {\n        case 'application/protobuf':\n            xhr.setRequestHeader('Content-type', 'application/protobuf');\n\n            break;\n        case 'application/json':\n            xhr.setRequestHeader('Content-type', 'application/json');\n\n            break;\n        default:\n            xhr.setRequestHeader('Content-type', contentType);\n\n            break;\n        }\n\n        switch (responseType.toLowerCase()) {\n        case 'application/protobuf':\n            xhr.setRequestHeader('Accept', 'application/protobuf');\n\n            break;\n        case 'application/json':\n            xhr.setRequestHeader('Accept', 'application/json');\n\n            break;\n        default:\n            xhr.setRequestHeader('Accept', responseType);\n\n            break;\n        }\n    }\n\n    function handleReadyStateChange(xhr, callback) {\n        if (xhr.readyState === 4 /* DONE */) {\n            if (xhr.status === 200) {\n                callback(null, xhr.responseText);\n            } else {\n                var err = new Error(xhr.status === 0 ? 'timeout' : xhr.statusText);\n                err.code = xhr.status;\n\n                if (xhr.status >= 500 && xhr.status < 600) {\n                    err.retryable = true;\n                }\n\n                callback(err);\n            }\n        }\n    }\n\n    function retryCallback(shouldRetry, retry, callback, err, response) {\n        if (err) {\n            if (shouldRetry && err.retryable) {\n                retry();\n            } else {\n                callback(err);\n            }\n        } else {\n            callback(null, response);\n        }\n    }\n\n    return new Http();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-http/src/http.js\n// module id = 26\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var _ = function() {\n\n    };\n\n    _.bind = function bind(callback, that) {\n        var argsAfterContext = Array.prototype.slice.call(arguments, 2);\n\n        return function boundFunction() {\n            if (!_.isFunction(callback)) {\n                throw new TypeError('_.bind - callback must be a function');\n            }\n\n            var combinedArguments = argsAfterContext.concat(Array.prototype.slice.call(arguments));\n\n            return callback.apply(that, combinedArguments);\n        };\n    };\n\n    _.now = function now() {\n        return new Date().getTime();\n    };\n\n    _.utc = function utc(date) {\n        if (_.isNumber(date)) {\n            return date;\n        } else if (!date) {\n            return NaN;\n        }\n\n        return Math.floor(date);\n    };\n\n    _.isoString = function isoString() {\n        var now = new Date();\n\n        if (now.toISOString) {\n            return now.toISOString();\n        }\n\n        return now.getUTCFullYear() +\n            '-' + _.pad(now.getUTCMonth() + 1, 2) +\n            '-' + _.pad(now.getUTCDate(), 2) +\n            'T' + _.pad(now.getUTCHours(), 2) +\n            ':' + _.pad(now.getUTCMinutes(), 2) +\n            ':' + _.pad(now.getUTCSeconds(), 2) +\n            '.' + (now.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +\n            'Z';\n    };\n\n    _.map = function map(collection, callback) {\n        if (!_.isObject(collection)) {\n            throw new Error('Collection must be an object or array.');\n        }\n\n        var newArray = [];\n\n        if (collection.constructor === Array) {\n            _.forEach(collection, function mapCollection(item, index) {\n                if (_.isString(callback) && _.isObject(item)) {\n                    newArray.push(item[callback]);\n                } else if (_.isFunction(callback)) {\n                    newArray.push(callback(item, index));\n                }\n            });\n        } else {\n            _.forOwn(collection, function mapCollection(value, key) {\n                if (_.isFunction(callback)) {\n                    newArray.push(callback(value, key));\n                }\n            });\n        }\n\n        return newArray;\n    };\n\n    _.values = function (collection) {\n        if (!_.isObject(collection) || _.isArray(collection)) {\n            throw new Error('Collection must be an object.');\n        }\n\n        return _.map(collection, function (value) {\n            return value;\n        });\n    };\n\n    _.keys = function (collection) {\n        if (!_.isObject(collection) || _.isArray(collection)) {\n            throw new Error('Collection must be an object.');\n        }\n\n        return _.map(collection, function (value, key) {\n            return key;\n        });\n    };\n\n    _.forEach = function forEach(collection, callback) {\n        if (!_.isFunction(callback)) {\n            throw new Error('Callback must be a function');\n        }\n\n        assertIsArray(collection);\n\n        for (var i = 0; i < collection.length; i++) {\n            callback(collection[i], i);\n        }\n    };\n\n    _.forOwn = function forOwn(objectWithProperties, callback) {\n        if (!_.isFunction(callback)) {\n            throw new Error('Callback must be a function');\n        }\n\n        if (!_.isObject(objectWithProperties)) {\n            throw new Error('objectWithProperties must be an object.');\n        }\n\n        var keys = Object.keys(objectWithProperties);\n\n        for (var i = 0; i < keys.length; i++) {\n            var key = keys[i];\n\n            if (objectWithProperties.hasOwnProperty(key)) {\n                callback(objectWithProperties[key], key);\n            }\n        }\n    };\n\n    _.argumentsToArray = function(args) {\n        if (!_.isObject(args) || !args.length) {\n            throw new Error('Collection must be arguments');\n        }\n\n        var collection = [];\n\n        for (var i = 0; i < args.length; i++) {\n            collection.push(args[i]);\n        }\n\n        return collection;\n    };\n\n    _.assign = function assign(target) {\n        if (!_.isObject(target)) {\n            throw new Error('target must be object');\n        }\n\n        var sources = _.argumentsToArray(arguments);\n\n        sources.shift();\n\n        _.forEach(sources, function(source, index) {\n            if (!_.isObject(source)) {\n                throw new Error('source ' + index + ' must be object');\n            }\n\n            _.forOwn(source, function(value, key) {\n                target[key] = value;\n            });\n        });\n\n        return target;\n    };\n\n    _.includes = function includes(collection, value) {\n        if (!_.isObject(collection)) {\n            throw new Error('collection type not supported. Collection must be an array or object.');\n        }\n\n        var hasValue = false;\n\n        var checkCollection = function checkCollection(currentValue) {\n            if (currentValue === value) {\n                hasValue = true;\n            }\n        };\n\n        if (collection.constructor === Array) {\n            _.forEach(collection, checkCollection);\n        } else {\n            _.forOwn(collection, checkCollection);\n        }\n\n        return hasValue;\n    };\n\n    _.reduce = function reduce(collection, callback, initialValue) {\n        if (!_.isObject(collection)) {\n            throw new Error('collection type not supported. Collection must be an array or object.');\n        }\n\n        var result = initialValue === _.noop() ? null : initialValue;\n\n        if (collection.constructor === Array) {\n            _.forEach(collection, function (item) {\n                result = callback(result, item);\n            });\n        } else {\n            _.forOwn(collection, function (value, key) {\n                result = callback(result, value, key);\n            });\n        }\n\n        return result;\n    };\n\n    _.sample = function sample(collection) {\n        assertIsArray(collection);\n\n        return collection[Math.floor(Math.random() * collection.length)];\n    };\n\n    _.uniqueId = function () {\n        return (_.now() * Math.random()).toString();\n    };\n\n    _.find = function find(collection, callback, initialIndex) {\n        assertIsArray(collection);\n\n        var hasItem;\n\n        _.forEach(collection, function findInCollection(value, index) {\n            if (callback(value) && index >= (initialIndex || 0)) {\n                hasItem = value;\n\n                return hasItem;\n            }\n        });\n\n        return hasItem;\n    };\n\n    _.findIndex = function find(collection, callback, initialIndex) {\n        assertIsArray(collection);\n\n        var hasItem;\n\n        _.forEach(collection, function findInCollection(value, index) {\n            if (callback(value, index) && index >= (initialIndex || 0)) {\n                hasItem = index;\n\n                return hasItem;\n            }\n        });\n\n        return hasItem;\n    };\n\n    _.filter = function filter(collection, callback) {\n        assertIsArray(collection);\n\n        var newCollection = [];\n\n        _.forEach(collection, function findInCollection(value) {\n            if (callback(value)) {\n                newCollection.push(value);\n            }\n        });\n\n        return newCollection;\n    };\n\n    _.remove = function remove(collection, callback) {\n        assertIsArray(collection);\n\n        var filterCallback = function filterCallback(value) {\n            return !callback(value);\n        };\n\n        return _.filter(collection, filterCallback);\n    };\n\n    _.take = function take(collection, size) {\n        assertIsArray(collection);\n\n        return collection.slice(0, size);\n    };\n\n    _.hasDifferences = function hasDifferences(collectionA, collectionB, deep) {\n        return _.findDifferences(collectionA, collectionB, deep).length > 0;\n    };\n\n    _.findDifferences = function findDifferences(collectionA, collectionB, deep) {\n        var differences = [];\n        var visitedKeys = {};\n\n        function getDifferences(value, indexOrKey) {\n            visitedKeys[indexOrKey] = 1;\n\n            if ((_.isObject(value) || _.isArray(value)) && deep) {\n                if (!_.hasIndexOrKey(collectionB, indexOrKey)) {\n                    differences.push(indexOrKey);\n                } else if (!_.sameTypes(collectionA[indexOrKey], collectionB[indexOrKey])) {\n                    differences.push(indexOrKey);\n                } else if (_.hasDifferences(collectionA[indexOrKey], collectionB[indexOrKey], deep)) {\n                    differences.push(indexOrKey);\n                }\n            } else if (collectionA[indexOrKey] !== collectionB[indexOrKey]) {\n                differences.push(indexOrKey);\n            }\n        }\n\n        if (_.isArray(collectionA) && _.isArray(collectionB)) {\n            if (collectionA.length > collectionB.length) {\n                _.forEach(collectionA, getDifferences);\n            } else {\n                _.forEach(collectionB, getDifferences);\n            }\n        } else if (_.isObject(collectionA) && _.isObject(collectionB) && !_.isArray(collectionA) && !_.isArray(collectionB)) {\n            _.forOwn(collectionA, getDifferences);\n\n            _.forOwn(collectionB, function (value, key) {\n                if (!visitedKeys.hasOwnProperty(key)) {\n                    differences.push(key);\n                }\n            });\n        } else {\n            throw new Error('Object types do not match');\n        }\n\n        return differences;\n    };\n\n    _.hasIndexOrKey = function hasIndexOrKey(collection, indexOrKey) {\n        if (_.isArray(collection)) {\n            return collection.length > parseInt(indexOrKey);\n        } else if (_.isObject(collection)) {\n            return collection.hasOwnProperty(indexOrKey);\n        }\n\n        return false;\n    };\n\n    _.sameTypes = function sameTypes(first, second) {\n        if (_.isNullOrUndefined(first) || _.isNullOrUndefined(second)) {\n            return _.isNullOrUndefined(first) && _.isNullOrUndefined(second);\n        }\n\n        if (_.isArray(first) || _.isArray(second)) {\n            return _.isArray(first) && _.isArray(second);\n        }\n\n        return typeof first === typeof second;\n    };\n\n    _.freeze = function freeze(obj) {\n        if ('freeze' in Object) {\n            return Object.freeze(obj);\n        }\n\n        return obj;\n    };\n\n    _.noop = function () {\n        return undefined;\n    };\n\n    _.isObject = function isObject(obj) {\n        if (obj === null) {\n            return false;\n        }\n\n        return typeof obj === 'object';\n    };\n\n    _.isArray = function isArray(array) {\n        if (!_.isObject(array)) {\n            return false;\n        }\n\n        return array.constructor === Array;\n    };\n\n    _.isString = function isString(string) {\n        return typeof string === 'string';\n    };\n\n    _.isNumber = function isNumber(number) {\n        if (isNaN(number)) {\n            return false;\n        }\n\n        return typeof number === 'number';\n    };\n\n    _.isBoolean = function isBoolean(bool) {\n        return typeof bool === 'boolean';\n    };\n\n    _.isFunction = function isFunction(func) {\n        return typeof func === 'function';\n    };\n\n    _.isNullOrUndefined = function isNullOrUndefined(value) {\n        return value === null || value === undefined;\n    };\n\n    _.getEnumName = function getEnumName(enums, nameOrId) {\n        var enumObject = null;\n\n        var enumArray = _.map(enums, function (value) {\n            return value;\n        });\n\n        if (_.isNumber(nameOrId)) {\n            enumObject = _.find(enumArray, function (current) {\n                return current.id === nameOrId;\n            });\n        } else if (_.isString(nameOrId)) {\n            enumObject = _.find(enumArray, function (current) {\n                return current.name.toLowerCase() === nameOrId.toLowerCase();\n            });\n        }\n\n        if (enumObject) {\n            return enumObject.name;\n        }\n\n        return null;\n    };\n\n    _.toString = function toString(data) {\n        if (_.isString(data)) {\n            return data;\n        }\n\n        if (_.isBoolean(data)) {\n            return data ? 'true' : 'false';\n        }\n\n        if (_.isNumber(data)) {\n            return data.toString();\n        }\n\n        var toStringStr = '';\n\n        if (data) {\n            if (_.isFunction(data.toString)) {\n                toStringStr = data.toString();\n            } else if (_.isObject(data.toString)) {\n                try {\n                    toStringStr = data.toString();\n                } catch (e) {\n                    toStringStr = '[object invalid toString()]';\n                }\n            }\n        }\n\n        if (toStringStr.indexOf('[object') !== 0) {\n            return toStringStr;\n        }\n\n        var cache = [];\n\n        return toStringStr + JSON.stringify(data, function (key, value) {\n            if (_.isObject(value) && !_.isNullOrUndefined(value)) {\n                if (_.includes(cache, value)) {\n                    return '<recursive>';\n                }\n\n                cache.push(value);\n            }\n\n            return key === '' ? value : _.toString(value);\n        });\n    };\n\n    _.pad = function padNumber(value, numberToPad) {\n        assertIsNumber(value);\n        assertIsNumber(numberToPad);\n\n        var valueLength = value.toString().length;\n\n        for (var i = 0; i < numberToPad - valueLength; i++) {\n            value = '0' + value.toString();\n        }\n\n        return value.toString();\n    };\n\n    var assertIsArray = function isArray(collection) {\n        if (!_.isArray(collection)) {\n            throw new Error('Array must be an array.');\n        }\n    };\n\n    var assertIsNumber = function isArray(number) {\n        if (!_.isNumber(number)) {\n            throw new Error('Number must be a number.');\n        }\n    };\n\n    return _;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-lodash-light/src/LodashLight.js\n// module id = 27\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    './logging.json'\n], function (_, assert, logging) {\n    'use strict';\n\n    function ConsoleAppender() {\n        this._minLevel = logging.level.TRACE;\n    }\n\n    ConsoleAppender.prototype.setThreshold = function setThreshold(level) {\n        assert.isNumber(level);\n\n        this._minLevel = level;\n    };\n\n    ConsoleAppender.prototype.getThreshold = function getThreshold() {\n        return this._minLevel;\n    };\n\n    ConsoleAppender.prototype.log = function (since, level, category, messages, sessionId, userId, environment, version, context) {\n        if (context.level < this._minLevel) {\n            return;\n        }\n\n        messages[0] = since + ' [' + category + '] ' + level + ' ' + messages[0];\n\n        if (context.level > logging.level.INFO) {\n            logError(messages);\n        } else {\n            log(messages);\n        }\n    };\n\n    var log = function (args) {\n        console.log.apply(console, args);\n    } || function () { };\n\n    var logError = function (args) {\n        console.error.apply(console, args);\n    } || log;\n\n    return ConsoleAppender;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-logging/src/ConsoleAppender.js\n// module id = 28\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    './logging.json'\n], function (_, assert, logging) {\n    'use strict';\n\n    var defaultCategory= 'websdk';\n    var start = window['__phenixPageLoadTime'] || window['__pageLoadTime'] || _.now();\n    var defaultEnvironment = 'production' || '?';\n    var sdkVersion = '2017-08-14T21:49:04Z' || '?';\n    var releaseVersion = '2017.3.0';\n\n    function Logger() {\n        this._appenders = [];\n        this._userId = null;\n        this._sessionId = null;\n        this._environment = defaultEnvironment;\n        this._applicationVersion = sdkVersion;\n    }\n\n    Logger.prototype.trace = function trace(/* formatStr, [parameter], ...*/) {\n        return log.call(this, arguments, {level: logging.level.TRACE});\n    };\n\n    Logger.prototype.debug = function debug(/* formatStr, [parameter], ...*/) {\n        return log.call(this, arguments, {level: logging.level.DEBUG});\n    };\n\n    Logger.prototype.info = function info(/* formatStr, [parameter], ...*/) {\n        return log.call(this, arguments, {level: logging.level.INFO});\n    };\n\n    Logger.prototype.warn = function warn(/* formatStr, [parameter], ...*/) {\n        return log.call(this, arguments, {level: logging.level.WARN});\n    };\n\n    Logger.prototype.error = function error(/* formatStr, [parameter], ...*/) {\n        return log.call(this, arguments, {level: logging.level.ERROR});\n    };\n\n    Logger.prototype.fatal = function fatal(/* formatStr, [parameter], ...*/) {\n        return log.call(this, arguments, {level: logging.level.FATAL});\n    };\n\n    Logger.prototype.addAppender = function addAppender(appender) {\n        assert.isObject(appender, 'appender');\n        assert.isFunction(appender.log, 'appender.log');\n\n        this._appenders.push(appender);\n    };\n\n    Logger.prototype.getAppenders = function getAppenders() {\n        return this._appenders;\n    };\n\n    Logger.prototype.getUserId = function getUserId() {\n        return this._userId;\n    };\n\n    Logger.prototype.setUserId = function setUserId(userId) {\n        this._userId = userId;\n    };\n\n    Logger.prototype.getEnvironment = function getEnvironment() {\n        return this._environment;\n    };\n\n    Logger.prototype.setEnvironment = function setEnvironment(environment) {\n        this._environment = environment;\n    };\n\n    Logger.prototype.getApplicationVersion = function getApplicationVersion() {\n        return this._applicationVersion;\n    };\n\n    Logger.prototype.setApplicationVersion = function setApplicationVersion(version) {\n        this._applicationVersion = version;\n    };\n\n    Logger.prototype.getObservableSessionId = function getObservableSessionId() {\n        return this._observableSessionId;\n    };\n\n    Logger.prototype.setObservableSessionId = function setObservableSessionId(observableSessionId) {\n        this._observableSessionId = observableSessionId;\n\n        if (this._sessionIdSubscription) {\n            this._sessionIdSubscription.dispose();\n        }\n\n        if (observableSessionId) {\n            assert.isObject(observableSessionId, 'observableSessionId');\n\n            this._sessionIdSubscription = this._observableSessionId.subscribe(_.bind(onSessionIdChange, this), {initial: 'notify'});\n        }\n    };\n\n    function onSessionIdChange(sessionId) {\n        this._sessionId = sessionId;\n\n        if (!sessionId) {\n            this.info('Websdk version [%s] ([%s]), user agent [%s]', sdkVersion, releaseVersion, navigator.userAgent);\n        } else {\n            this.info('Session started on websdk version [%s] ([%s]), user agent [%s]', sdkVersion, releaseVersion, navigator.userAgent);\n        }\n    }\n\n    function log(messages, context) {\n        var now = _.now();\n        var since = (now - start) / 1000;\n        var level = convertLevel(context.level);\n        var category = context.name || defaultCategory;\n        var that = this;\n\n        _.forEach(this._appenders, function(appender) {\n            try {\n                appender.log(since, level, category, stringify(Array.prototype.slice.call(messages)), that._sessionId, that._userId, that._environment, that._applicationVersion, context);\n            } catch (e) { } // eslint-disable-line no-empty\n        });\n    }\n\n    function convertLevel(jsLoggerLevel) {\n        switch (jsLoggerLevel) {\n        case logging.level.TRACE:\n            return 'Trace';\n        case logging.level.DEBUG:\n            return 'Debug';\n        case logging.level.INFO:\n            return 'Info';\n        case logging.level.WARN:\n            return 'Warn';\n        case logging.level.ERROR:\n            return 'Error';\n        case logging.level.FATAL:\n            return 'Fatal';\n        default:\n            throw new Error('Unsupported Logging Level ' + jsLoggerLevel);\n        }\n    }\n\n    var stringify = function stringify(args) {\n        if (args.length === 0) {\n            return;\n        }\n\n        var newArgs = [];\n        var errorStacks = [];\n\n        _.forEach(args, function(arg) {\n            newArgs.push(_.toString(arg));\n\n            if (arg instanceof Error) {\n                errorStacks.push(arg.stack);\n            }\n        });\n\n        return format(newArgs.concat(errorStacks));\n    };\n\n    var format = function format(args) {\n        var fmt = args[0];\n        var idx = 0;\n\n        while (fmt.indexOf && args.length > 1 && idx >= 0) {\n            idx = fmt.indexOf('%', idx);\n\n            if (idx > 0) {\n                var type = fmt.substring(idx + 1, idx + 2);\n\n                switch (type) {\n                case '%':\n                    // Escaped '%%' turns into '%'\n                    fmt = fmt.substring(0, idx) + fmt.substring(idx + 1);\n                    idx++;\n\n                    break;\n                case 's':\n                case 'd':\n                    // Replace '%d' or '%s' with the argument\n                    args[0] = fmt = fmt.substring(0, idx) + args[1] + fmt.substring(idx + 2);\n                    args.splice(1, 1);\n\n                    break;\n                default:\n                    return args;\n                }\n            }\n        }\n\n        return args;\n    };\n\n    return Logger;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-logging/src/Logger.js\n// module id = 29\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-rtc'\n], function (_, phenixRTC) {\n    'use strict';\n\n    var defaultOfflineTimeoutLength = 15000;\n\n    function NetworkConnectionMonitor(offlineTimeoutLength, logger) {\n        this._logger = logger;\n        this._timeout = null;\n        this._onOnline = null;\n        this._onOffline = null;\n        this._offlineHysteresisTimeout = _.isNumber(offlineTimeoutLength) ? offlineTimeoutLength : defaultOfflineTimeoutLength;\n    }\n\n    NetworkConnectionMonitor.prototype.start = function start(onlineCallback, offlineCallback) {\n        this._onOnline = _.bind(handleOnline, this, onlineCallback);\n        this._onOffline = _.bind(handleOfflineWithHysteresis, this, offlineCallback);\n\n        phenixRTC.addEventListener(window, 'online', this._onOnline, false);\n        phenixRTC.addEventListener(window, 'offline', this._onOffline, false);\n    };\n\n    NetworkConnectionMonitor.prototype.stop = function stop() {\n        phenixRTC.removeEventListener(window, 'online', this._onOnline, false);\n        phenixRTC.removeEventListener(window, 'offline', this._onOffline, false);\n\n        this._onOnline = null;\n        this._onOffline = null;\n    };\n\n    function handleOfflineWithHysteresis(offlineCallback, event) { // eslint-disable-line no-unused-vars\n        var that = this;\n\n        if (that._logger) {\n            that._logger.warn('Network Disconnect Detected. Waiting for reconnect.');\n        }\n\n        that._offlineHysteresisTimeoutElapsed = false;\n\n        that.offlineTimeout = setTimeout(function() {\n            that._offlineHysteresisTimeoutElapsed = true;\n\n            if (!offlineCallback || !that._onOffline) {\n                return;\n            }\n\n            if (that._logger) {\n                that._logger.warn('Network not reconnected after [%s]. Going Offline.', that._offlineHysteresisTimeout);\n            }\n\n            offlineCallback();\n        }, that._offlineHysteresisTimeout);\n    }\n\n    function handleOnline(onlineCallback, event) { // eslint-disable-line no-unused-vars\n        if (this._logger) {\n            this._logger.info('Network Reconnected.');\n        }\n\n        if (this.offlineTimeout) {\n            clearTimeout(this.offlineTimeout);\n\n            this.offlineTimeout = null;\n        }\n\n        if (onlineCallback && this._onOnline) {\n            onlineCallback(this._offlineHysteresisTimeoutElapsed);\n        }\n    }\n\n    return NetworkConnectionMonitor;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-network-connection-monitor/src/NetworkConnectionMonitor.js\n// module id = 30\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    './Observable'\n], function (_, assert, Observable) {\n    'use strict';\n\n    function ObservableArray(initialValues, beforeChange) {\n        var valuesToSet = initialValues;\n\n        if (valuesToSet === undefined || valuesToSet === null) {\n            valuesToSet = [];\n        }\n\n        assert.isArray(valuesToSet);\n\n        this.observableArray = new Observable(valuesToSet, beforeChange);\n    }\n\n    ObservableArray.prototype.getValue = function getValue() {\n        return this.observableArray.getValue();\n    };\n\n    ObservableArray.prototype.setValue = function setValue(values) {\n        if (values === undefined || values === null) {\n            values = [];\n        }\n\n        if (values !== undefined) {\n            assert.isArray(values);\n        }\n\n        return this.observableArray.setValue(values);\n    };\n\n    ObservableArray.prototype.subscribe = function subscribe(callback, options) {\n        return this.observableArray.subscribe(callback, options);\n    };\n\n    ObservableArray.prototype.push = function push(value) {\n        var array = this.observableArray.getValue();\n        array.push(value);\n\n        this.observableArray.setValue(array);\n    };\n\n    ObservableArray.prototype.pop = function pop() {\n        var array = this.observableArray.getValue();\n        var value = array.pop();\n\n        this.observableArray.setValue(array);\n\n        return value;\n    };\n\n    ObservableArray.prototype.remove = function remove(valueOrFunction) {\n        var array = this.observableArray.getValue();\n\n        var filterFunction = function (value) {\n            return _.isFunction(valueOrFunction) ? valueOrFunction(value) : value === valueOrFunction;\n        };\n\n        var valuesToRemove = _.filter(array, filterFunction);\n\n        if (valuesToRemove.length > 0) {\n            this.observableArray.setValue(_.remove(array, filterFunction));\n        }\n\n        return valuesToRemove;\n    };\n\n    ObservableArray.prototype.removeAll = function removeAll() {\n        var array = this.observableArray.getValue();\n\n        this.observableArray.setValue([]);\n\n        return array;\n    };\n\n    ObservableArray.prototype.extend = function extend(options) {\n        this.observableArray.extend(options);\n\n        return this;\n    };\n\n    return ObservableArray;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-observable/src/ObservableArray.js\n// module id = 31\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert'\n], function (_, assert) {\n    'use strict';\n\n    function ObservableMonitor(observable) {\n        assert.isObject(observable, 'observable');\n\n        this._observable = observable;\n        this._listenerSubscription = null;\n        this._isEnabled = false;\n    }\n\n    ObservableMonitor.prototype.start = function start(checkForChanges, timeout) {\n        this._isEnabled = true;\n\n        this._listenerSubscription = this._observable.subscribe(_.noop, {\n            listenForChanges: {\n                callback: checkForChanges,\n                timeout: timeout || 500\n            }\n        });\n    };\n\n    ObservableMonitor.prototype.stop = function stop() {\n        this._isEnabled = false;\n\n        if (this._listenerSubscription) {\n            this._listenerSubscription.dispose();\n        }\n\n        this._listenerSubscription = null;\n    };\n\n    ObservableMonitor.prototype.isEnabled = function isEnabled() {\n        return this._isEnabled;\n    };\n\n    return ObservableMonitor;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-observable/src/ObservableMonitor.js\n// module id = 32\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-network-connection-monitor'\n], function (_, assert, NetworkConnectionMonitor) {\n    'use strict';\n\n    var networkDisconnectHysteresisInterval = 15000;\n    var waitForDisconnectEventTimeout = 1000;\n    var defaultReconnectBackoffInterval = 1000;\n    var defaultMaxReconnectAttempts = 4;\n    var closeReasons = {\n        byebye: {\n            code: 1000,\n            reason: 'byebye',\n            desc: 'Client closed'\n        },\n        backoffLimitReached: {\n            code: 4000,\n            reason: 'backoff-limit-reached',\n            desc: 'Reached the limit in terms of the number of reconnects'\n        },\n        networkDisconnect: {\n            code: 4001,\n            reason: 'network-disconnect',\n            desc: 'Network connection monitor determined loss to internet connectivity'\n        },\n        reconnecting: {\n            code: 4002,\n            reason: 'reconnecting',\n            desc: 'Closing WebSocket in order to attempt to establish another connection'\n        }\n    };\n    var readyStates = {\n        connecting: {\n            code: 0,\n            state: 'CONNECTING',\n            desc: 'The connection is not yet open'\n        },\n        open: {\n            code: 1,\n            state: 'OPEN',\n            desc: 'The connection is open and ready to communicate'\n        },\n        closing: {\n            code: 2,\n            state: 'CLOSING',\n            desc: 'The connection is in the process of closing'\n        },\n        closed: {\n            code: 3,\n            state: 'CLOSED',\n            desc: 'The connection is closed or could not be opened'\n        }\n    };\n\n    function ReconnectingWebSocket(uri, logger, maxReconnectAttempts, reconnectBackoffInterval) {\n        assert.stringNotEmpty(uri, 'uri');\n        assert.isObject(logger, 'logger');\n\n        if (!_.isNullOrUndefined(maxReconnectAttempts)) {\n            assert.isNumber(maxReconnectAttempts);\n        } else {\n            maxReconnectAttempts = defaultMaxReconnectAttempts;\n        }\n\n        this._uri = uri;\n        this._logger = logger;\n        this._maxReconnectAttempts = maxReconnectAttempts;\n        this._reconnectBackoffInterval = reconnectBackoffInterval || defaultReconnectBackoffInterval;\n        this._networkConnectionMonitor = new NetworkConnectionMonitor(networkDisconnectHysteresisInterval, this._logger);\n        this._hasAttemptedReconnect = false;\n        this._stopped = false;\n\n        this._logger.info('Connecting to [%s]', uri);\n\n        this._webSocket = createWebSocket.call(this, onOpen, onClose);\n        this._networkConnectionMonitor.start(_.bind(onNetworkReconnect, this), _.bind(onNetworkDisconnect, this));\n    }\n\n    ReconnectingWebSocket.prototype.onmessage = null;\n    ReconnectingWebSocket.prototype.onconnected = null;\n    ReconnectingWebSocket.prototype.onreconnecting = null;\n    ReconnectingWebSocket.prototype.onreconnected = null;\n    ReconnectingWebSocket.prototype.ondisconnected = null;\n    ReconnectingWebSocket.prototype.onerror = null;\n\n    ReconnectingWebSocket.prototype.send = function (message) {\n        return this._webSocket.send(message);\n    };\n\n    ReconnectingWebSocket.prototype.reconnect = function (attempt) {\n        this._webSocket.onclose = null;\n        this._webSocket.onerror = null;\n        this._hasAttemptedReconnect = true;\n\n        var that = this;\n        var backoffTimeout;\n\n        if (!_.isNumber(attempt)) {\n            attempt = 1;\n        }\n\n        if (this._stopped) {\n            return this._logger.info('Client has stopped WebSocket after [%s] reconnect attempts', attempt - 1);\n        }\n\n        if (attempt > this._maxReconnectAttempts) {\n            this._logger.warn('Unable to reconnect WebSocket after [%s] attempts', this._maxReconnectAttempts);\n\n            return closeWebSocketOrTriggerDisconnectEvent.call(this, closeReasons.backoffLimitReached);\n        }\n\n        closeWebSocketOrTriggerDisconnectEvent.call(this, closeReasons.reconnecting);\n\n        try {\n            this._webSocket = createWebSocket.call(that, function onOpenEvent() {\n                if (backoffTimeout) {\n                    clearTimeout(backoffTimeout);\n                }\n\n                that._hasAttemptedReconnect = false;\n                that._webSocket.onclose = _.bind(onClose, that);\n\n                return onReconnect.call(that);\n            }, function onCloseEvent() {\n                if (attempt + 1 > that._maxReconnectAttempts) {\n                    if (backoffTimeout) {\n                        clearTimeout(backoffTimeout);\n                    }\n\n                    reconnectIfNotOpen.call(that, attempt);\n                }\n            });\n        } catch(e) {\n            this._logger.warn('Unable to create WebSocket connection [%s]', e);\n            // Swallow error - we will alert client of failure after timeouts.\n        }\n\n        backoffTimeout = reconnectWithBackoff.call(this, attempt);\n    };\n\n    ReconnectingWebSocket.prototype.disconnect = function () {\n        this._networkConnectionMonitor.stop();\n        this._stopped = true;\n\n        return this._webSocket.close(closeReasons.byebye.code, closeReasons.byebye.reason);\n    };\n\n    ReconnectingWebSocket.prototype.toString = function () {\n        return 'ReconnectedWebSocket[' + this._uri + ',' + this._webSocket.readyState + ']';\n    };\n\n    function closeWebSocketOrTriggerDisconnectEvent(evt) {\n        if (this._webSocket.readyState === readyStates.closed.code) {\n            return onClose.call(this, evt);\n        }\n\n        return this._webSocket.close(evt.code, evt.reason);\n    }\n\n    function createWebSocket(onOpenCallback, onCloseCallback) {\n        var webSocket = new WebSocket(this._uri);\n\n        webSocket.onopen = _.bind(onOpenCallback, this);\n        webSocket.onclose = _.bind(onCloseCallback, this);\n        webSocket.onmessage = _.bind(onMessage, this);\n        webSocket.onerror = _.bind(onError, this);\n\n        return webSocket;\n    }\n\n    function reconnectWithBackoff(attempt) {\n        var that = this;\n\n        return setTimeout(function () {\n            reconnectIfNotOpen.call(that, attempt);\n        }, attempt * attempt * this._reconnectBackoffInterval);\n    }\n\n    function reconnectIfNotOpen(attempt) {\n        if (this._webSocket.readyState === readyStates.open.code) {\n            return;\n        }\n\n        this.reconnect(attempt + 1);\n    }\n\n    function onClose(evt) {\n        switch (evt.code) {\n        case closeReasons.reconnecting.code:\n            return;\n        case closeReasons.byebye.code:\n        case closeReasons.backoffLimitReached.code:\n        case closeReasons.networkDisconnect.code:\n            return onDisconnect.call(this, evt);\n        default:\n            if (this._hasAttemptedReconnect) {\n                return;\n            }\n\n            return onReconnecting.call(this, evt);\n        }\n    }\n\n    function onReconnecting(evt) {\n        this._logger.info('Attempting to re-establish socket connection after disconnect event with code [%s] and reason [%s]', evt.code, evt.reason);\n\n        if (this.onreconnecting) {\n            this.onreconnecting(evt);\n        }\n\n        this.reconnect();\n    }\n\n    function onOpen(evt) {\n        this._logger.info('Connected');\n\n        if (this.onconnected) {\n            this.onconnected(evt);\n        }\n    }\n\n    function onReconnect(evt) {\n        this._logger.info('Successfully reconnected to WebSocket');\n\n        if (this.onreconnected) {\n            this.onreconnected(evt);\n        }\n    }\n\n    function onDisconnect(evt) {\n        this._logger.info('Disconnected [%s]: [%s]', evt.code, evt.reason);\n\n        if (this.ondisconnected) {\n            this.ondisconnected(evt);\n        }\n    }\n\n    function onError(evt) {\n        this._logger.error('An error occurred [%s]', evt.data);\n\n        if (this.onerror) {\n            this.onerror(evt);\n        }\n    }\n\n    function onMessage(evt) {\n        this._logger.debug('>> [%s]', evt.data);\n\n        if (this.onmessage) {\n            this.onmessage(evt);\n        }\n    }\n\n    function onNetworkReconnect(didGoOffline) {\n        var that = this;\n\n        setTimeout(function() {\n            if (that._stopped) {\n                return that._logger.info('Unable to go back online after network reconnect. Client has stopped WebSocket.');\n            }\n\n            if (that._webSocket.readyState !== readyStates.open.code) {\n                return that.reconnect();\n            }\n\n            if (didGoOffline) {\n                return onOpen.call(that);\n            }\n        }, waitForDisconnectEventTimeout);\n    }\n\n    function onNetworkDisconnect() {\n        // Don't close the WebSocket.\n        onDisconnect.call(this, closeReasons.networkDisconnect);\n    }\n\n    return ReconnectingWebSocket;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-reconnecting-websocket/src/ReconnectingWebSocket.js\n// module id = 33\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    './ReconnectingWebSocket'\n], function (ReconnectingWebSocket) {\n    'use strict';\n\n    return ReconnectingWebSocket;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/phenix-web-reconnecting-websocket/src/index.js\n// module id = 34\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-http'\n], function (_, assert, http) {\n    'use strict';\n\n    function AdminAPI(backendUri, authenticationData) {\n        assert.stringNotEmpty(backendUri, 'backendUri');\n        assert.isObject(authenticationData, 'authenticationData');\n\n        this._backendUri = backendUri;\n        this._authenticationData = authenticationData;\n    }\n\n    AdminAPI.prototype.createAuthenticationToken = function createAuthenticationToken(callback) {\n        var data = appendAuthDataTo.call(this, {});\n\n        http.postWithRetry(this._backendUri + '/auth', JSON.stringify(data), null, _.bind(handleResponse, this, callback), 1);\n    };\n\n    AdminAPI.prototype.createStreamTokenForPublishing = function createStreamTokenForPublishing(sessionId, capabilities, callback) {\n        assert.stringNotEmpty(sessionId, 'sessionId');\n        assert.isObject(capabilities, 'capabilities');\n\n        var data = appendAuthDataTo.call(this, {\n            sessionId: sessionId,\n            capabilities: capabilities\n        });\n\n        http.postWithRetry(this._backendUri + '/stream', JSON.stringify(data), null, _.bind(handleResponse, this, callback), 1);\n    };\n\n    AdminAPI.prototype.createStreamTokenForSubscribing = function createStreamTokenForSubscribing(sessionId, capabilities, streamId, callback) {\n        assert.stringNotEmpty(sessionId, 'sessionId');\n        assert.isObject(capabilities, 'capabilities');\n\n        var data = appendAuthDataTo.call(this, {\n            sessionId: sessionId,\n            capabilities: capabilities,\n            originStreamId: streamId\n        });\n\n        http.postWithRetry(this._backendUri + '/stream', JSON.stringify(data), null, _.bind(handleResponse, this, callback), 1);\n    };\n\n    AdminAPI.prototype.getStreams = function getStreams(callback) {\n        http.getWithRetry(this._backendUri + '/streams', null, _.bind(handleResponse, this, callback), 1);\n    };\n\n    function appendAuthDataTo(data) {\n        return _.assign({}, data, this._authenticationData);\n    }\n\n    function handleResponse(callback, error, response) {\n        if (error) {\n            return callback(error, {});\n        }\n\n        var res = JSON.parse(response);\n\n        if (res.status !== 'ok') {\n            return callback(null, {status: res.status});\n        }\n\n        return callback(null, res);\n    }\n\n    return AdminAPI;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/AdminAPI.js\n// module id = 35\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-http'\n], function (_, http) {\n    'use strict';\n\n    var measurementsPerEndPoint = 4;\n    var endpointClosenessThreshold = 30;\n\n    function ClosestEndPointResolver(onClosestEndpointFound, version, baseUri, logger) {\n        this._done = false;\n        this._minTime = Number.MAX_VALUE;\n        this._minResponseText = '';\n        this._onClosestEndpointFound = onClosestEndpointFound;\n        this._logger = logger;\n        this._version = version;\n    }\n\n    ClosestEndPointResolver.prototype.isResolved = function isResolved() {\n        return this._done;\n    };\n\n    ClosestEndPointResolver.prototype.measurementCallback = function measurementCallback(endPoint, time, responseText) {\n        if (time < this._minTime) {\n            this._logger.info('Current closest end point is [%s] with latency of [%s] ms', responseText, time);\n            this._minTime = time;\n            this._minResponseText = responseText;\n        }\n\n        return this.isResolved();\n    };\n\n    ClosestEndPointResolver.prototype.completeCallback = function completeCallback(endPoint) { // eslint-disable-line no-unused-vars\n        if (this._minResponseText && this._minTime < Number.MAX_VALUE && !this.isResolved()) {\n            this._done = true;\n\n            return this._onClosestEndpointFound(undefined, {\n                uri: this._minResponseText,\n                roundTripTime: this._minTime\n            });\n        }\n    };\n\n    ClosestEndPointResolver.prototype.resolveAll = function resolveAll(endPoints) {\n        for (var i = 0; i < endPoints.length; i++) {\n            this.resolve(endPoints[i], measurementsPerEndPoint);\n        }\n    };\n\n    ClosestEndPointResolver.prototype.resolve = function resolve(endPoint, measurements) {\n        var that = this;\n        var measurement = 1;\n        var successfulAttempts = 0;\n\n        var nextMeasurement = function nextMeasurement(endPoint) {\n            var maxAttempts = 1;\n            var start = _.now();\n\n            that._logger.info('[%s] Checking end point [%s]', measurement, endPoint);\n\n            http.getWithRetry(endPoint, {\n                timeout: 15000,\n                queryParameters: {\n                    version: '%VERSION%',\n                    _: _.now()\n                }\n            }, function (err, responseText) {\n                var end = _.now();\n                var time = end - start;\n                var timeAboveThreshold = time > endpointClosenessThreshold;\n\n                that._logger.info('[%s] End point [%s] latency is [%s] ms', measurement, endPoint, time);\n\n                measurement++;\n\n                if (!err) {\n                    if (that.measurementCallback(endPoint, time, responseText)) {\n                        // Done\n                        return;\n                    }\n\n                    successfulAttempts++;\n                }\n\n                if (measurement <= measurements && !that.isResolved() && (timeAboveThreshold || err)) {\n                    if (err) {\n                        that._logger.info('Retrying after failure to resolve end point [%s] with [%s]', endPoint, err);\n                    }\n\n                    return nextMeasurement(endPoint);\n                } else if (successfulAttempts === 0) {\n                    return that._logger.warn('Unable to resolve end point [%s] with [%s]', endPoint, err);\n                }\n\n                return that.completeCallback(endPoint);\n            }, maxAttempts);\n        };\n\n        nextMeasurement(endPoint);\n    };\n\n    return ClosestEndPointResolver;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/ClosestEndPointResolver.js\n// module id = 36\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var defaultPollFrequency = 500;\n    var minimumPollFrequency = 15;\n\n    function DimensionsChangedMonitor(logger) {\n        if (!logger) {\n            throw new Error(\"'logger' must be specified.\");\n        }\n\n        this._logger = logger;\n        this._dimensionsChangedIntervalId = null;\n        this._videoDisplayDimensionsChangedCallback = null;\n        this._toBeStarted = false;\n        this._videoElement = null;\n        this._dimensionsChangedData = {\n            pollFrequency: defaultPollFrequency,\n            previousWidth: 0,\n            previousHeight: 0\n        };\n        this._renderer = null;\n    }\n\n    DimensionsChangedMonitor.prototype.start = function start(renderer, element) {\n        startMonitor.call(this, renderer, element);\n    };\n\n    DimensionsChangedMonitor.prototype.stop = function stop() {\n        stopMonitor.call(this);\n    };\n\n    DimensionsChangedMonitor.prototype.setVideoDisplayDimensionsChangedCallback = function setVideoDisplayDimensionsChangedCallback(callback, options) {\n        updateVideoDisplayDimensionsChangedCallback.call(this, callback, options);\n    };\n\n    DimensionsChangedMonitor.prototype.toString = function () {\n        return 'DimensionsChangedMonitor[pollFrequency=' + this._dimensionsChangedData.pollFrequency +\n            ', previousHeight=' + this._dimensionsChangedData.previousHeight +\n            ', previousWidth=' + this._dimensionsChangedData.previousHeight +\n            ', state=' + (this._dimensionsChangedIntervalId ? 'running' : 'stopped') + ']';\n    };\n\n    function startMonitor(renderer, element) {\n        if (!element || element.videoWidth === undefined) {\n            this._logger.warn(\"Attempting to start dimensions changed monitor without providing proper 'video' element.\");\n        }\n\n        this._renderer = renderer;\n        this._videoElement = element;\n        this._toBeStarted = true;\n        startInterval.call(this);\n    }\n\n    function stopMonitor() {\n        this._toBeStarted = false;\n\n        if (this._dimensionsChangedIntervalId) {\n            clearInterval(this._dimensionsChangedIntervalId);\n            this._dimensionsChangedIntervalId = null;\n        }\n    }\n\n    function updateVideoDisplayDimensionsChangedCallback(callback, options) {\n        if (callback === null) {\n            this._videoDisplayDimensionsChangedCallback = null;\n            stopMonitor.call(this);\n\n            return;\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        this._videoDisplayDimensionsChangedCallback = callback;\n\n        if (options && options.pollFrequency) {\n            this._dimensionsChangedData.pollFrequency = options.pollFrequency >= minimumPollFrequency ? options.pollFrequency : minimumPollFrequency;\n        }\n\n        startInterval.call(this);\n    }\n\n    function startInterval() {\n        // Return if either:\n        // - start hasn't been called yet\n        // - the interval is already running\n        // - there is no callback yet\n        if (!this._toBeStarted || this._dimensionsChangedIntervalId || !this._videoDisplayDimensionsChangedCallback) {\n            return;\n        }\n\n        var that = this;\n        this._dimensionsChangedData.previousWidth = this._videoElement.videoWidth;\n        this._dimensionsChangedData.previousHeight = this._videoElement.videoHeight;\n\n        this._dimensionsChangedIntervalId = setInterval(function checkVideoDimensions() {\n            if (that._videoElement.videoWidth !== that._dimensionsChangedData.previousWidth || that._videoElement.videoHeight !== that._dimensionsChangedData.previousHeight) {\n                that._dimensionsChangedData.previousWidth = that._videoElement.videoWidth;\n                that._dimensionsChangedData.previousHeight = that._videoElement.videoHeight;\n                that._videoDisplayDimensionsChangedCallback(that._renderer, {\n                    width: that._videoElement.videoWidth,\n                    height: that._videoElement.videoHeight\n                });\n            }\n        }, that._dimensionsChangedData.pollFrequency);\n    }\n\n    return DimensionsChangedMonitor;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/DimensionsChangedMonitor.js\n// module id = 37\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    './MQProtocol',\n    'phenix-web-reconnecting-websocket',\n    'ByteBuffer',\n    'phenix-rtc'\n], function (_, assert, observable, MQProtocol, ReconnectingWebSocket, ByteBuffer, phenixRTC) {\n    'use strict';\n\n    function PCastProtocol(uri, deviceId, version, logger) {\n        if (typeof uri !== 'string') {\n            throw new Error('Must pass a valid \"uri\"');\n        }\n\n        if (typeof deviceId !== 'string') {\n            throw new Error('Must pass a valid \"deviceId\"');\n        }\n\n        if (typeof version !== 'string') {\n            throw new Error('Must pass a valid \"version\"');\n        }\n\n        if (typeof logger !== 'object') {\n            throw new Error('Must pass a valid \"logger\"');\n        }\n\n        this._uri = uri;\n        this._deviceId = deviceId;\n        this._version = version;\n        this._logger = logger;\n        this._mqProtocol = new MQProtocol(this._logger);\n        this._observableSessionId = new observable.Observable(null).extend({rateLimit: 0});\n\n        this._logger.info('Connecting to [%s]', uri);\n\n        this._nextRequestId = 0;\n        this._events = {};\n        this._requests = {};\n\n        this._webSocket = new ReconnectingWebSocket(this._uri, this._logger);\n\n        this._webSocket.onmessage = _.bind(onMessage, this);\n        this._webSocket.onconnected = _.bind(onConnected, this);\n        this._webSocket.onreconnecting = _.bind(onReconnecting, this);\n        this._webSocket.onreconnected = _.bind(onReconnected, this);\n        this._webSocket.ondisconnected = _.bind(onDisconnected, this);\n        this._webSocket.onerror = _.bind(onError, this);\n    }\n\n    PCastProtocol.prototype.on = function (eventName, handler) {\n        if (typeof eventName !== 'string') {\n            throw new Error('\"eventName\" must be a string');\n        }\n\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" must be a function');\n        }\n\n        var handlers = getEventHandlers.call(this, eventName);\n\n        handlers.push(handler);\n\n        return _.bind(removeEventHandler, this, eventName, handler);\n    };\n\n    PCastProtocol.prototype.disconnect = function () {\n        this._observableSessionId.setValue(null);\n\n        return this._webSocket.disconnect();\n    };\n\n    PCastProtocol.prototype.authenticate = function (authToken, callback) {\n        if (typeof authToken !== 'string') {\n            throw new Error('\"authToken\" must be a string');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        var authenticate = {\n            apiVersion: this._mqProtocol.getApiVersion(),\n            clientVersion: this._version,\n            deviceId: this._deviceId,\n            platform: phenixRTC.browser,\n            platformVersion: phenixRTC.browserVersion.toString(),\n            authenticationToken: authToken\n        };\n\n        if (this.getSessionId()) {\n            authenticate.sessionId = this.getSessionId();\n        }\n\n        return sendRequest.call(this, 'pcast.Authenticate', authenticate, callback);\n    };\n\n    PCastProtocol.prototype.getSessionId = function () {\n        return this._observableSessionId.getValue();\n    };\n\n    PCastProtocol.prototype.getObservableSessionId = function () {\n        return this._observableSessionId;\n    };\n\n    PCastProtocol.prototype.bye = function (reason, callback) {\n        if (typeof reason !== 'string') {\n            throw new Error('\"reason\" must be a string');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        var bye = {\n            sessionId: this.getSessionId(),\n            reason: reason\n        };\n\n        return sendRequest.call(this, 'pcast.Bye', bye, callback);\n    };\n\n    PCastProtocol.prototype.setupStream = function (streamType, streamToken, options, callback) {\n        if (typeof streamType !== 'string') {\n            throw new Error('\"streamType\" must be a string');\n        }\n\n        if (typeof streamToken !== 'string') {\n            throw new Error('\"streamToken\" must be a string');\n        }\n\n        if (typeof options !== 'object') {\n            throw new Error('\"options\" must be an object');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        var browser = phenixRTC.browser || 'UnknownBrowser';\n        var browserWithVersion = browser + '-' + (phenixRTC.browserVersion || 0);\n        var setupStream = {\n            streamToken: streamToken,\n            createStream: {\n                sessionId: this.getSessionId(),\n                options: ['data-quality-notifications'],\n                connectUri: options.connectUri,\n                connectOptions: options.connectOptions || [],\n                tags: options.tags || []\n            }\n        };\n\n        if (options.negotiate) {\n            setupStream.createStream.createOfferDescription = {\n                streamId: '',\n                options: [streamType, browser, browserWithVersion],\n                apiVersion: this._mqProtocol.getApiVersion()\n            };\n        }\n\n        if (options.receiveAudio === false) {\n            setupStream.createStream.options.push('no-audio');\n        }\n\n        if (options.receiveVideo === false) {\n            setupStream.createStream.options.push('no-video');\n        }\n\n        return sendRequest.call(this, 'pcast.SetupStream', setupStream, callback);\n    };\n\n    PCastProtocol.prototype.setAnswerDescription = function (streamId, sdp, callback) {\n        if (typeof streamId !== 'string') {\n            throw new Error('\"streamId\" must be a string');\n        }\n\n        if (typeof sdp !== 'string') {\n            throw new Error('\"sdp\" must be a string');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        var setRemoteDescription = {\n            streamId: streamId,\n            sessionDescription: {\n                type: 'Answer',\n                sdp: sdp\n            },\n            apiVersion: this._mqProtocol.getApiVersion()\n        };\n\n        return sendRequest.call(this, 'pcast.SetRemoteDescription', setRemoteDescription, callback);\n    };\n\n    PCastProtocol.prototype.addIceCandidates = function (streamId, candidates, options, callback) {\n        if (typeof streamId !== 'string') {\n            throw new Error('\"streamId\" must be a string');\n        }\n\n        if (!(candidates instanceof Array)) {\n            throw new Error('\"candidates\" must be an array');\n        }\n\n        if (!(options instanceof Array)) {\n            throw new Error('\"options\" must be an array');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        var sanitizedCandidates = [];\n        for (var i = 0; i < candidates.length; i++) {\n            var candidate = candidates[i];\n\n            if (typeof candidate.candidate !== 'string') {\n                throw new Error('\"candidates[' + i + '].candidate\" must be a string');\n            }\n\n            if (typeof candidate.sdpMLineIndex !== 'number') {\n                throw new Error('\"candidates[' + i + '].sdpMLineIndex\" must be a number');\n            }\n\n            if (typeof candidate.sdpMid !== 'string') {\n                throw new Error('\"candidates[' + i + '].sdpMid\" must be a string');\n            }\n\n            sanitizedCandidates.push({\n                candidate: candidate.candidate,\n                sdpMLineIndex: candidate.sdpMLineIndex,\n                sdpMid: candidate.sdpMid\n            });\n        }\n\n        var addIceCandidates = {\n            streamId: streamId,\n            candidates: sanitizedCandidates,\n            options: options,\n            apiVersion: this._mqProtocol.getApiVersion()\n        };\n\n        return sendRequest.call(this, 'pcast.AddIceCandidates', addIceCandidates, callback);\n    };\n\n    PCastProtocol.prototype.updateStreamState = function (streamId, signalingState, iceGatheringState, iceConnectionState, callback) {\n        if (typeof streamId !== 'string') {\n            throw new Error('\"streamId\" must be a string');\n        }\n\n        if (typeof signalingState !== 'string') {\n            throw new Error('\"signalingState\" must be a string');\n        }\n\n        if (typeof iceGatheringState !== 'string') {\n            throw new Error('\"iceGatheringState\" must be a string');\n        }\n\n        if (typeof iceConnectionState !== 'string') {\n            throw new Error('\"iceConnectionState\" must be a string');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        var updateStreamState = {\n            streamId: streamId,\n            signalingState: signalingState,\n            iceGatheringState: iceGatheringState,\n            iceConnectionState: iceConnectionState,\n            apiVersion: this._mqProtocol.getApiVersion()\n        };\n\n        return sendRequest.call(this, 'pcast.UpdateStreamState', updateStreamState, callback);\n    };\n\n    PCastProtocol.prototype.destroyStream = function (streamId, reason, callback) {\n        if (typeof streamId !== 'string') {\n            throw new Error('\"streamId\" must be a string');\n        }\n\n        if (typeof reason !== 'string') {\n            throw new Error('\"reason\" must be a string');\n        }\n\n        if (typeof callback !== 'function') {\n            throw new Error('\"callback\" must be a function');\n        }\n\n        var destroyStream = {\n            streamId: streamId,\n            reason: reason\n        };\n\n        return sendRequest.call(this, 'pcast.DestroyStream', destroyStream, callback);\n    };\n\n    PCastProtocol.prototype.getRoomInfo = function (roomId, alias, callback) {\n        if (roomId) {\n            assert.isString(roomId, 'roomId');\n        } else {\n            assert.isString(alias, 'alias');\n        }\n\n        assert.isFunction(callback, 'callback');\n\n        var getRoomInfo = {\n            roomId: roomId,\n            alias: alias,\n            sessionId: this.getSessionId()\n        };\n\n        return sendRequest.call(this, 'chat.GetRoomInfo', getRoomInfo, callback);\n    };\n\n    PCastProtocol.prototype.createRoom = function (room, callback) {\n        assert.isObject(room, 'room');\n        assert.stringNotEmpty(room.name, 'room.name');\n        assert.stringNotEmpty(room.type, 'room.type');\n        assert.stringNotEmpty(room.description, 'room.description');\n        assert.isFunction(callback, 'callback');\n\n        var createRoom = {\n            sessionId: this.getSessionId(),\n            room: room\n        };\n\n        return sendRequest.call(this, 'chat.CreateRoom', createRoom, callback);\n    };\n\n    PCastProtocol.prototype.enterRoom = function (roomId, alias, member, timestamp, callback) {\n        if (roomId) {\n            assert.isString(roomId, 'roomId');\n        } else {\n            assert.isString(alias, 'alias');\n        }\n\n        assert.isObject(member, 'member');\n        assert.isNumber(timestamp, 'timestamp');\n        assert.isFunction(callback, 'callback');\n\n        var joinRoom = {\n            roomId: roomId,\n            alias: alias,\n            sessionId: this.getSessionId(),\n            member: member,\n            timestamp: timestamp\n        };\n\n        return sendRequest.call(this, 'chat.JoinRoom', joinRoom, callback);\n    };\n\n    PCastProtocol.prototype.leaveRoom = function (roomId, timestamp, callback) {\n        assert.isString(roomId, 'roomId');\n        assert.isNumber(timestamp, 'timestamp');\n        assert.isFunction(callback, 'callback');\n\n        var leaveRoom = {\n            roomId: roomId,\n            sessionId: this.getSessionId(),\n            timestamp: timestamp\n        };\n\n        return sendRequest.call(this, 'chat.LeaveRoom', leaveRoom, callback);\n    };\n\n    PCastProtocol.prototype.updateMember = function (member, timestamp, callback) {\n        assert.isObject(member, 'member');\n        assert.isNumber(timestamp, 'timestamp');\n        assert.isFunction(callback, 'callback');\n\n        member.updateStreams = member.hasOwnProperty('streams');\n\n        var updateMember = {\n            sessionId: this.getSessionId(),\n            member: member,\n            timestamp: timestamp\n        };\n\n        return sendRequest.call(this, 'chat.UpdateMember', updateMember, callback);\n    };\n\n    PCastProtocol.prototype.updateRoom = function (room, timestamp, callback) {\n        assert.isObject(room, 'room');\n        assert.isNumber(timestamp, 'timestamp');\n        assert.isFunction(callback, 'callback');\n\n        var updateRoom = {\n            sessionId: this.getSessionId(),\n            room: room,\n            timestamp: timestamp\n        };\n\n        return sendRequest.call(this, 'chat.UpdateRoom', updateRoom, callback);\n    };\n\n    PCastProtocol.prototype.sendMessageToRoom = function (roomId, chatMessage, callback) {\n        assert.stringNotEmpty(roomId, 'roomId');\n        assert.isObject(chatMessage, 'chatMessage');\n\n        var sendMessage = {\n            roomId: roomId,\n            chatMessage: chatMessage\n        };\n\n        return sendRequest.call(this, 'chat.SendMessageToRoom', sendMessage, callback);\n    };\n\n    PCastProtocol.prototype.subscribeToRoomConversation = function (sessionId, roomId, batchSize, callback) {\n        assert.stringNotEmpty(sessionId, 'sessionId');\n        assert.stringNotEmpty(roomId, 'roomId');\n        assert.isNumber(batchSize, 'batchSize');\n\n        var fetchRoomConversation = {\n            sessionId: sessionId,\n            roomId: roomId,\n            limit: batchSize,\n            options: ['Subscribe']\n        };\n\n        return sendRequest.call(this, 'chat.FetchRoomConversation', fetchRoomConversation, callback);\n    };\n\n    PCastProtocol.prototype.getMessages = function (sessionId, roomId, batchSize, afterMessageId, beforeMessageId, callback) {\n        assert.stringNotEmpty(sessionId, 'sessionId');\n        assert.stringNotEmpty(roomId, 'roomId');\n\n        if (!beforeMessageId || !afterMessageId) {\n            assert.isNumber(batchSize, 'batchSize');\n        }\n\n        var fetchRoomConversation = {\n            sessionId: sessionId,\n            roomId: roomId,\n            limit: batchSize || 0,\n            options: []\n        };\n\n        if (beforeMessageId) {\n            assert.stringNotEmpty(beforeMessageId, 'beforeMessageId');\n\n            fetchRoomConversation.beforeMessageId = beforeMessageId;\n        }\n\n        if (afterMessageId) {\n            assert.stringNotEmpty(afterMessageId, 'afterMessageId');\n\n            fetchRoomConversation.afterMessageId = afterMessageId;\n        }\n\n        return sendRequest.call(this, 'chat.FetchRoomConversation', fetchRoomConversation, callback);\n    };\n\n    PCastProtocol.prototype.toString = function () {\n        return 'PCastProtocol[' + this._webSocket.toString() + ']';\n    };\n\n    function sendRequest(type, message, callback) {\n        var requestId = (this._nextRequestId++).toString();\n        var request = {\n            requestId: requestId,\n            type: type,\n            payload: this._mqProtocol.encode(type, message)\n        };\n\n        this._requests[requestId] = callback;\n\n        return this._webSocket.send(this._mqProtocol.encode('mq.Request', request).toString('base64'));\n    }\n\n    function getEventHandlers(eventName) {\n        var handlers = this._events[eventName];\n\n        if (!handlers) {\n            this._events[eventName] = handlers = [];\n        }\n\n        return handlers;\n    }\n\n    function removeEventHandler(eventName, handler) {\n        var handlers = this._events[eventName];\n\n        _.remove(handlers, function removeHandler(currentHandler) {\n            return currentHandler === handler;\n        });\n\n        this._events[eventName] = handlers;\n    }\n\n    function triggerEvent(eventName, args) {\n        var handlers = this._events[eventName];\n\n        if (handlers) {\n            for (var i = 0; i < handlers.length; i++) {\n                handlers[i].apply(this, args);\n            }\n        }\n    }\n\n    function onMessage(evt) {\n        var response = this._mqProtocol.decode('mq.Response', ByteBuffer.wrap(evt.data, 'base64'));\n        this._logger.info('>> [%s]', response.type);\n\n        var message = this._mqProtocol.decode(response.type, response.payload);\n\n        if (response.type === 'pcast.AuthenticateResponse') {\n            this._observableSessionId.setValue(message.sessionId);\n        } else if (response.type === 'pcast.StreamEnded') {\n            triggerEvent.call(this, 'streamEnded', [message]);\n        } else if (response.type === 'pcast.StreamDataQuality') {\n            triggerEvent.call(this, 'dataQuality', [message]);\n        } else if (response.type === 'chat.RoomEvent') {\n            triggerEvent.call(this, 'roomEvent', [message]);\n        } else if (response.type === 'chat.RoomConversationEvent') {\n            triggerEvent.call(this, 'roomChatEvent', [message]);\n        }\n\n        var callback = this._requests[response.requestId];\n\n        if (callback) {\n            delete this._requests[response.requestId];\n\n            if (response.type === 'mq.Error') {\n                var error = message;\n\n                callback(error, null);\n            } else {\n                callback(null, message);\n            }\n        }\n    }\n\n    function onReconnecting(evt) { // eslint-disable-line no-unused-vars\n        triggerEvent.call(this, 'reconnecting');\n    }\n\n    function onConnected(evt) { // eslint-disable-line no-unused-vars\n        triggerEvent.call(this, 'connected');\n    }\n\n    function onReconnected(evt) { // eslint-disable-line no-unused-vars\n        triggerEvent.call(this, 'reconnected');\n    }\n\n    function onDisconnected(evt) {\n        triggerEvent.call(this, 'disconnected', [evt.code, evt.reason]);\n    }\n\n    function onError(evt) {\n        triggerEvent.call(this, 'error', [evt.data]);\n    }\n\n    return PCastProtocol;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/PCastProtocol.js\n// module id = 38\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-rtc'\n], function (_, phenixRTC) {\n    'use strict';\n\n    var defaultMonitoringInterval = 4000;\n    var defaultConditionMonitoringInterval = 1500;\n    var defaultFrameRateThreshold = 2;\n    var defaultAudioBitRateThreshold = 5000;\n    var defaultVideoBitRateThreshold = 6000;\n    var defaultConditionCountForNotificationThreshold = 3;\n\n    function PeerConnectionMonitor(name, peerConnection, logger) {\n        if (typeof name !== 'string') {\n            throw new Error('Must pass a valid \"name\"');\n        }\n\n        if (typeof peerConnection !== 'object') {\n            throw new Error('Must pass a valid \"peerConnection\"');\n        }\n\n        if (typeof logger !== 'object') {\n            throw new Error('Must pass a valid \"logger\"');\n        }\n\n        this._name = name;\n        this._peerConnection = peerConnection;\n        this._logger = logger;\n    }\n\n    PeerConnectionMonitor.prototype.start = function (options, activeCallback, monitorCallback) {\n        return monitorPeerConnection.call(this, this._name, this._peerConnection, options, activeCallback, monitorCallback);\n    };\n\n    PeerConnectionMonitor.prototype.toString = function () {\n        return 'PeerConnectionMonitor[]';\n    };\n\n    function monitorPeerConnection(name, peerConnection, options, activeCallback, monitorCallback) {\n        if (typeof name !== 'string') {\n            throw new Error('Must pass a valid \"name\"');\n        }\n\n        if (typeof peerConnection !== 'object') {\n            throw new Error('Must pass a valid \"peerConnection\"');\n        }\n\n        if (typeof options !== 'object') {\n            throw new Error('Must pass a valid \"options\"');\n        }\n\n        if (typeof activeCallback !== 'function') {\n            throw new Error('Must pass a valid \"activeCallback\"');\n        }\n\n        if (typeof monitorCallback !== 'function') {\n            throw new Error('Must pass a valid \"monitorCallback\"');\n        }\n\n        if (options.direction !== 'inbound' && options.direction !== 'outbound') {\n            throw new Error('Invalid monitoring direction');\n        }\n\n        var that = this;\n        var conditionCount = 0;\n        var frameRate = undefined;\n        var videoBitRate = undefined;\n        var audioBitRate = undefined;\n        var lastAudioBytes = {};\n        var lastVideoBytes = {};\n        var frameRateFailureThreshold = options.frameRateThreshold || defaultFrameRateThreshold;\n        var videoBitRateFailureThreshold = options.videoBitRateThreshold || defaultVideoBitRateThreshold;\n        var audioBitRateFailureThreshold = options.audioBitRateThreshold || defaultAudioBitRateThreshold;\n        var conditionCountForNotificationThreshold = options.conditionCountForNotificationThreshold || defaultConditionCountForNotificationThreshold;\n        var monitoringInterval = options.monitoringInterval || defaultMonitoringInterval;\n        var conditionMonitoringInterval = options.monitoringInterval || defaultConditionMonitoringInterval;\n        var monitorFrameRate = options.hasOwnProperty('monitorFrameRate') ? options.monitorFrameRate : true;\n        var monitorBitRate = options.hasOwnProperty('monitorBitRate') ? options.monitorBitRate : true;\n        var monitorState = options.hasOwnProperty('monitorState') ? options.monitorState : true;\n\n        function nextCheck() {\n            var selector = null;\n\n            getStats(peerConnection, selector, function successCallback(report) {\n                var hasFrameRate = false;\n                var hasVideoBitRate = false;\n                var hasAudioBitRate = false;\n                var readable = false;\n                var writable = false;\n\n                function eachStats(stats, reportId) { // eslint-disable-line no-unused-vars\n                    var trackId = stats.ssrc;\n                    var currentBytes = null;\n\n                    switch (phenixRTC.browser) {\n                    case 'Firefox':\n                        writable = readable |= stats.selected && stats.state === 'succeeded';\n\n                        if (options.direction === 'outbound' && (stats.type === 'outboundrtp' || stats.type === 'outbound-rtp')) {\n                            currentBytes = new StatsBytes(stats.bytesSent);\n\n                            switch (stats.mediaType) {\n                            case 'video':\n                                that._logger.debug('[%s] Outbound [%s] [%s] with bitrate [%s], droppedFrames [%s] and frame rate [%s]',\n                                    name, stats.mediaType, stats.ssrc, stats.bitrateMean, stats.droppedFrames, stats.framerateMean);\n                                hasFrameRate = true;\n                                frameRate = stats.framerateMean || 0;\n                                hasVideoBitRate = true;\n                                videoBitRate = calculateBitRate(currentBytes, lastVideoBytes[trackId]);\n                                lastVideoBytes[trackId] = currentBytes;\n\n                                break;\n                            case 'audio':\n                                that._logger.debug('[%s] Outbound [%s] [%s]',\n                                    name, stats.mediaType, stats.ssrc);\n                                hasAudioBitRate = true;\n                                audioBitRate = calculateBitRate(currentBytes, lastAudioBytes[trackId]);\n                                lastAudioBytes[trackId] = currentBytes;\n\n                                break;\n                            default:\n                                break;\n                            }\n                        }\n\n                        if (options.direction === 'inbound' && (stats.type === 'inboundrtp' || stats.type === 'inbound-rtp')) {\n                            currentBytes = new StatsBytes(stats.bytesReceived);\n\n                            switch (stats.mediaType) {\n                            case 'video':\n                                that._logger.debug('[%s] Inbound [%s] [%s] with framerate [%s] and jitter [%s]',\n                                    name, stats.mediaType, stats.ssrc, stats.framerateMean, stats.jitter);\n\n                                // Inbound frame rate is not calculated correctly\n                                // hasFrameRate = true;\n                                // frameRate = stats.framerateMean || 0;\n                                hasVideoBitRate = true;\n                                videoBitRate = calculateBitRate(currentBytes, lastVideoBytes[trackId]);\n                                lastVideoBytes[trackId] = currentBytes;\n\n                                break;\n                            case 'audio':\n                                that._logger.debug('[%s] Inbound [%s] [%s] with jitter [%s]',\n                                    name, stats.mediaType, stats.ssrc, stats.jitter);\n                                hasAudioBitRate = true;\n                                audioBitRate = calculateBitRate(currentBytes, lastAudioBytes[trackId]);\n                                lastAudioBytes[trackId] = currentBytes;\n\n                                break;\n                            default:\n                                break;\n                            }\n                        }\n\n                        break;\n                    default:\n                        if (stats.googWritable === 'true') {\n                            writable = true;\n                        }\n\n                        if (stats.googReadable === 'true') {\n                            readable = true;\n                        }\n\n                        if (stats.type !== 'ssrc') {\n                            return;\n                        }\n\n                        if (options.direction === 'outbound') {\n                            currentBytes = new StatsBytes(stats.bytesSent);\n\n                            switch (stats.mediaType) {\n                            case 'video':\n                                that._logger.debug('[%s] Outbound [%s] [%s] with average encoding time [%s] ms (CPU limited=[%s]) and RTT [%s]',\n                                    name, stats.mediaType, stats.ssrc, stats.googAvgEncodeMs, stats.googCpuLimitedResolution, stats.googRtt);\n                                hasFrameRate = true;\n                                frameRate = stats.googFrameRateSent || 0;\n                                hasVideoBitRate = true;\n                                videoBitRate = calculateBitRate(currentBytes, lastVideoBytes[trackId]);\n                                lastVideoBytes[trackId] = currentBytes;\n\n                                break;\n                            case 'audio':\n                                that._logger.debug('[%s] Outbound [%s] [%s] with audio input level [%s] and RTT [%s] and jitter [%s]',\n                                    name, stats.mediaType, stats.ssrc, stats.audioInputLevel, stats.googRtt, stats.googJitterReceived);\n                                hasAudioBitRate = true;\n                                audioBitRate = calculateBitRate(currentBytes, lastAudioBytes[trackId]);\n                                lastAudioBytes[trackId] = currentBytes;\n\n                                break;\n                            default:\n                                break;\n                            }\n                        } else if (options.direction === 'inbound') {\n                            currentBytes = new StatsBytes(stats.bytesReceived);\n\n                            switch (stats.mediaType) {\n                            case 'video':\n                                that._logger.debug('[%s] Inbound [%s] [%s] with current delay [%s] ms and target delay [%s] ms',\n                                    name, stats.mediaType, stats.ssrc, stats.googCurrentDelayMs, stats.googTargetDelayMs);\n                                hasFrameRate = true;\n                                frameRate = stats.googFrameRateReceived || 0;\n                                hasVideoBitRate = true;\n                                videoBitRate = calculateBitRate(currentBytes, lastVideoBytes[trackId]);\n                                lastVideoBytes[trackId] = currentBytes;\n\n                                break;\n                            case 'audio':\n                                that._logger.debug('[%s] Inbound [%s] [%s] with output level [%s] and jitter [%s] and jitter buffer [%s] ms',\n                                    name, stats.mediaType, stats.ssrc, stats.audioOutputLevel, stats.googJitterReceived, stats.googJitterBufferMs);\n                                hasAudioBitRate = true;\n                                audioBitRate = calculateBitRate(currentBytes, lastAudioBytes[trackId]);\n                                lastAudioBytes[trackId] = currentBytes;\n\n                                break;\n                            default:\n                                break;\n                            }\n                        }\n\n                        break;\n                    }\n                }\n\n                if (report.forEach) {\n                    report.forEach(eachStats);\n                } else {\n                    for (var reportId in report) {\n                        var stats = report[reportId];\n\n                        eachStats(stats, reportId);\n                    }\n                }\n\n                var hasActiveAudio = hasActiveAudioInSdp(peerConnection);\n                var hasActiveVideo = hasActiveVideoInSdp(peerConnection);\n\n                if (hasVideoBitRate && videoBitRate === 0 || hasAudioBitRate && audioBitRate === 0 || hasFrameRate && frameRate === 0) {\n                    hasVideoBitRate = hasVideoBitRate && hasActiveVideo;\n                    hasAudioBitRate = hasAudioBitRate && hasActiveAudio;\n                    hasFrameRate = hasFrameRate && hasActiveVideo;\n\n                    readable = readable || !(hasActiveVideo || hasActiveAudio);\n                    writable = writable || !(hasActiveVideo || hasActiveAudio);\n                }\n\n                if (hasAudioBitRate || hasVideoBitRate || hasFrameRate) {\n                    that._logger.debug('[%s] Current bit rate is [%s] bps for audio and [%s] bps for video with [%s] FPS',\n                        name, Math.ceil(audioBitRate || 0), Math.ceil(videoBitRate || 0), frameRate || '?');\n                }\n\n                if (!activeCallback()) {\n                    that._logger.info('[%s] Finished monitoring of peer connection', name);\n\n                    return;\n                }\n\n                if (monitorState\n                    && (peerConnection.connectionState === 'closed'\n                    || peerConnection.connectionState === 'failed'\n                    || peerConnection.iceConnectionState === 'failed')) {\n                    var active = hasActiveAudio && hasActiveVideo;\n                    var tracks = getAllTracks.call(that, peerConnection);\n\n                    if (!active && hasMediaSectionsInSdp(peerConnection)) {\n                        that._logger.info('[%s] Finished monitoring of peer connection with [%s] inactive tracks', name, tracks.length);\n\n                        return;\n                    }\n\n                    conditionCount++;\n                } else if (monitorFrameRate && hasFrameRate && frameRate <= frameRateFailureThreshold) {\n                    conditionCount++;\n                } else if (monitorBitRate && hasAudioBitRate && audioBitRate <= audioBitRateFailureThreshold) {\n                    conditionCount++;\n                } else if (monitorBitRate && hasVideoBitRate && videoBitRate <= videoBitRateFailureThreshold) {\n                    conditionCount++;\n                } else if (!readable || !writable) {\n                    conditionCount++;\n                } else {\n                    conditionCount = 0;\n                }\n\n                if (conditionCount >= conditionCountForNotificationThreshold) {\n                    if (!monitorCallback('condition', frameRate, videoBitRate, audioBitRate)) {\n                        that._logger.error('[%s] Failure detected with frame rate [%s] FPS and bit rate [%s/%s] bps: [%s]', name, frameRate, audioBitRate, videoBitRate, report);\n                    } else {\n                        // Failure is acknowledged and muted\n                        conditionCount = Number.MIN_VALUE;\n                        setTimeout(nextCheck, monitoringInterval);\n                    }\n                } else {\n                    setTimeout(nextCheck, conditionCount > 0 ? conditionMonitoringInterval : monitoringInterval);\n                }\n            }, function errorCallback(error) {\n                monitorCallback('error', error);\n            });\n        }\n\n        setTimeout(nextCheck, monitoringInterval);\n    }\n\n    function StatsBytes(value) {\n        this.time = _.now();\n        this.value = value || 0;\n    }\n\n    function normalizeStatsReport(response) {\n        if (phenixRTC.browser === 'Firefox') {\n            return response;\n        }\n\n        var normalizedReport = {};\n\n        response.result().forEach(function (report) {\n            var normalizedStatistics = {\n                id: report.id,\n                type: report.type\n            };\n\n            report.names().forEach(function (name) {\n                normalizedStatistics[name] = report.stat(name);\n            });\n\n            normalizedReport[normalizedStatistics.id] = normalizedStatistics;\n        });\n\n        return normalizedReport;\n    }\n\n    function getStats(peerConnection, selector, successCallback, monitorCallback) {\n        switch (phenixRTC.browser) {\n        case 'Firefox':\n            return peerConnection.getStats(selector)\n                .then(function (response) {\n                    var report = normalizeStatsReport(response);\n\n                    successCallback(report);\n                }).catch(function (e) {\n                    monitorCallback('error', e);\n                });\n        default:\n            return peerConnection.getStats(function (response) {\n                var report = normalizeStatsReport(response);\n\n                successCallback(report);\n            }, selector, function (e) {\n                monitorCallback('error', e);\n            });\n        }\n    }\n\n    function getAllTracks(peerConnection) {\n        var localStreams = peerConnection.getLocalStreams();\n        var remoteStreams = peerConnection.getRemoteStreams();\n        var localTracks = [];\n        var remoteTracks = [];\n\n        _.forEach(localStreams, function(stream) {\n            localTracks = localTracks.concat(stream.getTracks());\n        });\n\n        _.forEach(remoteStreams, function(stream) {\n            remoteTracks = remoteTracks.concat(stream.getTracks());\n        });\n\n        if (localTracks.length !== 0 && remoteTracks.length !== 0) {\n            this._logger.error('Invalid State. PeerConnection contains [%s] local and [%s] remote streams.', localStreams.length, remoteStreams.length);\n\n            throw new Error('Invalid State. PeerConnection contains both local and remote streams.');\n        } else if (localTracks.length !== 0) {\n            return localTracks;\n        } else if (remoteTracks.length !== 0) {\n            return remoteTracks;\n        }\n\n        return [];\n    }\n\n    function hasMediaSectionsInSdp(peerConnection) {\n        var indexOfSection = findInSdpSections(peerConnection, function(section) {\n            return section.startsWith('video') || section.startsWith('audio');\n        });\n\n        return _.isNumber(indexOfSection);\n    }\n\n    function hasActiveAudioInSdp(peerConnection) {\n        var indexOfActiveVideo = findInSdpSections(peerConnection, function(section, index, remoteSections) {\n            if (section.startsWith('audio')) {\n                return section.indexOf('a=inactive') === -1 && remoteSections[index].indexOf('a=inactive') === -1;\n            }\n\n            return false;\n        });\n\n        return _.isNumber(indexOfActiveVideo);\n    }\n\n    function hasActiveVideoInSdp(peerConnection) {\n        var indexOfActiveVideo = findInSdpSections(peerConnection, function(section, index, remoteSections) {\n            if (section.startsWith('video')) {\n                return section.indexOf('a=inactive') === -1 && remoteSections[index].indexOf('a=inactive') === -1;\n            }\n\n            return false;\n        });\n\n        return _.isNumber(indexOfActiveVideo);\n    }\n\n    function findInSdpSections(peerConnection, callback) {\n        var localSections = peerConnection.localDescription.sdp.split('m=');\n        var remoteSections = peerConnection.remoteDescription.sdp.split('m=');\n\n        if (localSections.length !== remoteSections.length) {\n            return false;\n        }\n\n        return _.findIndex(localSections, function(section, index) {\n            return callback(section, index, remoteSections);\n        });\n    }\n\n    function calculateBitRate(currentBytes, lastBytes) {\n        lastBytes = lastBytes || new StatsBytes();\n\n        return (8 * (currentBytes.value - lastBytes.value))\n            / ((currentBytes.time - lastBytes.time) / 1000.0);\n    }\n\n    return PeerConnectionMonitor;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/PeerConnectionMonitor.js\n// module id = 39\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-http',\n    'ByteBuffer',\n    '../MQProtocol',\n    'phenix-web-network-connection-monitor',\n    'phenix-rtc'\n], function (_, assert, http, ByteBuffer, MQProtocol, NetworkConnectionMonitor, rtc) {\n    var networkDisconnectHysteresisInterval = 0;\n\n    function MetricsTransmitter() {\n        this._loggingUrl = '/analytix/metrics';\n        this._domain = location.hostname;\n        this._protocol = new MQProtocol();\n        this._maxAttempts = 3;\n        this._maxBufferedRecords = 1000;\n        this._maxBatchSize = 512;\n        this._records = [];\n        this._pending = false;\n        this._baseUri = '';\n        this._isEnabled = true;\n        this._networkConnectionMonitor = createAndStartNetworkConnectionMonitor.call(this);\n        this._browser = (rtc.browser || 'Browser') + '/' + (rtc.browserVersion || '?');\n    }\n\n    MetricsTransmitter.prototype.setUri = function setUri(uri) {\n        assert.stringNotEmpty(uri, 'uri');\n\n        this._baseUri = uri;\n    };\n\n    MetricsTransmitter.prototype.isEnabled = function isEnabled() {\n        return this._isEnabled;\n    };\n\n    MetricsTransmitter.prototype.setEnabled = function setEnabled(enabled) {\n        assert.isBoolean(enabled);\n\n        this._isEnabled = enabled;\n    };\n\n    MetricsTransmitter.prototype.submitMetric = function submit(metric, since, sessionId, streamId, environment, version, value) {\n        assert.stringNotEmpty(metric, 'metric');\n        assert.isObject(value, 'value');\n\n        addMetricToRecords.call(this, metric, since, sessionId, streamId, environment, version, value);\n\n        deleteRecordsIfAtCapacity.call(this, since, sessionId, streamId, environment, version);\n\n        sendBatchMessagesIfNonePending.call(this);\n    };\n\n    function createAndStartNetworkConnectionMonitor() {\n        var that = this;\n        var networkConnectionMonitor = new NetworkConnectionMonitor(networkDisconnectHysteresisInterval);\n\n        function onReconnect() {\n            that._isOffline = false;\n\n            sendBatchMessagesIfNonePending.call(that);\n        }\n\n        function onDisconnect() {\n            that._isOffline = true;\n        }\n\n        networkConnectionMonitor.start(onReconnect, onDisconnect);\n\n        return networkConnectionMonitor;\n    }\n\n    function addMetricToRecords(metric, since, sessionId, streamId, environment, version, value) {\n        var record = _.assign({}, value, {\n            metric: metric,\n            timestamp: _.isoString(),\n            sessionId: sessionId,\n            streamId: streamId,\n            source: this._browser,\n            fullQualifiedName: this._domain,\n            environment: environment,\n            version: version,\n            runtime: since\n        });\n\n        this._records.push(record);\n    }\n\n    function deleteRecordsIfAtCapacity(since, sessionId, streamId, environment, version) {\n        if (this._records.length > this._maxBufferedRecords) {\n            var deleteRecords = this._records.length - (this._maxBufferedRecords / 2);\n\n            this._records = this._records.slice(deleteRecords);\n            this._records.unshift({\n                timestamp: _.isoString(),\n                sessionId: sessionId,\n                streamId: streamId,\n                source: this._browser,\n                metric: 'MetricDropped',\n                value: {uint64: deleteRecords},\n                fullQualifiedName: this._domain,\n                environment: environment,\n                version: version,\n                runtime: since\n            });\n        }\n    }\n\n    function sendBatchMessagesIfNonePending() {\n        if (this._pending || !this._baseUri || !this._isEnabled || this._isOffline || this._records.length === 0) {\n            return;\n        }\n\n        var submitMetricRecords = {records: _.take(this._records, this._maxBatchSize)};\n\n        this._records = this._records.slice(this._maxBatchSize);\n        this._pending = true;\n\n        var that = this;\n\n        try {\n            sendEncodedHttpRequest.call(this, this._baseUri + this._loggingUrl, submitMetricRecords, function onTimeout() {\n                setTimeout(function waitForDisconnectTimeout() {\n                    if (!that._isOffline) {\n                        return;\n                    }\n\n                    that._records = that._records.concat(submitMetricRecords.records);\n                }, networkDisconnectHysteresisInterval);\n            });\n        } catch (e) {\n            this._pending = false;\n\n            throw e;\n        }\n    }\n\n    function sendEncodedHttpRequest(url, dataToEncode, onTimeout) {\n        var that = this;\n\n        var data = this._protocol.encode('analytix.SubmitMetricRecords', dataToEncode).toBinary();\n\n        function handlePost(error, result) {\n            that._pending = false;\n\n            if (error) {\n                if (error.message === 'timeout') {\n                    onTimeout();\n                }\n\n                return {\n                    status: 'error',\n                    storedRecords: 0\n                };\n            }\n\n            return that._protocol.decode('analytix.SubmitMetricRecordsResponse', ByteBuffer.fromBinary(result));\n        }\n\n        http.postWithRetry(url, data, {contentType: 'application/protobuf'}, handlePost, this._maxAttempts);\n    }\n\n    return MetricsTransmitter;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/analytix/MetricsTransmitter.js\n// module id = 40\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-rtc'\n], function (_, assert, phenixRTC) {\n    'use strict';\n\n    var start = window['__phenixPageLoadTime'] || window['__pageLoadTime'] || _.now();\n    var defaultEnvironment = 'production' || '?';\n    var sdkVersion = '2017-08-14T21:49:04Z' || '?';\n\n    function StreamAnalytix(sessionId, logger, metricsTransmitter) {\n        assert.stringNotEmpty(sessionId, 'sessionId');\n\n        this._environment = defaultEnvironment;\n        this._version = sdkVersion;\n        this._sessionId = sessionId;\n        this._properties = {};\n        this._logger = logger;\n        this._metricsTransmitter = metricsTransmitter;\n        this._start = _.now();\n        this._disposables = [];\n\n        logMetric.call(this, 'Stream initializing');\n    }\n\n    StreamAnalytix.prototype.setProperty = function(name, value) {\n        assert.stringNotEmpty(name, 'name');\n        assert.stringNotEmpty(value, 'value');\n\n        this._properties[name] = value;\n    };\n\n    StreamAnalytix.prototype.recordMetric = function(metric, value, previousValue) {\n        assert.stringNotEmpty(metric, 'metric');\n\n        recordMetricRecord.call(this, {\n            metric: metric,\n            elapsed: this.elapsed(),\n            value: value,\n            previousValue: previousValue\n        }, since());\n    };\n\n    StreamAnalytix.prototype.setStreamId = function(streamId) {\n        assert.stringNotEmpty(streamId, 'streamId');\n\n        if (this._streamId) {\n            throw new Error('Stream ID can only be set once.');\n        }\n\n        this._streamId = streamId;\n\n        var now = _.now();\n\n        recordMetricRecord.call(this, {\n            metric: 'Initialized',\n            elapsed: this.elapsed() - now + this._start // Adjust for delay to get the stream ID\n        }, since() - (now - this._start) / 1000); // Adjust for delay to get the stream ID);\n    };\n\n    StreamAnalytix.prototype.setStartOffset = function(startOffset) {\n        assert.isNumber(startOffset, 'startOffset');\n\n        if (this._startOffset) {\n            throw new Error('Start offset can only be set once.');\n        }\n\n        this._startOffset = startOffset;\n\n        this.recordMetric('Offset', {uint64: startOffset});\n    };\n\n    StreamAnalytix.prototype.getStartOffset = function () {\n        return this._startOffset;\n    };\n\n    StreamAnalytix.prototype.elapsed = function () {\n        var now = _.now();\n\n        return now - this._start;\n    };\n\n    StreamAnalytix.prototype.stop = function() {\n        _.forEach(this._disposables, function(dispose) {\n            dispose();\n        });\n\n        this.recordMetric('Stopped');\n\n        logMetric.call(this, 'Stream stopped');\n    };\n\n    StreamAnalytix.prototype.recordTimeToFirstFrame = function(video) {\n        var that = this;\n        var timeOfFirstFrame;\n\n        var listenForFirstFrame = function() {\n            if (timeOfFirstFrame) {\n                return;\n            }\n\n            that.recordMetric('TimeToFirstFrame');\n\n            timeOfFirstFrame = _.now();\n\n            logMetric.call(that, 'First frame');\n\n            phenixRTC.removeEventListener(video, 'loadeddata', listenForFirstFrame);\n        };\n\n        phenixRTC.addEventListener(video, 'loadeddata', listenForFirstFrame);\n    };\n\n    // TODO(dy) Add logging for bit rate changes using PC.getStats\n\n    StreamAnalytix.prototype.recordVideoResolutionChanges = function(video) {\n        var that = this;\n        var lastResolution = {\n            width: video.videoWidth,\n            height: video.videoHeight\n        };\n\n        var listenForResolutionChangeOnProgress = function() {\n            if (lastResolution.width === video.videoWidth && lastResolution.height === video.videoHeight) {\n                return;\n            }\n\n            that.recordMetric('ResolutionChanged', {string: video.videoWidth + 'x' + video.videoHeight}, {string: lastResolution.width + 'x' + lastResolution.height});\n\n            lastResolution = {\n                width: video.videoWidth,\n                height: video.videoHeight\n            };\n\n            logMetric.call(that, 'Resolution changed: width [%s] height [%s]', video.videoWidth, video.videoHeight);\n        };\n\n        // TODO(sbi) We should use our stream polling for this as it's way more efficien than processing on each progress\n\n        // Events loadedmetadata and loadeddata do not fire as expected. So Progress is used.\n        phenixRTC.addEventListener(video, 'progress', listenForResolutionChangeOnProgress);\n\n        this._disposables.push(function() {\n            phenixRTC.removeEventListener(video, 'progress', listenForResolutionChangeOnProgress);\n        });\n    };\n\n    StreamAnalytix.prototype.recordRebuffering = function(video) {\n        var that = this;\n        var videoStalled;\n        var lastProgress;\n\n        var listenForStall = function() {\n            if (videoStalled) {\n                return;\n            }\n\n            that.recordMetric('Stalled');\n\n            videoStalled = _.now();\n\n            logMetric.call(that, '[buffering] Stream has stalled');\n        };\n\n        var listenForContinuation = function(event) {\n            var bufferLength = video.buffered.length;\n            var hasNotProgressedSinceLastProgressEvent = bufferLength > 0 && event.type === 'progress' && video.buffered.end(bufferLength - 1) === lastProgress;\n\n            if (!videoStalled || !bufferLength || hasNotProgressedSinceLastProgressEvent) {\n                return;\n            }\n\n            if (event.type === 'progress') {\n                lastProgress = video.buffered.end(bufferLength - 1);\n            }\n\n            var timeSinceStop = _.now() - videoStalled;\n\n            that.recordMetric('Buffering', {uint64: timeSinceStop});\n            that.recordMetric('Playing');\n\n            logMetric.call(that, '[buffering] Stream has recovered from stall after [%s] milliseconds', timeSinceStop);\n\n            videoStalled = null;\n        };\n\n        phenixRTC.addEventListener(video, 'stalled', listenForStall);\n        phenixRTC.addEventListener(video, 'pause', listenForStall);\n        phenixRTC.addEventListener(video, 'suspend', listenForStall);\n        phenixRTC.addEventListener(video, 'play', listenForContinuation);\n        phenixRTC.addEventListener(video, 'playing', listenForContinuation);\n        phenixRTC.addEventListener(video, 'progress', listenForContinuation);\n\n        this._disposables.push(function() {\n            phenixRTC.removeEventListener(video, 'stalled', listenForStall);\n            phenixRTC.removeEventListener(video, 'pause', listenForStall);\n            phenixRTC.removeEventListener(video, 'suspend', listenForStall);\n            phenixRTC.removeEventListener(video, 'play', listenForContinuation);\n            phenixRTC.removeEventListener(video, 'playing', listenForContinuation);\n            phenixRTC.removeEventListener(video, 'progress', listenForContinuation);\n        });\n    };\n\n    function logMetric() {\n        var args = Array.prototype.slice.call(arguments);\n\n        if (args.length === 0) {\n            throw new Error('Invalid logging arguments.');\n        }\n\n        var streamAnalytixPrepend = '[%s] [StreamAnalytix] [%s] ';\n        var message = streamAnalytixPrepend + args[0];\n        var loggingArguments = args.slice(1);\n        var analytixArguments = [message, this._streamId, _.now() - this._start].concat(loggingArguments);\n\n        this._logger.debug.apply(this._logger, analytixArguments);\n    }\n\n    function since() {\n        var now = _.now();\n\n        return (now - start) / 1000;\n    }\n\n    function recordMetricRecord(record, since) {\n        assert.stringNotEmpty(record.metric, 'record.metric');\n\n        var annotatedRecord = _.assign({}, this._properties, record);\n\n        this._metricsTransmitter.submitMetric(record.metric, since, this._sessionId, this._streamId, this._environment, this._version, annotatedRecord);\n    }\n\n    return StreamAnalytix;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/analytix/StreamAnalytix.js\n// module id = 41\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    '../environment',\n    './MetricsTransmitter'\n], function (_, assert, environment, MetricsTransmitter) {\n    var config = {\n        urls: {\n            local: '',\n            staging: 'https://analytix-stg.phenixp2p.com',\n            production: 'https://analytix.phenixp2p.com'\n        }\n    };\n\n    function MetricsTransmitterFactory() {\n        this._metricsTransmitters = {};\n    }\n\n    MetricsTransmitterFactory.prototype.createMetricsTransmitter = function createMetricsTransmitter(pcastBaseUri) {\n        var env = environment.parseEnvFromPcastBaseUri(pcastBaseUri || '');\n\n        var analytixServerUrl = config.urls[env];\n\n        if (!this._metricsTransmitters[env]) {\n            this._metricsTransmitters[env] = createNewTransmitter.call(this, analytixServerUrl);\n        }\n\n        return this._metricsTransmitters[env];\n    };\n\n    function createNewTransmitter(uri) {\n        var transmitter = new MetricsTransmitter();\n\n        if (uri) {\n            transmitter.setUri(uri);\n        } else {\n            transmitter.setEnabled(false);\n        }\n\n        return transmitter;\n    }\n\n    return new MetricsTransmitterFactory();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/analytix/metricsTransmitterFactory.js\n// module id = 42\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    function AudioContext() {\n        this.init();\n    }\n\n    AudioContext.prototype.init = function init() {\n        if (!window.AudioContext) {\n            throw new Error('Browser does not support AudioContext');\n        }\n\n        this._audioContext = new window.AudioContext();\n    };\n\n    AudioContext.prototype.getNativeAudioContext = function getNativeAudioContext() {\n        return this._audioContext;\n    };\n\n    AudioContext.prototype.toString = function toString() {\n        return 'AudioContext';\n    };\n\n    return AudioContext;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/audio/AudioContext.js\n// module id = 43\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert'\n], function (_, assert) {\n    'use strict';\n\n    var defaultSpeakingHysteresisInterval = 50;\n    var defaultSilenceHysteresisInterval = 1500;\n\n    function AudioSpeakerDetectionAlgorithm(logger) {\n        assert.isObject(logger);\n\n        this._logger = logger;\n\n        this.init();\n    }\n\n    AudioSpeakerDetectionAlgorithm.prototype.init = function init() {\n\n    };\n\n    AudioSpeakerDetectionAlgorithm.prototype.onValue = function onValue(callback) {\n        this._callback = callback;\n    };\n\n    AudioSpeakerDetectionAlgorithm.prototype.startDetection = function startDetection(audioVolumeMeter, options) {\n        var that = this;\n\n        return startAudioDetection.call(that, audioVolumeMeter, options);\n    };\n\n    AudioSpeakerDetectionAlgorithm.prototype.toString = function toString() {\n        return 'AudioSpeakerDetection';\n    };\n\n    function startAudioDetection(audioVolumeMeter, options) {\n        assert.isObject(audioVolumeMeter, 'audioVolumeMeter');\n\n        options = options || {};\n\n        var that = this;\n        var stopped = false;\n        var speakingHysteresisInterval = options.speakingHysteresisInterval || defaultSpeakingHysteresisInterval;\n        var silenceHysteresisInterval = options.silenceHysteresisInterval || defaultSilenceHysteresisInterval;\n\n        assert.isNumber(speakingHysteresisInterval, 'options.speakingHysteresisInterval');\n        assert.isNumber(silenceHysteresisInterval, 'options.silenceHysteresisInterval');\n\n        var speaking = false;\n        var nextSpeakingDeadline = _.now() + speakingHysteresisInterval;\n        var nextSilenceDeadline = _.now() + silenceHysteresisInterval;\n\n        audioVolumeMeter.onValue(function (value) {\n            if (stopped) {\n                return;\n            }\n\n            assert.isObject(audioVolumeMeter, 'audioVolumeMeter');\n            assert.isNumber(value.date, 'value.date');\n            assert.isNumber(value.value, 'value.value');\n            assert.isNumber(value.smoothedValue, 'value.smoothedValue');\n            assert.isNumber(value.smoothedPeakValue, 'value.smoothedPeakValue');\n            assert.isNumber(value.clipped, 'value.clipped');\n\n            var speakingThreshold = value.value > 0.01 && value.value > 2 * value.smoothedValue && value.value > 0.25 * value.smoothedPeakValue;\n            var speakingContinuationThreshold = value.value > 0.8 * value.smoothedValue;\n            var notSpeakingThreshold = value.value < 0.5 * value.smoothedValue;\n            var notSpeakingContinuationThreshold = !speakingThreshold;\n\n            if ((speakingThreshold || (speaking && speakingContinuationThreshold)) && nextSpeakingDeadline < value.date) {\n                nextSilenceDeadline = _.utc(value.date) + silenceHysteresisInterval;\n\n                if (!speaking) {\n                    speaking = true;\n\n                    that._logger.info('Speaking detected');\n\n                    if (that._callback) {\n                        that._callback('speaking');\n                    }\n                }\n            } else if ((notSpeakingThreshold || (!speaking && notSpeakingContinuationThreshold)) && nextSilenceDeadline < value.date) {\n                nextSpeakingDeadline = _.utc(value.date) + speakingHysteresisInterval;\n\n                if (speaking) {\n                    speaking = false;\n\n                    that._logger.info('Silence detected');\n\n                    if (that._callback) {\n                        that._callback('silence');\n                    }\n                }\n            }\n        });\n    }\n\n    return AudioSpeakerDetectionAlgorithm;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/audio/AudioSpeakerDetectionAlgorithm.js\n// module id = 44\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert'\n], function (_, assert) {\n    'use strict';\n\n    var defaultAlpha = 1/16;\n\n    function AudioVolumeMeter(logger) {\n        assert.isObject(logger);\n\n        this._logger = logger;\n    }\n\n    AudioVolumeMeter.prototype.init = function init(context, alpha) {\n        assert.isObject(context, 'context');\n        assert.isFunction(context.createScriptProcessor, 'context.createScriptProcessor');\n\n        alpha = parseFloat(alpha || defaultAlpha);\n        assert.isNumber(alpha, 'alpha');\n\n        this._context = context;\n        this._alpha = alpha;\n        this._value = 0.;\n        this._smoothedValue = 0.;\n        this._smoothedPeakValue = 0.;\n        this._clipped = 0.;\n        this._scriptProcessor = context.createScriptProcessor(4096, 1, 1);\n        this._scriptProcessor.addEventListener('audioprocess', _.bind(onAudioProcess, this));\n    };\n\n    AudioVolumeMeter.prototype.onValue = function onValue(callback) {\n        this._callback = callback;\n    };\n\n    AudioVolumeMeter.prototype.getValue = function getValue() {\n        return this._value;\n    };\n\n    AudioVolumeMeter.prototype.getSmoothedValue = function getSmoothedValue() {\n        return this._smoothedValue;\n    };\n\n    AudioVolumeMeter.prototype.getSmoothedPeakValue = function getSmoothedPeakValue() {\n        return this._smoothedPeakValue;\n    };\n\n    AudioVolumeMeter.prototype.setAlpha = function setAlpha(alpha) {\n        assert.isNumber(alpha);\n\n        this._alpha = parseFloat(alpha);\n    };\n\n    AudioVolumeMeter.prototype.connect = function connect(stream) {\n        var that = this;\n\n        return connectToStream.call(that, stream);\n    };\n\n    AudioVolumeMeter.prototype.stop = function stop() {\n        return stopConnections.call(this);\n    };\n\n    AudioVolumeMeter.prototype.toString = function toString() {\n        return 'AudioVolumeMeter';\n    };\n\n    function onAudioProcess(event) {\n        var input = event.inputBuffer.getChannelData(0);\n        var sum = 0.;\n        var clipped = 0;\n\n        for (var i = 0; i < input.length; i++) {\n            sum += input[i] * input[i];\n\n            if (Math.abs(input[i]) > 0.99) {\n                clipped++;\n            }\n        }\n\n        this._value = Math.sqrt(sum / input.length);\n        this._smoothedValue = this._alpha * this._value + (1. - this._alpha) * this._smoothedValue;\n        this._smoothedPeakValue = Math.max(this._value, this._alpha * this._value + (1. - this._alpha) * this._smoothedPeakValue);\n        this._clipped = clipped;\n\n        if (this._callback) {\n            this._callback.call(this, {\n                date: _.now(),\n                value: this._value,\n                smoothedValue: this._smoothedValue,\n                smoothedPeakValue: this._smoothedPeakValue,\n                clipped: this._clipped\n            });\n        }\n    }\n\n    function connectToStream(stream) {\n        assert.isObject(stream, 'stream');\n\n        var that = this;\n\n        if (stream.getAudioTracks().length > 0) {\n            that._mediaStreamSource = that._context.createMediaStreamSource(stream);\n            that._mediaStreamSource.connect(that._scriptProcessor);\n            that._scriptProcessor.connect(that._context.destination);\n        } else {\n            that._logger.info('Stream has no audio tracks');\n        }\n    }\n\n    function stopConnections() {\n        if (this._mediaStreamSource) {\n            this._mediaStreamSource.disconnect();\n        }\n\n        this._scriptProcessor.disconnect();\n    }\n\n    return AudioVolumeMeter;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/audio/AudioVolumeMeter.js\n// module id = 45\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    './AudioVolumeMeter'\n], function (_, assert, AudioVolumeMeter) {\n    'use strict';\n\n    function AudioVolumeMeterFactory(logger) {\n        assert.isObject(logger, 'logger');\n\n        this._logger = logger;\n        this._audioVolumeMeters = {};\n    }\n\n    AudioVolumeMeterFactory.prototype.stopAllMeters = function stopAllMeters() {\n        _.forOwn(this._audioVolumeMeters, function stopAudioVolumeMeters(meter) {\n            meter.stop();\n        });\n    };\n\n    AudioVolumeMeterFactory.prototype.getAudioVolumeMeter = function getAudioVolumeMeter(stream) {\n        assert.isObject(stream, 'stream');\n        assert.stringNotEmpty(stream.id, 'streamId');\n\n        if (!this._audioVolumeMeters[stream.id]) {\n            this._audioVolumeMeters[stream.id] = new AudioVolumeMeter(this._logger);\n        }\n\n        return this._audioVolumeMeters[stream.id];\n    };\n\n    AudioVolumeMeterFactory.prototype.getAudioVolumeMeters = function getAudioVolumeMeters() {\n        return _.values(this._audioVolumeMeters);\n    };\n\n    AudioVolumeMeterFactory.prototype.toString = function toString() {\n        return 'AudioVolumeMeterFactory';\n    };\n\n    return AudioVolumeMeterFactory;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/audio/AudioVolumeMeterFactory.js\n// module id = 46\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert'\n], function (_, assert) {\n    'use strict';\n\n    var defaultRoomBandwidthLimit = 5000000;\n\n    function PublisherBandwidthAdjuster(publisher) {\n        this.init(publisher);\n    }\n\n    PublisherBandwidthAdjuster.prototype.init = function init(publisher) {\n        assert.isObject(publisher, 'publisher');\n\n        this._publisher = publisher;\n        this._roomMemberCount = 0;\n        this._roomSubscription = null;\n        this._membersSubscription = null;\n    };\n\n    PublisherBandwidthAdjuster.prototype.connect = function connect(roomService, options) {\n        assert.isObject(roomService, 'roomService');\n\n        options = options || {};\n\n        var roomObservable = roomService.getObservableActiveRoom();\n        var roomBandwidthLimit = options.roomBandwidthLimit || defaultRoomBandwidthLimit;\n\n        this._roomSubscription = roomObservable.subscribe(_.bind(onRoomChange, this, roomBandwidthLimit), {initial: 'notify'});\n    };\n\n    PublisherBandwidthAdjuster.prototype.close = function close() {\n        if (this._roomSubscription) {\n            this._roomSubscription.dispose();\n        }\n\n        if (this._membersSubscription) {\n            this._membersSubscription.dispose();\n        }\n\n        this._roomSubscription = null;\n        this._membersSubscription = null;\n    };\n\n    PublisherBandwidthAdjuster.prototype.toString = function toString() {\n        return 'PublisherBandwidthAdjuster';\n    };\n\n    function onRoomChange(roomBandwidthLimit, room) {\n        if (this._membersSubscription) {\n            this._membersSubscription.dispose();\n        }\n\n        if (!room) {\n            return this._publisher.limitBandwidth(roomBandwidthLimit);\n        }\n\n        var membersObservable = room.getObservableMembers();\n\n        this._membersSubscription = membersObservable.subscribe(_.bind(onRoomMembersChanged, this, roomBandwidthLimit), {initial: 'notify'});\n    }\n\n    function onRoomMembersChanged(roomBandwidthLimit, members) {\n        if (members.length === this._roomMemberCount) {\n            return;\n        }\n\n        this._roomMemberCount = members.length;\n\n        var targetBitRate = roomBandwidthLimit / Math.max(1, this._roomMemberCount - 1);\n\n        this._publisher.limitBandwidth(targetBitRate);\n    }\n\n    return PublisherBandwidthAdjuster;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/bandwidth/PublisherBandwidthAdjuster.js\n// module id = 47\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    '../authentication/AuthenticationService'\n], function (_, assert, observable, AuthenticationService) {\n    'use strict';\n\n    function ChatService(pcast) {\n        assert.isObject(pcast, 'pcast');\n        assert.isFunction(pcast.getLogger, 'pcast.getLogger');\n        assert.isFunction(pcast.getProtocol, 'pcast.getProtocol');\n\n        this._pcast = pcast;\n        this._logger = pcast.getLogger();\n        this._protocol = pcast.getProtocol();\n        this._enabled = new observable.Observable(false);\n        this._lastSubscribedSessionId = null;\n\n        assert.isObject(this._logger, 'this._logger');\n        assert.isObject(this._protocol, 'this._protocol');\n\n        this._authService = new AuthenticationService(this._pcast);\n    }\n\n    ChatService.prototype.start = function start() {\n        if (this._enabled.getValue()) {\n            return;\n        }\n\n        this._disposables = [];\n        this._roomMessagesListeners = {};\n\n        this._enabled.setValue(true);\n        setupSubscriptions.call(this);\n\n        var disposeOfConversationHandler = this._protocol.on('roomChatEvent', _.bind(onRoomConversationEvent, this));\n\n        this._disposables.push(disposeOfConversationHandler);\n    };\n\n    ChatService.prototype.stop = function stop() {\n        if (!this._enabled.getValue()) {\n            return;\n        }\n\n        disposeOfArray(this._disposables);\n    };\n\n    ChatService.prototype.getObservableChatEnabled = function getObservableChatEnabled() {\n        return this._enabled;\n    };\n\n    ChatService.prototype.sendMessageToRoom = function sendMessageToRoom(roomId, screenName, role, lastUpdate, message, callback) {\n        sendMessageRequest.call(this, roomId, screenName, role, lastUpdate, message, callback);\n    };\n\n    ChatService.prototype.subscribeAndLoadMessages = function subscribeAndLoadMessages(roomId, batchSize, onReceiveMessages) {\n        var disposeOfListener = setupChatListener.call(this, roomId, onReceiveMessages);\n\n        subscribeToRoomConversationRequest.call(this, roomId, batchSize);\n\n        return disposeOfListener;\n    };\n\n    ChatService.prototype.getMessages = function getMessages(roomId, batchSize, afterMessageId, beforeMessageId, onReceiveMessages) {\n        getMessagesRequest.call(this, roomId, batchSize, afterMessageId, beforeMessageId, onReceiveMessages);\n    };\n\n    ChatService.prototype.toString = function toString() {\n        return 'ChatService';\n    };\n\n    function setupSubscriptions() {\n        var pcastStatusSubscription = this._authService.getObservableStatus().subscribe(_.bind(onStatusChange, this));\n        var pcastSessionIdSubscription = this._authService.getObservableSessionId().subscribe(_.bind(onSessionIdChange, this));\n\n        this._disposables.push(pcastStatusSubscription.dispose);\n        this._disposables.push(pcastSessionIdSubscription.dispose);\n    }\n\n    function setupChatListener(roomId, onReceiveMessages) {\n        var that = this;\n\n        this._roomMessagesListeners[roomId] = onReceiveMessages;\n\n        var disposeOfHandler = function() {\n            if (that._roomMessagesListeners[roomId] === onReceiveMessages) {\n                delete that._roomMessagesListeners[roomId];\n            }\n        };\n\n        this._disposables.push(disposeOfHandler);\n\n        return disposeOfHandler;\n    }\n\n    function onRoomConversationEvent(event) {\n        assert.isObject(event, 'event');\n        assert.stringNotEmpty(event.roomId, 'event.roomId');\n        assert.stringNotEmpty(event.eventType, 'event.eventType');\n        assert.isArray(event.chatMessages, 'event.chatMessages');\n\n        switch (event.eventType) {\n        case 'Message':\n            this._logger.debug('[%s] Room messages [%s]', event.roomId, event.chatMessages);\n\n            var listener = this._roomMessagesListeners[event.roomId];\n\n            convertTimeFromLongInChatMessages(event.chatMessages);\n\n            if (listener) {\n                listener(null, {\n                    status: 'ok',\n                    chatMessages: event.chatMessages\n                });\n            }\n\n            break;\n        default:\n            this._logger.warn('Unsupported room conversation event [%s]', event.eventType);\n        }\n    }\n\n    function onStatusChange(status) { // eslint-disable-line no-unused-vars\n        // Only reason to redo subscriptions is if sessionId changes, which infers status changed\n    }\n\n    function onSessionIdChange(sessionId) {\n        if (!this._lastSubscribedSessionId || this._lastSubscribedSessionId === sessionId) {\n            return;\n        }\n\n        refreshMessageSubscriptions.call(this);\n    }\n\n    function refreshMessageSubscriptions() {\n        var that = this;\n\n        _.forOwn(this._roomMessagesListeners, function(listener, roomId) {\n            subscribeToRoomConversationRequest.call(that, roomId, 1);\n        });\n    }\n\n    function getMessagesRequest(roomId, batchSize, afterMessageId, beforeMessageId, callback) {\n        assert.stringNotEmpty(roomId, 'roomId');\n        assert.isFunction(callback, 'callback');\n\n        if (!beforeMessageId || !afterMessageId) {\n            assert.isNumber(batchSize, 'batchSize');\n        }\n\n        if (beforeMessageId) {\n            assert.stringNotEmpty(beforeMessageId, 'beforeMessageId');\n        }\n\n        if (afterMessageId) {\n            assert.stringNotEmpty(afterMessageId, 'afterMessageId');\n        }\n\n        assertEnabled.call(this);\n        this._authService.assertAuthorized();\n\n        var sessionId = this._authService.getPCastSessionId();\n\n        this._logger.info('Get messages from room [%s] conversation with batch size of [%s], after [%s], and before [%s]', roomId, batchSize, afterMessageId, beforeMessageId);\n\n        var that = this;\n\n        this._protocol.getMessages(sessionId, roomId, batchSize, afterMessageId, beforeMessageId,\n            function (error, response) {\n                if (error) {\n                    that._logger.error('Get messages from room conversation failed with error [%s]', error);\n\n                    return callback(error, null);\n                }\n\n                var result = {status: response.status};\n\n                if (response.status !== 'ok') {\n                    that._logger.warn('Get messages from room conversation failed with status [%s]', response.status);\n\n                    return callback(null, result);\n                }\n\n                result.chatMessages = response.chatMessages;\n\n                convertTimeFromLongInChatMessages(result.chatMessages);\n\n                callback(null, result);\n            }\n        );\n    }\n\n    function subscribeToRoomConversationRequest(roomId, batchSize) {\n        assert.stringNotEmpty(roomId, 'roomId');\n        assert.isNumber(batchSize, 'batchSize');\n\n        assertEnabled.call(this);\n        this._authService.assertAuthorized();\n\n        var sessionId = this._authService.getPCastSessionId();\n\n        this._lastSubscribedSessionId = sessionId;\n\n        this._logger.info('Subscribe to room [%s] conversation with batch size of [%s]', roomId, batchSize);\n\n        var that = this;\n\n        this._protocol.subscribeToRoomConversation(sessionId, roomId, batchSize, function (error, response) {\n            var onReceiveMessages = that._roomMessagesListeners[roomId];\n\n            if (!onReceiveMessages) {\n                return that._logger.warn('No subscription callback set for room [%s]', roomId);\n            }\n\n            if (error) {\n                that._logger.error('Subscribe to room conversation failed with error [%s]', error);\n\n                return onReceiveMessages(error, null);\n            }\n\n            var result = {status: response.status};\n\n            if (response.status !== 'ok') {\n                delete that._roomMessagesListeners[roomId];\n\n                that._logger.warn('Subscribe to room conversation failed with status [%s]', response.status);\n\n                return onReceiveMessages(null, result);\n            }\n\n            result.chatMessages = response.chatMessages;\n\n            convertTimeFromLongInChatMessages(result.chatMessages);\n\n            onReceiveMessages(null, result);\n        });\n    }\n\n    function sendMessageRequest(roomId, screenName, role, lastUpdate, message, callback) {\n        assert.stringNotEmpty(roomId, 'roomId');\n        assert.stringNotEmpty(screenName, 'screenName');\n        assert.stringNotEmpty(role, 'role');\n        assert.isNumber(lastUpdate, 'lastUpdate');\n        assert.stringNotEmpty(message, 'message');\n        assert.isFunction(callback, 'callback');\n\n        assertEnabled.call(this);\n        this._authService.assertAuthorized();\n\n        var sessionId = this._authService.getPCastSessionId();\n\n        var chatMessage = {\n            messageId: '',\n            timestamp: 0,\n            from: {\n                sessionId: sessionId,\n                screenName: screenName,\n                role: role,\n                lastUpdate: lastUpdate\n            },\n            message: message\n        };\n\n        this._logger.info('Send message to room [%s] from [%s]', roomId, screenName);\n\n        var that = this;\n\n        return this._protocol.sendMessageToRoom(roomId, chatMessage, function (error, response) {\n            if (error) {\n                that._logger.error('Send message to room failed with error [%s]', error);\n\n                return callback(error, null);\n            }\n\n            var result = {status: response.status};\n\n            if (response.status !== 'ok') {\n                that._logger.warn('Send message to room failed with status [%s]', response.status);\n            }\n\n            callback(null, result);\n        });\n    }\n\n    function assertEnabled() {\n        if (!this._enabled.getValue()) {\n            throw new Error('ChatService not Enabled. Please start before performing actions.');\n        }\n    }\n\n    function convertTimeFromLongInChatMessages(chatMessages) {\n        _.forEach(chatMessages, function(chatMessage) {\n            convertTimeFromLongInChatMessage(chatMessage);\n        });\n    }\n\n    function convertTimeFromLongInChatMessage(chatMessage) {\n        if (chatMessage.timestamp) {\n            chatMessage.timestamp = _.utc(chatMessage.timestamp);\n        }\n\n        if (chatMessage.from) {\n            chatMessage.from.lastUpdate = _.utc(chatMessage.from.lastUpdate);\n        }\n    }\n\n    function disposeOfArray(arrayOfDisposables) {\n        if (!_.isArray(arrayOfDisposables)) {\n            return;\n        }\n\n        for (var i = 0; i < arrayOfDisposables.length; i++) {\n            if (typeof arrayOfDisposables[i] === 'function') {\n                arrayOfDisposables[i]();\n            }\n        }\n    }\n\n    return ChatService;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/chat/ChatService.js\n// module id = 48\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    './ChatService'\n], function (_, assert, observable, ChatService) {\n    'use strict';\n\n    var defaultBatchSize = 0;\n    var maxCachedQueueSize = 100;\n\n    function RoomChatService(roomService) {\n        assert.isObject(roomService, 'roomService');\n        assert.isObject(roomService._pcast, 'roomService._pcast');\n        assert.isObject(roomService._logger, 'roomService._logger');\n\n        this._roomService = roomService;\n        this._pcast = roomService._pcast;\n        this._logger = roomService._logger;\n        this._chatService = new ChatService(this._pcast);\n        this._chatMessages = new observable.ObservableArray([]);\n        this._latestMessageQueue = [];\n        this._disposables = [];\n        this._chatRoomId = null;\n    }\n\n    RoomChatService.prototype.start = function start(batchSize) {\n        this._batchSize = batchSize || defaultBatchSize;\n        this._chatService.start();\n\n        setupSubscriptions.call(this);\n        setupMessageSubscription.call(this);\n    };\n\n    RoomChatService.prototype.stop = function stop() {\n        this._chatService.stop();\n\n        disposeOfMessageSubscription.call(this);\n\n        disposeOfArray(this._disposables);\n    };\n\n    RoomChatService.prototype.getObservableChatMessages = function getObservableChatMessages() {\n        return this._chatMessages;\n    };\n\n    RoomChatService.prototype.getObservableChatEnabled = function getObservableChatEnabled() {\n        return this._chatService.getObservableChatEnabled();\n    };\n\n    RoomChatService.prototype.sendMessageToRoom = function sendMessageToRoom(message, callback) {\n        var room = this._roomService.getObservableActiveRoom().getValue();\n        var roomId = room.getRoomId();\n        var self = this._roomService._self.getValue();\n        var screenName = self.getObservableScreenName().getValue();\n        var role = self.getObservableRole().getValue();\n        var lastUpdate = self.getLastUpdate();\n\n        this._chatService.sendMessageToRoom(roomId, screenName, role, lastUpdate, message, callback);\n    };\n\n    RoomChatService.prototype.getMessages = function getMessages(batchSize, afterMessageId, beforeMessageId, callback) {\n        var room = this._roomService.getObservableActiveRoom().getValue();\n        var roomId = room.getRoomId();\n\n        return this._chatService.getMessages(roomId, batchSize, afterMessageId, beforeMessageId, callback);\n    };\n\n    RoomChatService.prototype.toString = function toString() {\n        return 'RoomChatService';\n    };\n\n    function onRoomChange(room) {\n        if (room && this._chatRoomId === room.getRoomId()) {\n            return;\n        }\n\n        disposeOfMessageSubscription.call(this);\n\n        if (room) {\n            setupMessageSubscription.call(this);\n        }\n    }\n\n    function setupSubscriptions() {\n        var roomSubscription = this._roomService.getObservableActiveRoom().subscribe(_.bind(onRoomChange, this));\n\n        this._disposables.push(roomSubscription.dispose);\n    }\n\n    function setupMessageSubscription() {\n        disposeOfMessageSubscription.call(this);\n\n        this._roomChatSubscriptionDispose = subscribeAndLoadMessages.call(this, this._batchSize);\n    }\n\n    function disposeOfMessageSubscription() {\n        if (this._roomChatSubscriptionDispose) {\n            this._roomChatSubscriptionDispose();\n        }\n    }\n\n    function subscribeAndLoadMessages(batchSize) {\n        var room = this._roomService.getObservableActiveRoom().getValue();\n        var roomId = room.getRoomId();\n\n        this._chatRoomId = roomId;\n\n        var that = this;\n\n        this._chatMessages.setValue([]);\n\n        return this._chatService.subscribeAndLoadMessages(roomId, batchSize, function onReceiveMessages(error, response) {\n            if (error) {\n                throw error;\n            }\n\n            if (response.status !== 'ok') {\n                throw new Error('Unable to subscribe to room chat. Status ' + status);\n            }\n\n            var messages = that._chatMessages.getValue();\n\n            _.forEach(response.chatMessages, function addMessage(message) {\n                messages.push(message);\n            });\n\n            if (messages.length > maxCachedQueueSize) {\n                messages.splice(0, messages.length - maxCachedQueueSize);\n            }\n\n            that._chatMessages.setValue(messages);\n        });\n    }\n\n    function disposeOfArray(arrayOfDisposables) {\n        if (!_.isArray(arrayOfDisposables)) {\n            return;\n        }\n\n        for (var i = 0; i < arrayOfDisposables.length; i++) {\n            if (typeof arrayOfDisposables[i] === 'function') {\n                arrayOfDisposables[i]();\n            }\n        }\n    }\n\n    return RoomChatService;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/chat/RoomChatService.js\n// module id = 49\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-http',\n    'ByteBuffer',\n    '../MQProtocol',\n    'phenix-web-network-connection-monitor',\n    'phenix-rtc',\n    'phenix-web-logging'\n], function (_, assert, http, ByteBuffer, MQProtocol, NetworkConnectionMonitor, rtc, logging) {\n    var networkDisconnectHysteresisInterval = 0;\n\n    function AnalytixAppender() {\n        this._loggingUrl = '/analytix/logs';\n        this._domain = location.hostname;\n        this._protocol = new MQProtocol();\n        this._maxAttempts = 3;\n        this._maxBufferedRecords = 1000;\n        this._maxBatchSize = 100;\n        this._records = [];\n        this._pending = false;\n        this._baseUri = '';\n        this._minLevel = logging.level.TRACE;\n        this._isEnabled = true;\n        this._networkConnectionMonitor = createAndStartNetworkConnectionMonitor.call(this);\n        this._browser = (rtc.browser || 'Browser') + '/' + (rtc.browserVersion || '?');\n    }\n\n    AnalytixAppender.prototype.setThreshold = function setThreshold(level) {\n        assert.isNumber(level);\n\n        this._minLevel = level;\n    };\n\n    AnalytixAppender.prototype.getThreshold = function getThreshold() {\n        return this._minLevel;\n    };\n\n    AnalytixAppender.prototype.setUri = function setUri(uri) {\n        assert.stringNotEmpty(uri, 'uri');\n\n        this._baseUri = uri;\n    };\n\n    AnalytixAppender.prototype.isEnabled = function isEnabled() {\n        return this._isEnabled;\n    };\n\n    AnalytixAppender.prototype.setEnabled = function setEnabled(enabled) {\n        assert.isBoolean(enabled);\n\n        this._isEnabled = enabled;\n    };\n\n    AnalytixAppender.prototype.log = function log(since, level, category, messages, sessionId, userId, environment, version, context) {\n        if (context.level < this._minLevel) {\n            return;\n        }\n\n        assert.isArray(messages, 'messages');\n\n        addMessagesToRecords.call(this, since, level, category, messages, sessionId, userId, environment, version);\n\n        deleteRecordsIfAtCapacity.call(this, since, sessionId, userId, environment, version);\n\n        sendBatchMessagesIfNonePending.call(this);\n    };\n\n    function createAndStartNetworkConnectionMonitor() {\n        var that = this;\n        var networkConnectionMonitor = new NetworkConnectionMonitor(networkDisconnectHysteresisInterval);\n\n        function onReconnect() {\n            that._isOffline = false;\n\n            sendBatchMessagesIfNonePending.call(that);\n        }\n\n        function onDisconnect() {\n            that._isOffline = true;\n        }\n\n        networkConnectionMonitor.start(onReconnect, onDisconnect);\n\n        return networkConnectionMonitor;\n    }\n\n    function addMessagesToRecords(since, level, category, messages, sessionId, userId, environment, version) {\n        var message = messages.join(' ');\n        var record = {\n            level: level,\n            timestamp: _.isoString(),\n            category: category,\n            message: message,\n            source: this._browser,\n            fullQualifiedName: this._domain,\n            sessionId: sessionId,\n            userId: userId,\n            environment: environment,\n            version: version,\n            runtime: since\n        };\n\n        this._records.push(record);\n    }\n\n    function deleteRecordsIfAtCapacity(since, sessionId, userId, environment, version) {\n        if (this._records.length > this._maxBufferedRecords) {\n            var deleteRecords = this._records.length - (this._maxBufferedRecords / 2);\n\n            this._records = this._records.slice(deleteRecords);\n            this._records.unshift({\n                level: 'Warn',\n                timestamp: _.isoString(),\n                category: 'websdk/analytixLogger',\n                message: 'Deleted ' + deleteRecords + ' records',\n                source: this._browser,\n                fullQualifiedName: this._domain,\n                sessionId: sessionId,\n                userId: userId,\n                environment: environment,\n                version: version,\n                runtime: since\n            });\n        }\n    }\n\n    function sendBatchMessagesIfNonePending() {\n        if (this._pending || !this._baseUri || !this._isEnabled || this._isOffline || this._records.length === 0) {\n            return;\n        }\n\n        var storeLogRecords = {records: _.take(this._records, this._maxBatchSize)};\n\n        this._records = this._records.slice(this._maxBatchSize);\n        this._pending = true;\n\n        var that = this;\n\n        try {\n            sendEncodedHttpRequest.call(this, this._baseUri + this._loggingUrl, storeLogRecords, function onTimeout() {\n                setTimeout(function waitForDisconnectTimeout() {\n                    if (!that._isOffline) {\n                        return;\n                    }\n\n                    that._records = that._records.concat(storeLogRecords.records);\n                }, networkDisconnectHysteresisInterval);\n            });\n        } catch (e) {\n            this._pending = false;\n\n            throw e;\n        }\n    }\n\n    function sendEncodedHttpRequest(url, dataToEncode, onTimeout) {\n        var that = this;\n\n        var data = this._protocol.encode('analytix.StoreLogRecords', dataToEncode).toBinary();\n\n        function handlePost(error, result) {\n            that._pending = false;\n\n            if (error) {\n                if (error.message === 'timeout') {\n                    onTimeout();\n                }\n\n                return {\n                    status: 'error',\n                    storedRecords: 0\n                };\n            }\n\n            return that._protocol.decode('analytix.StoreLogRecordsResponse', ByteBuffer.fromBinary(result));\n        }\n\n        http.postWithRetry(url, data, {contentType: 'application/protobuf'}, handlePost, this._maxAttempts);\n    }\n\n    return AnalytixAppender;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/logging/AnalytixAppender.js\n// module id = 50\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    '../environment',\n    './AnalytixAppender'\n], function (_, assert, environment, AnalytixAppender) {\n    var config = {\n        urls: {\n            local: '',\n            staging: 'https://analytix-stg.phenixp2p.com',\n            production: 'https://analytix.phenixp2p.com'\n        }\n    };\n\n    function AnalytixAppenderFactory() {\n        this._analytixAppenders = {};\n    }\n\n    AnalytixAppenderFactory.prototype.getAppender = function getAppender(pcastBaseUri) {\n        var env = environment.parseEnvFromPcastBaseUri(pcastBaseUri || '');\n\n        var analytixServerUrl = config.urls[env];\n\n        if (!this._analytixAppenders[env]) {\n            this._analytixAppenders[env] = createNewAppender.call(this, analytixServerUrl);\n        }\n\n        return this._analytixAppenders[env];\n    };\n\n    function createNewAppender(uri) {\n        var appender = new AnalytixAppender();\n\n        if (uri) {\n            appender.setUri(uri);\n        } else {\n            appender.setEnabled(false);\n        }\n\n        return appender;\n    }\n\n    return new AnalytixAppenderFactory();\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/logging/analytixAppenderFactory.js\n// module id = 51\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var analytixProto = {\n        \"package\": \"analytix\",\n        \"messages\": [\n            {\n                \"name\": \"LogData\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"LogLevel\",\n                        \"name\": \"level\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"timestamp\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"category\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"message\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"source\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"fullQualifiedName\",\n                        \"id\": 11\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"userId\",\n                        \"id\": 7\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"environment\",\n                        \"id\": 8\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"version\",\n                        \"id\": 9\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"float\",\n                        \"name\": \"runtime\",\n                        \"id\": 10\n                    }\n                ]\n            },\n            {\n                \"name\": \"StoreLogRecords\",\n                \"fields\": [\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"LogData\",\n                        \"name\": \"records\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"StoreLogRecordsResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"storedRecords\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"MetricValue\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"string\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"float\",\n                        \"name\": \"float\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint64\",\n                        \"name\": \"uint64\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"int64\",\n                        \"name\": \"int64\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"bool\",\n                        \"name\": \"boolean\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"timestamp\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"MetricData\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"timestamp\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"source\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"resource\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"kind\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"Metric\",\n                        \"name\": \"metric\",\n                        \"id\": 7\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"MetricValue\",\n                        \"name\": \"value\",\n                        \"id\": 8\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"MetricValue\",\n                        \"name\": \"previousValue\",\n                        \"id\": 9\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint64\",\n                        \"name\": \"elapsed\",\n                        \"id\": 10\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"fullQualifiedName\",\n                        \"id\": 11\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"environment\",\n                        \"id\": 12\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"version\",\n                        \"id\": 13\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"tool\",\n                        \"id\": 14\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"toolVersion\",\n                        \"id\": 15\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"float\",\n                        \"name\": \"runtime\",\n                        \"id\": 16\n                    }\n                ]\n            },\n            {\n                \"name\": \"SubmitMetricRecords\",\n                \"fields\": [\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"MetricData\",\n                        \"name\": \"records\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"SubmitMetricRecordsResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"storedRecords\",\n                        \"id\": 2\n                    }\n                ]\n            }\n        ],\n        \"enums\": [\n            {\n                \"name\": \"LogLevel\",\n                \"values\": [\n                    {\n                        \"name\": \"Trace\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"Debug\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"Info\",\n                        \"id\": 2\n                    },\n                    {\n                        \"name\": \"Warn\",\n                        \"id\": 3\n                    },\n                    {\n                        \"name\": \"Error\",\n                        \"id\": 4\n                    },\n                    {\n                        \"name\": \"Fatal\",\n                        \"id\": 5\n                    }\n                ]\n            },\n            {\n                \"name\": \"Metric\",\n                \"values\": [\n                    {\n                        \"name\": \"EndPointRoundTripTime\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"Initialized\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"Provisioned\",\n                        \"id\": 2\n                    },\n                    {\n                        \"name\": \"SetupCompleted\",\n                        \"id\": 3\n                    },\n                    {\n                        \"name\": \"Offset\",\n                        \"id\": 4\n                    },\n                    {\n                        \"name\": \"TimeToFirstFrame\",\n                        \"id\": 5\n                    },\n                    {\n                        \"name\": \"Playing\",\n                        \"id\": 6\n                    },\n                    {\n                        \"name\": \"Stalled\",\n                        \"id\": 7\n                    },\n                    {\n                        \"name\": \"Buffering\",\n                        \"id\": 8\n                    },\n                    {\n                        \"name\": \"Stopped\",\n                        \"id\": 9\n                    },\n                    {\n                        \"name\": \"BitRateAdaptation\",\n                        \"id\": 10\n                    },\n                    {\n                        \"name\": \"ResolutionChanged\",\n                        \"id\": 11\n                    },\n                    {\n                        \"name\": \"FrameRateChanged\",\n                        \"id\": 12\n                    },\n                    {\n                        \"name\": \"FramesDropped\",\n                        \"id\": 13\n                    },\n                    {\n                        \"name\": \"PacketsLost\",\n                        \"id\": 14\n                    },\n                    {\n                        \"name\": \"PictureLost\",\n                        \"id\": 15\n                    },\n                    {\n                        \"name\": \"PlayoutDelayChanged\",\n                        \"id\": 16\n                    },\n                    {\n                        \"name\": \"CodecChanged\",\n                        \"id\": 17\n                    },\n                    {\n                        \"name\": \"MetricDropped\",\n                        \"id\": 18\n                    }\n                ]\n            }\n        ]\n    };\n\n    return analytixProto;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/protocol/analytixProto.json.js\n// module id = 52\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var chatProto = {\n        \"package\": \"chat\",\n        \"messages\": [\n            {\n                \"name\": \"Room\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"alias\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"name\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"description\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"RoomType\",\n                        \"name\": \"type\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"bridgeId\",\n                        \"id\": 7\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"pin\",\n                        \"id\": 8\n                    }\n                ]\n            },\n            {\n                \"name\": \"Stream\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"StreamType\",\n                        \"name\": \"type\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"uri\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"TrackState\",\n                        \"name\": \"audioState\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"TrackState\",\n                        \"name\": \"videoState\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"Member\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"screenName\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"MemberRole\",\n                        \"name\": \"role\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"Stream\",\n                        \"name\": \"streams\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"MemberState\",\n                        \"name\": \"state\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"lastUpdate\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"MemberUpdate\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"screenName\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"MemberRole\",\n                        \"name\": \"role\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"bool\",\n                        \"name\": \"updateStreams\",\n                        \"id\": 7,\n                        \"options\": {\"default\": false}\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"Stream\",\n                        \"name\": \"streams\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"MemberState\",\n                        \"name\": \"state\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"lastUpdate\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"ChatUser\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"screenName\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"MemberRole\",\n                        \"name\": \"role\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"lastUpdate\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"ChatMessage\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"messageId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"timestamp\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"ChatUser\",\n                        \"name\": \"from\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"message\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateRoom\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"Room\",\n                        \"name\": \"room\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateRoomResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"Room\",\n                        \"name\": \"room\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"JoinRoom\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"alias\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"Member\",\n                        \"name\": \"member\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"timestamp\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"JoinRoomResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"Room\",\n                        \"name\": \"room\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"Member\",\n                        \"name\": \"members\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"UpdateRoom\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"Room\",\n                        \"name\": \"room\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"timestamp\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"UpdateRoomResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"UpdateMember\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"MemberUpdate\",\n                        \"name\": \"member\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"timestamp\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"UpdateMemberResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint64\",\n                        \"name\": \"lastUpdate\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"LeaveRoom\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"timestamp\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"LeaveRoomResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"DestroyRoom\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"DestroyRoomResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"GetRoomInfo\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"alias\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"secret\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"GetRoomInfoResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"Room\",\n                        \"name\": \"room\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"Member\",\n                        \"name\": \"members\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"RoomEvent\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"RoomEventType\",\n                        \"name\": \"eventType\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"Member\",\n                        \"name\": \"members\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"Room\",\n                        \"name\": \"room\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"timestamp\",\n                        \"id\": 7\n                    }\n                ]\n            },\n            {\n                \"name\": \"SendMessageToRoom\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"ChatMessage\",\n                        \"name\": \"chatMessage\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"SendMessageToRoomResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"FetchRoomConversation\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"afterMessageId\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"beforeMessageId\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint32\",\n                        \"name\": \"limit\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"RoomConversationOption\",\n                        \"name\": \"options\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"FetchRoomConversationResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"ChatMessage\",\n                        \"name\": \"chatMessages\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"RoomConversationEvent\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"roomId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"RoomConversationEventType\",\n                        \"name\": \"eventType\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"ChatMessage\",\n                        \"name\": \"chatMessages\",\n                        \"id\": 4\n                    }\n                ]\n            }\n        ],\n        \"enums\": [\n            {\n                \"name\": \"RoomType\",\n                \"values\": [\n                    {\n                        \"name\": \"DirectChat\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"MultiPartyChat\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"ModeratedChat\",\n                        \"id\": 2\n                    },\n                    {\n                        \"name\": \"TownHall\",\n                        \"id\": 3\n                    },\n                    {\n                        \"name\": \"Channel\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"MemberRole\",\n                \"values\": [\n                    {\n                        \"name\": \"Participant\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"Moderator\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"Presenter\",\n                        \"id\": 2\n                    },\n                    {\n                        \"name\": \"Audience\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"MemberState\",\n                \"values\": [\n                    {\n                        \"name\": \"Active\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"Passive\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"HandRaised\",\n                        \"id\": 2\n                    },\n                    {\n                        \"name\": \"Inactive\",\n                        \"id\": 3\n                    },\n                    {\n                        \"name\": \"Offline\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"RoomEventType\",\n                \"values\": [\n                    {\n                        \"name\": \"MemberJoined\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"MemberLeft\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"MemberUpdated\",\n                        \"id\": 2\n                    },\n                    {\n                        \"name\": \"RoomUpdated\",\n                        \"id\": 3\n                    },\n                    {\n                        \"name\": \"RoomEnded\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"TrackState\",\n                \"values\": [\n                    {\n                        \"name\": \"TrackEnabled\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"TrackDisabled\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"TrackEnded\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamType\",\n                \"values\": [\n                    {\n                        \"name\": \"User\",\n                        \"id\": 0\n                    },\n                    {\n                        \"name\": \"Presentation\",\n                        \"id\": 1\n                    },\n                    {\n                        \"name\": \"Audio\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"RoomConversationOption\",\n                \"values\": [\n                    {\n                        \"name\": \"Subscribe\",\n                        \"id\": 0\n                    }\n                ]\n            },\n            {\n                \"name\": \"RoomConversationEventType\",\n                \"values\": [\n                    {\n                        \"name\": \"Message\",\n                        \"id\": 0\n                    }\n                ]\n            }\n        ]\n    };\n\n    return chatProto;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/protocol/chatProto.json.js\n// module id = 53\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var mqProto = {\n        \"package\": \"mq\",\n        \"messages\": [\n            {\n                \"name\": \"Request\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"requestId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"type\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"encoding\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"bytes\",\n                        \"name\": \"payload\",\n                        \"id\": 5\n                    }\n                ]\n            },\n            {\n                \"name\": \"Response\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"requestId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"type\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"encoding\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"bytes\",\n                        \"name\": \"payload\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"double\",\n                        \"name\": \"wallTime\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"Error\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"reason\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"PingPong\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"originTimestamp\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint64\",\n                        \"name\": \"count\",\n                        \"id\": 2\n                    }\n                ]\n            }\n        ]\n    };\n\n    return mqProto;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/protocol/mqProto.json.js\n// module id = 54\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var pcastProto = {\n        \"package\": \"pcast\",\n        \"messages\": [\n            {\n                \"name\": \"Authenticate\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 9,\n                        \"options\": {\"default\": 0}\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"clientVersion\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"device\",\n                        \"id\": 12\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"deviceId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"manufacturer\",\n                        \"id\": 13\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"platform\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"platformVersion\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"authenticationToken\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"connectionId\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"connectionRouteKey\",\n                        \"id\": 10\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"remoteAddress\",\n                        \"id\": 11\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 7\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 8\n                    }\n                ]\n            },\n            {\n                \"name\": \"AuthenticateResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"redirect\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"roles\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"Bye\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"reason\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"ByeResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"SessionDescription\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"Type\",\n                        \"name\": \"type\",\n                        \"id\": 1,\n                        \"options\": {\"default\": \"Offer\"}\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sdp\",\n                        \"id\": 2\n                    }\n                ],\n                \"enums\": [\n                    {\n                        \"name\": \"Type\",\n                        \"values\": [\n                            {\n                                \"name\": \"Offer\",\n                                \"id\": 0\n                            },\n                            {\n                                \"name\": \"Answer\",\n                                \"id\": 1\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateStream\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"originStreamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"connectUri\",\n                        \"id\": 8\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"connectOptions\",\n                        \"id\": 9\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"tags\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"SetRemoteDescription\",\n                        \"name\": \"setRemoteDescription\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"CreateOfferDescription\",\n                        \"name\": \"createOfferDescription\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"CreateAnswerDescription\",\n                        \"name\": \"createAnswerDescription\",\n                        \"id\": 7\n                    }\n                ]\n            },\n            {\n                \"name\": \"IceServer\",\n                \"fields\": [\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"urls\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"username\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"credential\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"RtcConfiguration\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"BundlePolicy\",\n                        \"name\": \"bundlePolicy\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"iceCandidatePoolSize\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"IceServer\",\n                        \"name\": \"iceServers\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"IceTransportPolicy\",\n                        \"name\": \"iceTransportPolicy\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"peerIdentity\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"RtcpMuxPolicy\",\n                        \"name\": \"rtcpMuxPolicy\",\n                        \"id\": 7\n                    }\n                ],\n                \"enums\": [\n                    {\n                        \"name\": \"BundlePolicy\",\n                        \"values\": [\n                            {\n                                \"name\": \"BundlePolicyBalanced\",\n                                \"id\": 1\n                            },\n                            {\n                                \"name\": \"BundlePolicyMaxCompat\",\n                                \"id\": 2\n                            },\n                            {\n                                \"name\": \"BundlePolicyMaxBundle\",\n                                \"id\": 3\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"IceTransportPolicy\",\n                        \"values\": [\n                            {\n                                \"name\": \"IceTransportPolicyAll\",\n                                \"id\": 1\n                            },\n                            {\n                                \"name\": \"IceTransportPolicyPublic\",\n                                \"id\": 2\n                            },\n                            {\n                                \"name\": \"IceTransportPolicyRelay\",\n                                \"id\": 3\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"RtcpMuxPolicy\",\n                        \"values\": [\n                            {\n                                \"name\": \"RtcpMuxPolicyNegotiate\",\n                                \"id\": 1\n                            },\n                            {\n                                \"name\": \"RtcpMuxPolicyRequire\",\n                                \"id\": 2\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateStreamResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"instanceRouteKey\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"streamUris\",\n                        \"id\": 8\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"RtcConfiguration\",\n                        \"name\": \"rtcConfiguration\",\n                        \"id\": 9\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"SetRemoteDescriptionResponse\",\n                        \"name\": \"setRemoteDescriptionResponse\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"CreateOfferDescriptionResponse\",\n                        \"name\": \"createOfferDescriptionResponse\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"CreateAnswerDescriptionResponse\",\n                        \"name\": \"createAnswerDescriptionResponse\",\n                        \"id\": 6\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 7\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint64\",\n                        \"name\": \"offset\",\n                        \"id\": 10,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetLocalDescription\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"SessionDescription\",\n                        \"name\": \"sessionDescription\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 3,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetLocalDescriptionResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetRemoteDescription\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"SessionDescription\",\n                        \"name\": \"sessionDescription\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 3,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetRemoteDescriptionResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"SessionDescription\",\n                        \"name\": \"sessionDescription\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateOfferDescription\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 3,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateOfferDescriptionResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"SessionDescription\",\n                        \"name\": \"sessionDescription\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateAnswerDescription\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 3,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"CreateAnswerDescriptionResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"SessionDescription\",\n                        \"name\": \"sessionDescription\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"IceCandidate\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"candidate\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint32\",\n                        \"name\": \"sdpMLineIndex\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sdpMid\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"AddIceCandidates\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"IceCandidate\",\n                        \"name\": \"candidates\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 4,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"AddIceCandidatesResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"UpdateStreamState\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"signalingState\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"iceGatheringState\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"iceConnectionState\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 5,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"UpdateStreamStateResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"DestroyStream\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"reason\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"DestroyStreamResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"ConnectionDisconnected\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"connectionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint32\",\n                        \"name\": \"reasonCode\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"description\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"ConnectionDisconnectedResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamStarted\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"tags\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"SourceStreamStarted\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"capabilities\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"tags\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamEnded\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"reason\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"tags\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"continuationId\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"routeKey\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"SourceStreamEnded\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"reason\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"capabilities\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"tags\",\n                        \"id\": 5\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamEndedResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"continuationId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"routeKey\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamIdle\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"tags\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamArchived\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"uri\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"SessionEnded\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"reason\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"float\",\n                        \"name\": \"duration\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamPlaylist\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"PlaylistType\",\n                        \"name\": \"playlistType\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"uri\",\n                        \"id\": 4\n                    }\n                ],\n                \"enums\": [\n                    {\n                        \"name\": \"PlaylistType\",\n                        \"values\": [\n                            {\n                                \"name\": \"Live\",\n                                \"id\": 0\n                            },\n                            {\n                                \"name\": \"OnDemand\",\n                                \"id\": 1\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"name\": \"ForwardToClient\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"connectionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"type\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"bytes\",\n                        \"name\": \"payload\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"ForwardToClientResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetupStream\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamToken\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"CreateStream\",\n                        \"name\": \"createStream\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetupStreamResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"CreateStreamResponse\",\n                        \"name\": \"createStreamResponse\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetupPlaylistStream\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamToken\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"tags\",\n                        \"id\": 4\n                    }\n                ]\n            },\n            {\n                \"name\": \"PlaylistStreamManifest\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"manifest\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"bool\",\n                        \"name\": \"isProtectedContent\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetupPlaylistStreamResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"PlaylistStreamManifest\",\n                        \"name\": \"manifests\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint64\",\n                        \"name\": \"offset\",\n                        \"id\": 3,\n                        \"options\": {\"default\": 0}\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamDataQuality\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint64\",\n                        \"name\": \"timestamp\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"DataQualityStatus\",\n                        \"name\": \"status\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"DataQualityReason\",\n                        \"name\": \"reason\",\n                        \"id\": 5\n                    }\n                ],\n                \"enums\": [\n                    {\n                        \"name\": \"DataQualityStatus\",\n                        \"values\": [\n                            {\n                                \"name\": \"NoData\",\n                                \"id\": 0\n                            },\n                            {\n                                \"name\": \"AudioOnly\",\n                                \"id\": 1\n                            },\n                            {\n                                \"name\": \"All\",\n                                \"id\": 2\n                            }\n                        ]\n                    },\n                    {\n                        \"name\": \"DataQualityReason\",\n                        \"values\": [\n                            {\n                                \"name\": \"None\",\n                                \"id\": 0\n                            },\n                            {\n                                \"name\": \"UploadLimited\",\n                                \"id\": 1\n                            },\n                            {\n                                \"name\": \"DownloadLimited\",\n                                \"id\": 2\n                            },\n                            {\n                                \"name\": \"PublisherLimited\",\n                                \"id\": 3\n                            },\n                            {\n                                \"name\": \"NetworkLimited\",\n                                \"id\": 4\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"name\": \"StreamDataQualityResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"CallbackEvent\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"apiVersion\",\n                        \"id\": 1,\n                        \"options\": {\"default\": 0}\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"entity\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"what\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"data\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 5\n                    }\n                ]\n            },\n            {\n                \"name\": \"Uri\",\n                \"fields\": [\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"protocol\",\n                        \"id\": 1,\n                        \"options\": {\"default\": \"http\"}\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"host\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"port\",\n                        \"id\": 3,\n                        \"options\": {\"default\": 80}\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"method\",\n                        \"id\": 4,\n                        \"options\": {\"default\": \"POST\"}\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"path\",\n                        \"id\": 5,\n                        \"options\": {\"default\": \"/\"}\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetApplicationCallback\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"secret\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"Uri\",\n                        \"name\": \"callback\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"SetApplicationCallbackResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"IssueAuthenticationToken\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"secret\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"capabilities\",\n                        \"id\": 3\n                    }\n                ]\n            },\n            {\n                \"name\": \"IssueAuthenticationTokenResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"authenticationToken\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"IssueStreamToken\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"secret\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"originStreamId\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"capabilities\",\n                        \"id\": 5\n                    }\n                ]\n            },\n            {\n                \"name\": \"IssueStreamTokenResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"streamToken\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"IssueDrmToken\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"secret\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamToken\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"sessionId\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"originStreamId\",\n                        \"id\": 5\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"capabilities\",\n                        \"id\": 6\n                    }\n                ]\n            },\n            {\n                \"name\": \"IssueDrmTokenResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"drmToken\",\n                        \"id\": 2\n                    }\n                ]\n            },\n            {\n                \"name\": \"TerminateStream\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"secret\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 3,\n                        \"oneof\": \"streamOrToken\"\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"streamToken\",\n                        \"id\": 5,\n                        \"oneof\": \"streamOrToken\"\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"reason\",\n                        \"id\": 4\n                    }\n                ],\n                \"oneofs\": {\n                    \"streamOrToken\": [\n                        3,\n                        5\n                    ]\n                }\n            },\n            {\n                \"name\": \"TerminateStreamResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"Stream\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"streamId\",\n                        \"id\": 1\n                    }\n                ]\n            },\n            {\n                \"name\": \"ListStreams\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"applicationId\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"secret\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"start\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"uint32\",\n                        \"name\": \"length\",\n                        \"id\": 4\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"string\",\n                        \"name\": \"options\",\n                        \"id\": 5\n                    }\n                ]\n            },\n            {\n                \"name\": \"ListStreamsResponse\",\n                \"fields\": [\n                    {\n                        \"rule\": \"required\",\n                        \"type\": \"string\",\n                        \"name\": \"status\",\n                        \"id\": 1\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"string\",\n                        \"name\": \"start\",\n                        \"id\": 2\n                    },\n                    {\n                        \"rule\": \"optional\",\n                        \"type\": \"uint32\",\n                        \"name\": \"length\",\n                        \"id\": 3\n                    },\n                    {\n                        \"rule\": \"repeated\",\n                        \"type\": \"Stream\",\n                        \"name\": \"streams\",\n                        \"id\": 4\n                    }\n                ]\n            }\n        ]\n    };\n\n    return pcastProto;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/protocol/pcastProto.json.js\n// module id = 55\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    './Room'\n], function (_, assert, observable, Room) {\n    'use strict';\n\n    function ImmutableRoom(roomService, id, alias, name, description, type, members, bridgeId, pin) {\n        this.init(roomService, id, alias, name, description, type, members, bridgeId, pin);\n    }\n\n    ImmutableRoom.prototype.init = function init(roomService, id, alias, name, description, type, members, bridgeId, pin) {\n        // Don't pass roomService.\n        this._room = new Room(null, id, alias, name, description, type, members, bridgeId, pin);\n\n        makeArrayOrObjectObservablesImmutable(this._room);\n    };\n\n    ImmutableRoom.prototype.getRoomId = function getImmutableRoomId() {\n        return this._room.getRoomId();\n    };\n\n    ImmutableRoom.prototype.getObservableAlias = function getObservableAlias() {\n        return this._room.getObservableAlias();\n    };\n\n    ImmutableRoom.prototype.getObservableName = function getObservableName() {\n        return this._room.getObservableName();\n    };\n\n    ImmutableRoom.prototype.getObservableDescription = function getObservableDescription() {\n        return this._room.getObservableDescription();\n    };\n\n    ImmutableRoom.prototype.getObservableType = function getObservableType() {\n        return this._room.getObservableType();\n    };\n\n    ImmutableRoom.prototype.getObservableMembers = function getObservableMembers() {\n        return this._room.getObservableMembers();\n    };\n\n    ImmutableRoom.prototype.getObservableBridgeId = function getObservableBridgeId() {\n        return this._room.getObservableBridgeId();\n    };\n\n    ImmutableRoom.prototype.getObservablePin = function getObservablePin() {\n        return this._room.getObservablePin();\n    };\n\n    ImmutableRoom.prototype.toString = function toString() {\n        return this._room.toString();\n    };\n\n    ImmutableRoom.prototype.toJson = function toJson() {\n        return this._room.toJson();\n    };\n\n    ImmutableRoom.prototype.commitChanges = throwImmutableError;\n    ImmutableRoom.prototype.reload = throwImmutableError;\n    ImmutableRoom.prototype._update = throwImmutableError;\n    ImmutableRoom.prototype._addMembers = throwImmutableError;\n    ImmutableRoom.prototype._removeMembers = throwImmutableError;\n    ImmutableRoom.prototype._updateMembers = throwImmutableError;\n\n    function throwImmutableError() {\n        throw new Error('ImmutableRoom is Immutable');\n    }\n\n    function makeArrayOrObjectObservablesImmutable(collection) {\n        if (_.isArray(collection)) {\n            _.forEach(collection, function (value) {\n                wrapObservableAndAnyObservableProperties(value);\n            });\n        } else if (_.isObject(collection)) {\n            _.forOwn(collection, function (value) {\n                wrapObservableAndAnyObservableProperties(value);\n            });\n        }\n    }\n\n    function wrapObservableAndAnyObservableProperties(value) {\n        wrapObservable(value);\n        makeArrayOrObjectObservablesImmutable(value);\n    }\n\n    function wrapObservable(value) {\n        if (value instanceof observable.Observable || value instanceof observable.ObservableArray) {\n            value.setValue = throwImmutableError;\n            value.subscribe = throwImmutableError;\n\n            var observableValue = value.getValue();\n\n            makeArrayOrObjectObservablesImmutable(observableValue);\n        }\n    }\n\n    return ImmutableRoom;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/ImmutableRoom.js\n// module id = 56\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n    'phenix-web-lodash-light',\n    'phenix-web-assert',\n    'phenix-web-observable',\n    './stream.json',\n    './track.json'\n], function (_, assert, observable, stream, track) {\n    'use strict';\n\n    var streamTypes = stream.types;\n    var trackStates = track.states;\n\n    function Stream(uri, type, audioState, videoState) {\n        this.init(uri, type, audioState, videoState);\n    }\n\n    Stream.prototype.init = function (uri, type, audioState, videoState) {\n        assert.isString(uri, 'uri');\n\n        this._uri = new observable.Observable(uri);\n        this._type = new observable.Observable(type, assertIsValidStreamType);\n        this._audioState = new observable.Observable(audioState || trackStates.trackEnabled.name, assertIsValidTrackState);\n        this._videoState = new observable.Observable(videoState || trackStates.trackEnabled.name, assertIsValidTrackState);\n    };\n\n    Stream.prototype.getUri = function getUri() {\n        return this._uri.getValue();\n    };\n\n    Stream.prototype.getType = function getType() {\n        return this._type.getValue();\n    };\n\n    Stream.prototype.getObservableAudioState = function getObservableAudioState() {\n        return this._audioState;\n    };\n\n    Stream.prototype.getObservableVideoState = function getObservableVideoState() {\n        return this._videoState;\n    };\n\n    Stream.prototype.toJson = function toJson() {\n        return {\n            uri: this._uri.getValue(),\n            type: this._type.getValue(),\n            audioState: this._audioState.getValue(),\n            videoState: this._videoState.getValue()\n        };\n    };\n\n    Stream.prototype._update = function update(stream) {\n        if (!_.isObject(stream)) {\n            return;\n        }\n\n        if (stream.hasOwnProperty('audioState')) {\n            this._audioState.setValue(stream.audioState);\n        }\n\n        if (stream.hasOwnProperty('videoState')) {\n            this._videoState.setValue(stream.videoState);\n        }\n    };\n\n    function assertIsValidStreamType(type) {\n        type = _.getEnumName(streamTypes, type);\n\n        if (!type) {\n            throw new Error('\"type\" must be a valid stream type');\n        }\n\n        return type;\n    }\n\n    function assertIsValidTrackState(state) {\n        state = _.getEnumName(trackStates, state);\n\n        if (!state) {\n            throw new Error('\"state\" must be a valid track state');\n        }\n\n        return state;\n    }\n\n    return Stream;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/Stream.js\n// module id = 57\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var streamEnums = {\n        types: {\n            user: {\n                id: 0,\n                name: 'User'\n            },\n            presentation: {\n                id: 1,\n                name: 'Presentation'\n            },\n            audio: {\n                id: 2,\n                name: 'Audio'\n            }\n        }\n    };\n\n    return streamEnums;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/stream.json.js\n// module id = 58\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\ndefine([\n], function () {\n    'use strict';\n\n    var trackEnums = {\n        states: {\n            trackEnabled: {\n                id: 0,\n                name: 'TrackEnabled'\n            },\n            trackDisabled: {\n                id: 1,\n                name: 'TrackDisabled'\n            },\n            trackEnded: {\n                id: 2,\n                name: 'TrackEnded'\n            }\n        }\n    };\n\n    return trackEnums;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/sdk/room/track.json.js\n// module id = 59\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_60__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"protobuf\"\n// module id = 60\n// module chunks = 0","/**\n * Copyright 2017 PhenixP2P Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\ndefine('phenix-web-sdk', [\n    'phenix-rtc',\n    'phenix-web-logging',\n    './sdk/PCast',\n    './sdk/room/RoomService',\n    './sdk/audio/AudioSpeakerDetector',\n    './sdk/bandwidth/BandwidthMonitor',\n    './sdk/express/PCastExpress',\n    './sdk/express/RoomExpress'\n], function (rtc, logging, PCast, RoomService, AudioSpeakerDetector, BandwidthMonitor, PCastExpress, RoomExpress) {\n    window.PhenixPCast = PCast;\n\n    return {\n        PCast: PCast,\n        RoomService: RoomService,\n        AudioSpeakerDetector: AudioSpeakerDetector,\n        BandwidthMonitor: BandwidthMonitor,\n        logging: logging,\n        RTC: rtc,\n        express: {\n            PCastExpress: PCastExpress,\n            RoomExpress: RoomExpress\n        }\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/web-sdk.js\n// module id = 61\n// module chunks = 0"],"sourceRoot":""}